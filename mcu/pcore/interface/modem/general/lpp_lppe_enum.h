/******************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2016
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*******************************************************************************/

/******************************************************************************
 * Filename:
 * --------------------------------------------------------
 *   lpp_lppe_enum.h
 *
 * Project:
 * --------------------------------------------------------
 *
 *
 * Description:
 * --------------------------------------------------------
 *   LPP/LPP Extension Interface - Structure Enumeration
 *
 * Author:
 * --------------------------------------------------------
 * -------
 *
 * --------------------------------------------------------
 * $Log$
 *
 * 10 20 2017 jie-yu.wang
 * [MOLY00284367] [LPP] LR12 Earlyfix Development
 * [LPP] Earlyfix Modification.
 *
 * 10 04 2016 doug.shih
 * [LPPe] interface design
 * Fix enum type redefinition
 * .
 *
 * 09 30 2016 doug.shih
 * [LPPe] interface design
 * .
 *
 * 08 24 2016 doug.shih
 * [LPPe] interface design
 * .
 *
 *
 *****************************************************************************/

#ifndef _LPP_LPPE_ENUM_H
#define _LPP_LPPE_ENUM_H

#include "kal_public_api.h"
#include "kal_public_defs.h"
#include "kal_general_types.h"

#include "lpp_lppe_def.h"

typedef enum
{
    LPP_LPPE_MSG_TYPE_NULL,
    LPP_LPPE_MSG_TYPE_REQUEST_CAPABILITIES,
    LPP_LPPE_MSG_TYPE_PROVIDE_CAPABILITIES,
    LPP_LPPE_MSG_TYPE_REQUEST_ASSISTANCE_DATA,
    LPP_LPPE_MSG_TYPE_PROVIDE_ASSISTANCE_DATA,
    LPP_LPPE_MSG_TYPE_REQUEST_LOCATION_INFORMATION,
    LPP_LPPE_MSG_TYPE_PROVIDE_LOCATION_INFORMATION,
    LPP_LPPE_MSG_TYPE_ABORT,
    LPP_LPPE_MSG_TYPE_ERROR
} lpp_lppe_msg_type_enum;

typedef enum
{
    LPPE_LOC_RESULT_NULL,
    LPPE_LOC_RESULT_NO_ERROR,
    LPPE_LOC_RESULT_UNDEFINED,
    LPPE_LOC_RESULT_REQ_TIMEOUT,
    LPPE_LOC_RESULT_EARLY_FIX,      /* Early fix result */
    LPPE_LOC_RESULT_EARLY_FIX_NO_RESULT  /* Early fix no result */
} lppe_result_enum;

typedef enum
{
    LPP_LPPE_POS_TYPE_INVALID,
    LPP_LPPE_POS_TYPE_HA_GNSS,
    LPP_LPPE_POS_TYPE_WLAN_AP,
    LPP_LPPE_POS_TYPE_SENSOR_PRESSURE,
    LPP_LPPE_POS_TYPE_SRN_BT,

    //... below are not supported pos tech
    //LPP_LPPE_POS_TYPE_EUTRA_OTDOA,
    //LPP_LPPE_POS_TYPE_GSM_EOTD,
    //LPP_LPPE_POS_TYPE_UTRA_OTDOA,
    //LPP_LPPE_POS_TYPE_LTE_ECID,
    //LPP_LPPE_POS_TYPE_GSM_ECID,
    //LPP_LPPE_POS_TYPE_UTRA_ECID
} lpp_lppe_pos_type_enum;


typedef enum
{
    LPP_LPPE_HA_GNSS_AD_TYPE_COMMON,
    LPP_LPPE_HA_GNSS_AD_TYPE_GENERIC
} lpp_lppe_ha_gnss_ad_type_enum;

typedef enum
{
    LPP_LPPE_GNSS_HA_ASSIST_DATA_TYPE_NULL,
    LPP_LPPE_GNSS_HA_COMMON_ASSIST_DATA_TYPE_IONO_MODEL,
    LPP_LPPE_GNSS_HA_COMMON_ASSIST_DATA_TYPE_TROPO_MODEL,
    LPP_LPPE_GNSS_HA_COMMON_ASSIST_DATA_TYPE_ALTITUDE,
    LPP_LPPE_GNSS_HA_COMMON_ASSIST_DATA_TYPE_SOLAR_RAD,
    LPP_LPPE_GNSS_HA_COMMON_ASSIST_DATA_TYPE_CCP_ASSIST,
    
    LPP_LPPE_GNSS_HA_GENERIC_ASSIST_DATA_TYPE_WA_ION_SURF,
    LPP_LPPE_GNSS_HA_GENERIC_ASSIST_DATA_TYPE_SV_MECHANICS,
    LPP_LPPE_GNSS_HA_GENERIC_ASSIST_DATA_TYPE_SV_DCB,
    LPP_LPPE_GNSS_HA_GENERIC_ASSIST_DATA_TYPE_DEGRAD_MODEL,
    LPP_LPPE_GNSS_HA_GENERIC_ASSIST_DATA_TYPE_CCP_ASSIST,
    LPP_LPPE_GNSS_HA_GENERIC_ASSIST_DATA_TYPE_NAV_MODEL,
} lpp_lppe_ha_gnss_assist_data_type_enum;


typedef enum
{
    LPP_LPPE_ABORT_CAUSE_UNDEFINED,
    LPP_LPPE_ABORT_CAUSE_TARGET_DEVICE_ABORT,
    LPP_LPPE_ABORT_CAUSE_NETWORK_ABORT,
    LPP_LPPE_ABORT_CAUSE_STOP_PERIODIC_REPORTING
} lpp_lppe_abort_cause_enum;

typedef enum
{
    LPP_LPPE_ERROR_CAUSE_UNDEFINED,
    LPP_LPPE_ERROR_CAUSE_TARGET_DEVICE_ERROR,
    LPP_LPPE_ERROR_CAUSE_NETWORK_ERROR
} lpp_lppe_error_cause_enum;


typedef enum
{
    WLAN_AP_ERROR_TYPE_LOCATION_SERVER_CAUSE,
    WLAN_AP_ERROR_TYPE_TARGET_DEVICE_CAUSE
} wlan_ap_error_type_enum;


typedef enum
{
    WLAN_AP_LOC_SRV_ERR_CAUSE_UNDEFINED,
    WLAN_AP_LOC_SRV_ERR_CAUSE_REQ_AD_NOT_AVAILABLE,
    WLAN_AP_LOC_SRV_ERR_CAUSE_NOT_ALL_REQ_AD_AVAILABLE
} wlan_ap_loc_srv_err_cause_enum;


typedef enum
{
    WLAN_AP_TGT_DEV_ERR_CAUSE_CAUSE_UNDEFINED,
    WLAN_AP_TGT_DEV_ERR_CAUSE_CAUSE_REQ_MEASUREMENT_NOT_AVAILABLE,
    WLAN_AP_TGT_DEV_ERR_CAUSE_CAUSE_NOT_ALL_REQ_MEASUREMENT_POSSIBLE
} wlan_ap_tgt_dev_err_cause_enum;


typedef enum
{
    WLAN_AP_TYPE_IEEE802_11A,
    WLAN_AP_TYPE_IEEE802_11B,
    WLAN_AP_TYPE_IEEE802_11G,
    WLAN_AP_TYPE_IEEE802_11N,
    WLAN_AP_TYPE_IEEE802_11AC,
    WLAN_AP_TYPE_IEEE802_11AD
} wlan_ap_type_enum;


typedef enum
{
    WLAN_AP_PHY_TYPE_UNKNOWN,
    WLAN_AP_PHY_TYPE_ANY,
    WLAN_AP_PHY_TYPE_FHSS,
    WLAN_AP_PHY_TYPE_DSSS,
    WLAN_AP_PHY_TYPE_IRBASEBAND,
    WLAN_AP_PHY_TYPE_OFDM,
    WLAN_AP_PHY_TYPE_HRDSSS,
    WLAN_AP_PHY_TYPE_ERP,
    WLAN_AP_PHY_TYPE_HT,
    WLAN_AP_PHY_TYPE_IHV
} wlan_ap_phy_type_enum;


typedef enum
{
    WLAN_AP_RTD_UNIT_MICROSECONDS,
    WLAN_AP_RTD_UNIT_HUNDREDS_OF_NANOSECONDS,
    WLAN_AP_RTD_UNIT_TENS_OF_NANOSECONDS,
    WLAN_AP_RTD_UNIT_NANOSECONDS,
    WLAN_AP_RTD_UNIT_TENTHS_OF_NANOSECONDS,
    WLAN_AP_RTD_UNIT_MAX = MAX_ENUM_VALUE,
} wlan_ap_rtd_unit_enum;


typedef enum
{
   WLAN_FEMTO_COVER_AREA_TYPE_GAUSSIAN,
   WLAN_FEMTO_COVER_AREA_TYPE_BINARY_DISTRIBUTION
} wlan_femto_cover_area_type_enum;


typedef enum
{
    WLAN_FEMTO_COVER_AREA_ELEMENT_TYPE_INDOOR,
    WLAN_FEMTO_COVER_AREA_ELEMENT_TYPE_OUTDOOR,
    WLAN_FEMTO_COVER_AREA_ELEMENT_TYPE_MIXED
} wlan_femto_cover_area_element_type_enum;


typedef enum
{
    WLAN_FEMTO_COVER_AREA_REF_LOC_TYPE_ANTENNA,
    WLAN_FEMTO_COVER_AREA_REF_LOC_TYPE_REF_POINT
} wlan_femto_cover_area_ref_loc_type_enum;


typedef enum
{
    SRN_GROUP_TYPE_GROUP_LIST,
    SRN_GROUP_TYPE_GROUP_UPDATE_RESPONSE
} srn_group_type_enum;


typedef enum
{
    SRN_ID_TYPE_MAC_ADDR,  /* BT, BT LE */
    //... below are not supported id type
    //SRN_ID_TYPE_NFC,
    //SRN_ID_TYPE_MOBILECODE,
    //SRN_ID_TYPE_OTHER
} srn_id_type_enum;


typedef enum
{
    SRN_TECH_TYPE_BT,
    SRN_TECH_TYPE_BTLE,
    //... below are not supported pos tech
    //SRN_TECH_TYPE_NFC,
    //SRN_TECH_TYPE_MOBILECODE,
    //SRN_TECH_TYPE_OTHER
} srn_tech_type_enum;

typedef enum
{
    BLUETOOTH_RTD_UNIT_MICROSECONDS,
    BLUETOOTH_RTD_UNIT_HUNDREDS_OF_NANOSECONDS,
    BLUETOOTH_RTD_UNIT_TENS_OF_NANOSECONDS,
    BLUETOOTH_RTD_UNIT_NANOSECONDS,
    BLUETOOTH_RTD_UNIT_TENTHS_OF_NANOSECONDS,
    BLUETOOTH_RTD_UNIT_MAX = MAX_ENUM_VALUE,
}bt_rtd_unit_enum;

typedef enum
{
    SRN_TARGET_DATA_VALID_TYPE_VALID,
    SRN_TARGET_DATA_VALID_TYPE_VALID_UPDATED_DATA_WILL_BE_PROVIDED,
    SRN_TARGET_DATA_VALID_TYPE_VALID_BUT_SERVER_WILL_NOT_PROVIDE_NEW_DATA
} srn_target_data_valid_type_enum;


typedef enum
{
    SRN_ERROR_TYPE_LOCATION_SERVER_CAUSE,
    SRN_ERROR_TYPE_TARGET_DEVICE_CAUSE
} srn_error_type_enum;


typedef enum
{
    SRN_LOCATION_SERVER_GROUP_ERR_CAUSE_UNDEFINED,
    SRN_LOCATION_SERVER_GROUP_ERR_CAUSE_SOME_GROUP_CATEGORY_SRNID_UNKNOWN_UNSUPPORTED,
    SRN_LOCATION_SERVER_GROUP_ERR_CAUSE_ALL_GROUP_CATEGORY_SRNID_UNKNOWN_UNSUPPORTED,
    SRN_LOCATION_SERVER_GROUP_ERR_CAUSE_NO_SRN_GROUPS_NEARBY
} srn_loc_server_group_err_cause_enum;


typedef enum
{
    SRN_LOC_SERVER_GROUP_UPT_ERR_CAUSE_UNDEFINED,
    SRN_LOC_SERVER_GROUP_UPT_ERR_CAUSE_ALL_SRN_GROUPIDS_UNKNOWN,
    SRN_LOC_SERVER_GROUP_UPT_ERR_CAUSE_ALL_SRN_GROUPIDS_KNOWN_SOME_SRN_GROUP_VERSIONS_UNKNOWN,
    SRN_LOC_SERVER_GROUP_UPT_ERR_CAUSE_ALL_SRN_GROUPIDS_KNOWN_ALL_SRN_GROUP_VERSIONS_UNKNOWN,
    SRN_LOC_SERVER_GROUP_UPT_ERR_CAUSE_SOME_SRN_GROUPIDS_UNKNOWN,
    SRN_LOC_SERVER_GROUP_UPT_ERR_CAUSE_SOME_SRN_GROUP_VERSIONS_UNKNOWN_ALL_SRN_GROUP_VERSIONS_UNKNOWN,
    SRN_LOC_SERVER_GROUP_UPT_ERR_CAUSE_SOME_SRN_GROUPIDS_SOME_SRN_GROUP_VERSIONS_UNKNOWN,
    SRN_LOC_SERVER_GROUP_UPT_ERR_CAUSE_INFO_NOT_MATCH_WITH_GROUPID
} srn_loc_server_group_upt_err_cause_enum;


typedef enum
{
    SRN_LOC_SERVER_ANTENNA_ERR_CAUSE_UNDEFINED,
    SRN_LOC_SERVER_ANTENNA_ERR_CAUSE_SOME_ANTENNA_PATTERNIDS_UNKNOWN,
    SRN_LOC_SERVER_ANTENNA_ERR_CAUSE_ALL_ANTENNA_PATTERNIDS_UNKNOWN
} srn_loc_server_antenna_err_cause_enum;


typedef enum
{
    SRN_TARGET_DEVICE_ERR_CAUSE_UNDEFINED,
    SRN_TARGET_DEVICE_ERR_CAUSE_REQUESTED_MEASUREMENTS_NOT_AVAILABLE,
    SRN_TARGET_DEVICE_ERR_CAUSE_NOT_ALL_REQUESTED_MEASUREMENTS_POSSIBLE,
    SRN_TARGET_DEVICE_ERR_CAUSE_CATEGORY_NOT_SUPPORTED
} srn_target_device_err_cause_enum;

#if 0
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
#endif

/*Mapping to LPPeBluetooth_BluetoothMultipleMeasurement*/
typedef enum
{
    SRN_REQ_LOC_MULTI_MEAS_FORBIDDEN,
    SRN_REQ_LOC_MULTI_MEAS_ALLOWED,
    SRN_REQ_LOC_MULTI_MEAS_REQUESTED,
    SRN_REQ_LOC_MULTI_MEAS_MAX = MAX_ENUM_VALUE,
} srn_req_loc_multi_meas_enum;


typedef enum
{
    IP_ADDRESS_TYPE_IP_V4,
    IP_ADDRESS_TYPE_IP_V6
} ip_address_type_enum;


/* Mapping to LPPeIpAddress_Bearer*/
typedef enum
{
    DATA_BEARER_TYPE_UNKNOWN,
    DATA_BEARER_TYPE_GSM,
    DATA_BEARER_TYPE_UTRAN,
    DATA_BEARER_TYPE_LTE,
    DATA_BEARER_TYPE_WLAN,
        /* others type will not be used in mobile devices */
    DATA_BEARER_TYPE_MAX = MAX_ENUM_VALUE,
} data_bearer_type_enum;


typedef enum
{
    SCHEDULED_LOC_DISPOS_TYPE_WITHIN_WINDOW,
    SCHEDULED_LOC_DISPOS_TYPE_OUTSIDE_WINDOW_NOWINDOW,
    SCHEDULED_LOC_DISPOS_TYPE_NOT_SUPPORTED_NO_CAPABILITY,
    SCHEDULED_LOC_DISPOS_TYPE_NOT_SUPPORTED_NO_TIME_REFERENCE,
    SCHEDULED_LOC_DISPOS_TYPE_NOT_SUPPORTED__CONFLICT_ANOTHER_REQUEST,
    SCHEDULED_LOC_DISPOS_TYPE_NOT_SUPPORTED_OTHER_REASONS
} scheduled_loc_dispos_type_enum;


typedef enum
{
    LOC_TIME_STAMP_TYPE_GNSS_TIME,
    LOC_TIME_STAMP_TYPE_NETWORK_TIME,
    LOC_TIME_STAMP_TYPE_RELATIVE_TIME,
} loc_time_stamp_type_enum;


typedef enum
{
    SENSOR_PRIMARY_MOTION_STATE_UNKNOWN,
    SENSOR_PRIMARY_MOTION_STATE_STATIONARY,
    SENSOR_PRIMARY_MOTION_STATE_PEDESTRIAN,
    SENSOR_PRIMARY_MOTION_STATE_RUNNING,
    SENSOR_PRIMARY_MOTION_STATE_CYCLING,
    SENSOR_PRIMARY_MOTION_STATE_CAR,
    SENSOR_PRIMARY_MOTION_STATE_TRAIN,
    SENSOR_PRIMARY_MOTION_STATE_AEROPLANE,
    SENSOR_PRIMARY_MOTION_STATE_BOAT,
    SENSOR_PRIMARY_MOTION_STATE_FIDGETING
} sensor_primary_motion_state_enum;


typedef enum
{
    SENSOR_TGT_PRI_MOTION_STATE_ERR_CAUSE_NOT_AVAILABLE,
    SENSOR_TGT_PRI_MOTION_STATE_ERR_CAUSE_NOT_SUPPORTED
} sensor_tgt_pri_motion_state_err_cause_enum;


typedef enum
{
    SENSOR_TGT_SEC_MOTION_STATE_ERR_CAUSE_NOT_AVAILABLE,
    SENSOR_TGT_SEC_MOTION_STATE_ERR_CAUSE_NOT_SUPPORTED
} sensor_tgt_sec_motion_state_err_cause_enum;


typedef enum
{
    SENSOR_TGT_PRESSURE_ERR_CAUSE_NOT_AVAILABLE,
    SENSOR_TGT_PRESSURE_ERR_CAUSE_NOT_SUPPORTED
} sensor_tgt_pressure_err_cause_enum;


typedef enum
{
    LPPE_SERVICE_SUPPORT_TYPE_NULL,
    LPPE_SERVICE_SUPPORT_TYPE_WLAN,
    LPPE_SERVICE_SUPPORT_TYPE_BT,
    LPPE_SERVICE_SUPPORT_TYPE_SENSOR,
    LPPE_SERVICE_SUPPORT_TYPE_NETWORK,
    LPPE_SERVICE_SUPPORT_TYPE_IPADDRESS,
} lppe_service_support_type_enum;



#endif /* _LPP_LPPE_ENUM_H */
