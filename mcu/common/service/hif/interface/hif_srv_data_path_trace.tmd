/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *   hif_srv_data_path_trace.tmd
 *
 * Project:
 * --------
 *   TATAKA
 *
 * Description:
 * ------------
 *   HIF service common data path trace Log.
 *
 * Author:
 * -------
 *   YiLun Chen
 *
 *==============================================================================
 *                 HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!! 
 *------------------------------------------------------------------------------
 * $Log$
 *
 * 09 01 2017 sherry.zhang
 * [MOLY00274586] [Gen93] Dynamic CCB support
 * Merging
 * dynamic CCB allocation
 *
 * 05 23 2017 sherry.zhang
 * [MOLY00251148] add debug trace in ccci_shm_srv_ul_cb()
 * add debug trace in ccci_shm_srv_ul_cb()
 *
 * 04 24 2017 sherry.zhang
 * [MOLY00244465] [BIANCO][MT6763][RDIT][PHONE][MD_Pre-Sanity]Force assertion and memory dump by ELT Fail
 * add reset read page API
 *
 * 04 06 2017 sherry.zhang
 * [MOLY00234792] add start/stop tx done callback API
 * add start/stop callback API and change enhance mutex to mutex
 *
 * 03 29 2017 sherry.zhang
 * [MOLY00238223] [Bianco Bring-up]add debug trace
 * [CCB]add debug trace
 *
 * 02 23 2017 cs.huang
 * [MOLY00231930] [MT6763_VoLTE_Call] Fix wrong CCCI IMSM channel setting
 * [CCCI] Channel setting bug fix
 *
 * 01 06 2017 bo-kai.huang
 * [MOLY00223052] [USBCFI] 93 USB MW Merge
 * [USBCFI] 93 USB code merge.
 *
 * 08 18 2016 cs.huang
 * [MOLY00198141] [CCCI] Change log format for log reduction
 * [CCCI] Change log format
 *
 * 08 01 2016 ap.wang
 * [MOLY00194819] [Elbrus][4G FDD][ATE][CMW500][DSP-BRP] Assert fail: ccci_error_code.c 101 0x102 0xcb6a02 0x1 - EL2
 * add debug log for GPT timer
 *
 * 07 18 2016 hsin-jun.tang
 * [MOLY00185754] [CCB] Porting to UMOLY trunk
 * [CCB] UMOLYA - CCCI SHM  BM
 *
 * 06 02 2016 cs.huang
 * [MOLY00182402] [MT6291] Trace reduction -- Phase 3
 * [CCCI] Log reduction
 *
 * 07 04 2016 cs.huang
 * [MOLY00185754] [CCB] Porting to UMOLY trunk
 * [CCCI] Add CCB part
 *
 * 06 02 2016 cs.huang
 * [MOLY00182402] [MT6291] Trace reduction -- Phase 3
 * [CCCI] Log reduction
 *
 * 12 02 2015 cs.huang
 * [MOLY00151377] [UMOLY][CCCI] Change L2 buffer setting to L2_BUFFER_HIF
 * [92][CCCI] Change L2 trace default print to L2Trace
 *
 * 11 10 2015 ap.wang
 * [MOLY00148746] [HMU] Check timer feature
 * .
 *
 * 11 10 2015 ap.wang
 * [MOLY00148746] [HMU] Check timer feature
 *
 * 06 08 2015 hsin-jun.tang
 * [MOLY00119406] [CCCI Debug] New Debug DL Trace
 * [CCCI] log reduction for ADD CCCI SEQ
 *
 * 05 14 2015 cs.huang
 * [MOLY00112001] [CCCI] Change CCCI sequence definition in CCCI header.
 * [CCCI] Change CCCI debug log format
 *
 * 05 08 2015 cs.huang
 * [MOLY00112001] [CCCI] Change CCCI sequence definition in CCCI header.
 * [CCCI] Change CCCI sequence definition in CCCI header.
 *
 * 02 26 2015 hsin-jun.tang
 * [MOLY00097014] [CCCI CCMNI] log reduction .tmd
 * [CCCI CCMNI] log reduction UMOLY .tmd files
 *
 * 01 28 2015 cs.huang
 * [MOLY00093773] [HLT] Add HIF Latency Trace module
 * [HLT] Add HIF Latency Trace Module
 *
 * 01 28 2015 cs.huang
 * [MOLY00093773] [HLT] Add HIF Latency Trace module
 * [HLT] Add HIF Latency Trace Module
 *
 * 12 19 2014 hsin-jun.tang
 * [MOLY00088229] [CCCI IMS] Add latency measurement feature
 * [CCCI IMS] Add latency measurement feature
 *
 * 07 22 2014 cs.huang
 * [MOLY00071952] [CCCI] Add new CCCI debug mechanism (1. CCCI seq check 2. AP polling MD status)
 * [CCCI] ccci new debug mechanism
 *
 * 07 22 2014 cs.huang
 * [MOLY00071952] [CCCI] Add new CCCI debug mechanism (1. CCCI seq check 2. AP polling MD status)
 * [CCCI] CCCI new debug mechanism
 *
 * 07 01 2014 ap.wang
 * [MOLY00071092] [HMU] Add tick count
 * .
 *
 * 04 25 2014 cs.huang
 * [MOLY00063727] [CCCI FS] Add CCCI FS DL trace log & sequence number between PS & L2
 * [CCCI FS] Add CCCI FS DL trace log & sequence number between PS & L2
 *
 * 10 01 2013 ian.cheng
 * [MOLY00040051] [CCCI] Enhance CCCI L2 Trace and Debug Message
 * Submit CCCI L2 trace
 *
 * 09 06 2013 ap.wang
 * [MOLY00036761] [CCCI] Add L2 trace log	[CCCI] Add L2 trace log
 *
 * 08 28 2013 ap.wang
 * [MOLY00035451] [HMU] Add L2 trace log
 * 	[HMU] Add L2 trace for event trigger
 *
 * 08 15 2013 yilun.chen
 * [MOLY00033889] Change buffer usage for HIF data path trace
 * * [HIF] Change HIF data path log buffer to L2_Buffer.
 * * [HIF] Follow codegen variable convention.
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!! 
 *==============================================================================
 *******************************************************************************/

/*
Notes:
	MAX MAX_ARG is 7, But the best MIPS is 4.
	Set MAX_ARG bigger than 4, only affect MIPS of log use more than 4 ARG.
*/

[Default]
	HIF_SRV
	ON
        L2_Buffer
	TCMFORCE
	MAX_ARG 7	
	L2_BUFFER_SETTING	L2_BUFFER_HIF

[Modem_Type]
	Generic

[Class]
	UL		on
	DL		on
	HMU		on
	HMU_HIF		on
	CCCI_DL		on
	CCCI_DL_DATA	on
	CCCI_DL_CONTROL	on
	CCCI_UL 	on
	CCCI_DUMP	on
	CCCI_IMS_DUMP	on
	CCCI_FS_DUMP	on   	
	CCCI_DEBUG_SEQ	on
	HLT		on
    UBM     on
	CCCI_SHM_BM     on
[String]

[Message]
	info	HIF_SRV_DUMMY					UL 		"[Module name] filename(): [%d] This is dummy log message"
	info	HMU_DATA_EVENT_TRIGGER			HMU		"[HMU] EVENT Trigger from (MOD_ID %4d) GPT=%d event(%xl) tick(%l) dur(%l)"
	info	HMU_DATA_EVENT_TRIGGER_TIMEOUT_WARNING	HMU		"[HMU][WARNING] EVENT Trigger from GPT=%d event(%xl) tick(%l) dur(%l)"
	info    HMU_DATA_EVENT_TRIGGER_TIMEOUT_ERROR	HMU		"[HMU][ERROR] EVENT Trigger from GPT=%d event(%xl) tick(%l) dur(%l)"
	info	HMU_HIFEG_STOP					HMU_HIF		"[HMU] hmu_hifeg_stop,  MOD_ID %4d stop=  %10xl enable= %10xl"
	info	HMU_HIFEG_START					HMU_HIF		"[HMU] hmu_hifeg_start, MOD_ID %4d start= %10xl enable= %10xl"
	info	HMU_CHANGE_TIMER_DSP				HMU_HIF		"[HMU] hmu_switch_hif_timer to DSP"
	info	HMU_CHANGE_TIMER_GPT				HMU_HIF		"[HMU] hmu_switch_hif_timer to GPT"
	info	HMU_GPT_CB_NO_NEXT					HMU_HIF		"[HMU] hmu_gpt_callback, no next GPT" 
	info  HMU_STOP_GPT								HMU_HIF		"[HMU] hmu_stop_hif_sys_timer, GPT is stop by (MOD_ID %4d)"
	info	CCCI_WRITE_DATA_TRACE			CCCI_DL		"[CCCI] ccci_write ch(%ub) data(%xl,%xl) resrv(%xl)" 
	info	CCCI_WRITE_GPD_RET_DATA_TRACE	CCCI_DL		"[CCCI DL] ccci_write_gpd MOD(%d) ch(%ub) ret(%b) num_gpd(%d)"
        info	CCCI_WRITE_GPD_CONTROL_PATH_TRACE	CCCI_DL_CONTROL		"[CCCI DL] ccci_write_gpd ch(%ub) seq(%xd-%xd) ast_bit(%b) first_data(%xl,%xl) first_resrv(%xl)"
        info	CCCI_WRITE_GPD_DATA_PATH_TRACE	CCCI_DL_DATA		"[CCCI DL] ccci_write_gpd ch(%ub) seq(%xd-%xd) ast_bit(%b) first_data(%xl,%xl) first_resrv(%xl)"
	info	CCCI_RELOAD_GPD_TRACE	        CCCI_UL		"[CCCI UL] ccci_write_gpd reload MOD(%d) ch(%ub) ret(%b) num_gpd(%d)"
	info 	CCCI_ULIOR_CB_DATA_TRACE		CCCI_UL		"[CCCI] ccci_ulior_cb ch(%ub) seq(%xd) ast_bit(%b) data(%xl,%xl) resrv(%xl)"
	info 	CCCI_ULBUFF_CB_DATA_TRACE		CCCI_UL		"[CCCI] ccci_ulbuff_cb ch(%ub) seq(%xd) ast_bit(%b) data(%xl,%xl) resrv(%xl)"
	info	CCCI_DATA_DUMP_TRACE			CCCI_DUMP 	"[CCCI DUMP] ch(%ub) seq(%xd) idx(%b): %10xl %10xl %10xl %10xl"
	info	CCCI_IMS_DATA_DUMP_TRACE		CCCI_IMS_DUMP 	"[CCCI IMS DUMP] ch(%ub) idx(%b): %10xl %10xl %10xl %10xl"
	info	CCCI_IMS_UL_LATENCY			    CCCI_IMS_DUMP	"[CCCI IMS UL LATENCY] last %d : avg(%l) max(%l) min(%l), curr(%l) hif_int(%l)"
	info	CCCI_IMS_DL_LATENCY			    CCCI_IMS_DUMP	"[CCCI IMS DL LATENCY] last %d : avg(%l) max(%l) min(%l), curr(%l)"
	info	CCCI_FS_DATA_DUMP_TRACE			CCCI_FS_DUMP	"[CCCI FS DUMP] ccci_fs_put_buff seq(%xd) op(%xd) idx(%b): %10xl %10xl %10xl %10xl"
	info	CCCI_DEBUG_ADD_SEQ_TRACE		CCCI_DEBUG_SEQ	"[CCCI ADD SEQ] ch(%ub) seq(%xd) ast_bit(%b) data(%xl %xl) resrv(%xl)"
	info	CCCI_DEBUG_CHECK_SEQ_TRACE		CCCI_DEBUG_SEQ	"[CCCI CHECK SEQ] ch(%ub) seq(%xd) ast_bit(%b) data(%xl %xl) resrv(%xl)"
	warn	HLT_OVER_BOUND_TRACE			HLT		"[HLT OVER BOUND] mod(%d) id(%MHLT_USER_ID) dur(%ul) start(%ul) end(%ul) reserved(%xl)"
	warn	HLT_OVER_BOUND_AVG_TRACE		HLT		"[HLT OVER BOUND] mod(%d) id(%MHLT_USER_ID) dur(%ul) start(%ul) end(%ul) reserved(%xl) avg(%ul)"
    info    UBM_DRB_ALLOC_SUCCESS           UBM     "[UBM_DRB] alloc_free_drb: swFreeCount = %l, swWritingIdx = %l, swStockIdx/drbTotalCount = %l"
    info    UBM_DRB_ALLOC                   UBM     "[UBM_DRB] alloc_free_drb done: new state = %d, alloCount = %l, swFreeCount = %l, result = %l"
    info    UBM_DRB_SUBMIT                  UBM     "[UBM_DRB] submit_drb: current state = %d, submitCount = %l, swWritingCount = %l, swStockCount = %l"
    info    UBM_DRB_REPAY                   UBM     "[UBM_DRB] check_and_repay_drb: swStockCount = %d, freeDrbCount = %l, tarIdx = %l, srcIdx = %l"
    info    UBM_DRB_GET_ONE                 UBM     "[UBM_DRB] get_one_writable_drbIdx: current state = %d, swFreeCount = %l, swWritingIdx = %l, swStockIdx =%l"
    info    UBM_DRB_GET_ONE_DONE            UBM     "[UBM_DRB] get_one_writable_drbIdx done: new state = %d, swWritingCount = %l, swFreeCount = %l, swStockCount = %l"
    info    UBM_DRB_IDX_TO_ADDR             UBM     "[UBM_DRB] index_to_address: drbTotalCount = %d, stockTotalCount = %l, drbIndex = %l, drbAddr = 0x%xl"
    info    UBM_UL_META_GET_NEXT_IDX        UBM     "[UBM_UL_META] get_next_idx: current idx = %d, next idx = %l"
    info    UBM_UL_META_IDX_TO_ADDR         UBM     "[UBM_UL_META] index_to_address: idx = %d, addr = 0x%xl"
    info    UBM_VRB_VIR2PHY_VIR             UBM     "[UBM_VRB] vir2phy_and_set_map: virtual addr = 0x%xd, len = %l"
    info    UBM_VRB_VIR2PHY_PHY             UBM     "[UBM_VRB] vir2phy_and_set_map: phyIdx = %d, phyAddr = 0x%xl, phyLen = %l"
    info    UBM_XIT_GET_NEXT_IDX            UBM     "[UBM_XIT] get_next_idx: current idx = %d, next idx = %l"
	info	CCCI_SHM_BM_WRITE_ALLOC		    CCCI_DL		"[CCCI_SHM_BM_WRITE_ALLOC] mod(%d) usr_id(%l) ret(%l) add(%xl) length(%l)"
	info	CCCI_SHM_BM_WRITE_ALLOC_FAIL		    CCCI_DL		"[CCCI_SHM_BM_WRITE_ALLOC_FAIL] usr_id(%l) alloc_index(%xl) free index(%xl) read index(%xl) write index(%l) "
	info	CCCI_SHM_BM_WRITE_DONE		    CCCI_DL		"[CCCI_SHM_BM_WRITE_DONE] mod(%d) usr_id(%l) add(%xl) length(%l)"
	info	CCCI_SHM_BM_READ_GET		    CCCI_UL		"[CCCI_SHM_BM_READ_GET] mod(%d) usr_id(%l) ret(%l) add(%xl) length(%l)"
	info	CCCI_SHM_BM_READ_GET_FAIL		    CCCI_UL		"[CCCI_SHM_BM_READ_GET_FAIL] usr_id(%l) alloc_index(%xl) free index(%xl) read index(%xl) write index(%l) "
	info	CCCI_SHM_BM_READ_DONE		    CCCI_UL		"[CCCI_SHM_BM_READ_DONE] mod(%d) usr_id(%l)"

	info	CCCI_SHM_BM_TIMER_STOP		    CCCI_DL		"[CCCI_SHM_BM_TIMER_STOP] CNT(%d)"
	info	CCCI_SHM_BM_TIMER_START		    CCCI_DL		"[CCCI_SHM_BM_TIMER_START] CNT(%d)"
	info	CCCI_SHM_BM_TIMER_RESTART		CCCI_DL		"[CCCI_SHM_BM_TIMER_RESTART] CNT(%d)"
	info	CCCI_SHM_BM_TIMER_CB			CCCI_DL		"[CCCI_SHM_BM_TIMER_CB] CNT(%d)"
	info	CCCI_SHM_BM_NOTIFY				CCCI_DL		"[CCCI_SHM_BM_NOTIFY] usr_id(%d)  CNT(%l)"
	info	CCCI_SHM_BM_WRITE_CONTENT		CCCI_DL		"[CCCI_SHM_BM_W_CONTENT] usr_id(%d) num(%xl)"
	info	CCCI_SHM_BM_READ_CONTENT		CCCI_DL		"[CCCI_SHM_BM_R_CONTENT] usr_id(%d) num(%xl)"
	info	CCCI_SHM_BM_HW_USER     		CCCI_DL		"[CCCI_SHM_BM_HW_USER] usr_id(%d) "
	info	CCCI_SHM_BM_TX_CB          		CCCI_DL		"[CCCI_SHM_BM_TX_CB] usr_id(%d) add(%xl) size(%xl)"
	info	CCCI_SHM_BM_DEBUG          		CCCI_DL		"[CCCI_DEBUG] mod(%d) usr_id(%d) tag_num(%d) content1(%xl) content2(%xl) content3(%xl)"
	info	CCCI_SHM_BM_USER_STOP_CALLBACK     		CCCI_DL		"[CCCI_SHM_BM_USER_DHL_STOP_CALLBACK] done!  usr_id(%l) "
	info	CCCI_SHM_BM_USER_START_CALLBACK     		CCCI_DL		"[CCCI_SHM_BM_USER_DHL_START_CALLBACK] done! usr_id(%l) "
	info	CCCI_SHM_BM_USER_RESET_RX_INDEX     		CCCI_UL		"[CCCI_SHM_BM_USER_RESET_RX_INDEX] done! usr_id(%l) alloc_index(%xl) free index(%xl) read index(%xl) write index(%l) "
	info	CCCI_SHM_BM_UL_CB    		CCCI_UL		"[CCCI_SHM_BM_UL_CB]  alloc_index(%xl) free index(%xl) read index(%xl) write index(%xl) , rx_ilm_tag(%d) "
	info  CCCI_SHM_BM_GET_TOTAL_SIZE   CCCI_UL     "[CCCI_SHM_BM_GET_TOTAL_SIZE]total size(%l) return value(%l)"
	info  CCCI_SHM_BM_GET_USER_SIZE   CCCI_UL     "[CCCI_SHM_BM_GET_USER_SIZE]user id(%d) direction(%d) size(%l) return value(%l)"
	info  CCCI_SHM_BM_CHECK_CCB_STATUS   CCCI_DL     "[CCCI_SHM_BM_CHECK_CCB_STATUS]CCB is invalid! init status(%d)"



