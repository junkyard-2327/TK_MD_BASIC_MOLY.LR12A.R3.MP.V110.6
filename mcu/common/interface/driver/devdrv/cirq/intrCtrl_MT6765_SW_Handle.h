/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2012
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/


/*****************************************************************************
 *
 * Filename:
 * ---------
 *   intrCtrl_MT6765_SW_Handle.h
 *
 * Project:
 * --------
 *   MT6765
 *
 * Description:
 * ------------
 *   This file define software interrupt handler.
 *
 * Author:
 * -------
 * -------
 *
 * ==========================================================================
 * $Log$
 *
 * 08 10 2017 yen-chun.liu
 * [MOLY00270029] [System Service][KAL] Gen93 dummy LISR APIs
 * dummy LISR driver.
 *
 * 08 03 2017 yen-chun.liu
 * [MOLY00267971] [SWLA] New Snapshot API for Robust Modem Feature
 * 2 new SW interrupt for SWLA.
 *
 * 06 13 2017 yen-chun.liu
 * [MOLY00244660] [MT6739][Gen93][System Service][MDCIRQ] Compile option for ZION(MT6739)
 * .
 *
 * 04 06 2017 yen-chun.liu
 * [MOLY00239574] [System Service][MOLY Kernel Internal Request][Gen93] MDDBG Regression
 * MDDBG SW IRQ config.
 *
 * 04 05 2017 yen-chun.liu
 * [MOLY00231842] [System Software][CIRQ][Nucleus_V3] OS IPI
 * MDCIRQ driver for OSIPI.
 *
 * 03 07 2017 yen-chun.liu
 * [MOLY00194080] [System Service][MDCIRQ] 93 MDCIRQ interrupt config
 * return SW trigger IRQ 164,165 back.
 *
 * 02 10 2017 i-chun.liu
 * [MOLY00228017] [Bianco Bring-up][Gen93/CIRQ] Add TDS UMAC HRT SWLR
 * Add TDS UMAC HRT SWLR.
 *
 * 01 06 2017 yen-chun.liu
 * [MOLY00214957] [Gen93][System Service][MDCIRQ] Modify Gen93 MDCIRQ driver
 * add SW trigger interrupt ID.
 *
 * 05 30 2016 i-chun.liu
 * [MOLY00171836] 93 MDCIRQ driver implementation
 * MDCIRQ driver implementation.
 *
 * 02 22 2016 i-chun.liu
 * [MOLY00165445] [MT6292][FPGA][Phone Call][4G FDD][Critical] Information about spurious interrupt lost with SST exception flow
 * MDCIRQ driver update.
 * SW_TRIGGER_CODE43-SW_TRIGGER_CODE54 is in the start to prevent SW_HANDLE_END small than SW_TRIGGER_CODEX
 *
 * 02 04 2016 i-chun.liu
 * [MOLY00140199] MT6292 MDCIRQ and GIC driver implementation
 * add CIRQ SW trigger interrupts .
 *
 * 10 26 2015 i-chun.liu
 * [MOLY00140199] MT6292 MDCIRQ and GIC driver implementation
 * MDCIRQ SW trigger driver update.
 *
 * 09 30 2015 i-chun.liu
 * [MOLY00135941] UMOLY Trunk merge back for MT6763
 * update ELBRUS IRQID table .
 *
 * 08 24 2015 i-chun.liu
 * [MOLY00135941] UMOLY Trunk merge back for ELBRUS
 * fixed CIRQ related build error for ELBRUS.
 *
 * 07 29 2014 linson.du
 * [MOLY00070793] [TK6291]: CIRQ driver update
 * irq id and prority update.
 *
 * 04 24 2014 da.wang
 * [MOLY00062016] Fix build error of porting for TK6291
 * Update internal PMU & SW LISR naming.
 *
 * 07 03 2013 chin-chieh.hung
 * [MOLY00027330] [ARM7toMOLY] ARM7 Build/SYSGEN/Functions Update to TRUNK
 * .
 *
 * 06 04 2013 mogens.christiansen
 * [MOLY00024323] [MT7208][NW-UE SIM][MOLY Regression][TC 6.2.3.31] Assert fail: m14999.c line 1022
 * Fixed SW interrupt mapping in UESIM project
 *
 * 05 24 2013 chin-chieh.hung
 * [MOLY00023372] [MT6290][NW-UE SIM] UESIM MOLY Migration - UESIM related changes submission
 * fix UESIM config error in target build
 *
 * 05 23 2013 chin-chieh.hung
 * [MOLY00023372] [MT6290][NW-UE SIM] UESIM MOLY Migration - UESIM related changes submission
 * UESIM, cirq support
 *
 * 03 25 2013 chin-chieh.hung
 * [MOLY00011352] [Driver] Update for common devdrv driver
 * add sw trigger interrupts
 *
 * 02 04 2013 chin-chieh.hung
 * [MOLY00009725] MT7208 rename to MT6290 - basic platform module
 * chip rename:MT7208 to MT6290
 ****************************************************************************/


/* Add SW handler mapping:
      1st parameter: The name of software handler
      2nd parameter: The software handler number
      3th parameter: The mapping of software handler to hardware interrupt code
      User:
      SW_TRIGGER_CODE1 = HC Yang (Cannot be modified due to OSIPI optimized to assembly)
      SW_TRIGGER_CODE2 = HC Yang (Cannot be modified due to OSIPI optimized to assembly)
      SW_TRIGGER_CODE3 = HC Yang (Cannot be modified due to OSIPI optimized to assembly)
      SW_TRIGGER_CODE4 = HC Yang (Cannot be modified due to OSIPI optimized to assembly)
      SW_TRIGGER_CODE5 = HC Yang
      SW_TRIGGER_CODE6 = HC Yang
      SW_TRIGGER_CODE7 = Max Weng
      SW_TRIGGER_CODE8 = Max Weng
      SW_TRIGGER_CODE9 = Max Weng
      SW_TRIGGER_CODE10 = Max Weng
      SW_TRIGGER_CODE11 = Max Weng
      SW_TRIGGER_CODE12 = Max Weng
      SW_TRIGGER_CODE13 = Zengling Jin
      SW_TRIGGER_CODE14 = Zengling Jin
      SW_TRIGGER_CODE15 = Zengling Jin
      SW_TRIGGER_CODE16 = Chuansheng Zhang
      SW_TRIGGER_CODE17 = Chuansheng Zhang
      SW_TRIGGER_CODE18 = Chuansheng Zhang
      SW_TRIGGER_CODE19 = Chuansheng Zhang
      SW_TRIGGER_CODE20 = Huei-Ya Chang
      SW_TRIGGER_CODE21 = Qmei Yang
      SW_TRIGGER_CODE22 = Tee-Yuen Chun
      SW_TRIGGER_CODE23 = Yuni Chang
      SW_TRIGGER_CODE24 = SY Yeh
      SW_TRIGGER_CODE25 = Owen Ho
      SW_TRIGGER_CODE26 = Owen Ho
      SW_TRIGGER_CODE27 = Owen Ho
      SW_TRIGGER_CODE28 = Owen Ho
      SW_TRIGGER_CODE29 = Carl Kao
      SW_TRIGGER_CODE30 = Wade Huang
      SW_TRIGGER_CODE31 = Woody kuo
      SW_TRIGGER_CODE32 = Jun-Ying Huang
      SW_TRIGGER_CODE33 = Jun-Ying Huang
      SW_TRIGGER_CODE34 = Weimin Zeng
      SW_TRIGGER_CODE35 = Weimin Zeng
      SW_TRIGGER_CODE36 = HW Jheng
      SW_TRIGGER_CODE37 = HW Jheng
      SW_TRIGGER_CODE38 = Ian-GF Huang (Cannot be modified due to activate dummy LISR driver code)
      SW_TRIGGER_CODE39 = Ian-GF Huang (Cannot be modified due to activate dummy LISR driver code)
      SW_TRIGGER_CODE40 = Ian-GF Huang (Cannot be modified due to activate dummy LISR driver code)
      SW_TRIGGER_CODE41 = Ian-GF Huang (Cannot be modified due to activate dummy LISR driver code)
      SW_TRIGGER_CODE42 = 
      SW_TRIGGER_CODE43 = 
      SW_TRIGGER_CODE44 = 
      SW_TRIGGER_CODE45 = 
      SW_TRIGGER_CODE46 = 
      SW_TRIGGER_CODE47 = 
      SW_TRIGGER_CODE48 = 
      SW_TRIGGER_CODE49 = 
      SW_TRIGGER_CODE50 = 
      SW_TRIGGER_CODE51 = 
      SW_TRIGGER_CODE52 = 
      SW_TRIGGER_CODE53 = 
      SW_TRIGGER_CODE54 = 
      SW_TRIGGER_CODE55 = 
      SW_TRIGGER_CODE56 = 
      SW_TRIGGER_CODE57 = 
      SW_TRIGGER_CODE58 = 
      SW_TRIGGER_CODE59 = 
      SW_TRIGGER_CODE60 = 
      SW_TRIGGER_CODE61 = 
      SW_TRIGGER_CODE62 = 
      SW_TRIGGER_CODE63 = 
      SW_TRIGGER_CODE64 = 
  */
#if (defined(__MIPS_IA__))


X_SW_HANDLE_CONST(SW_TRIGGER_CODE1, IRQ_SW_LISR1_CODE, IRQ_SW_LISR1_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE2, IRQ_SW_LISR2_CODE, IRQ_SW_LISR2_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE3, IRQ_SW_LISR3_CODE, IRQ_SW_LISR3_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE4, IRQ_SW_LISR4_CODE, IRQ_SW_LISR4_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE5, IRQ_SW_LISR5_CODE, IRQ_SW_LISR5_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE6, IRQ_SW_LISR6_CODE, IRQ_SW_LISR6_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE7, IRQ_SW_LISR7_CODE, IRQ_SW_LISR7_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE8, IRQ_SW_LISR8_CODE, IRQ_SW_LISR8_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE9, IRQ_SW_LISR9_CODE, IRQ_SW_LISR9_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE10, IRQ_SW_LISR10_CODE, IRQ_SW_LISR10_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE11, IRQ_SW_LISR11_CODE, IRQ_SW_LISR11_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE12, IRQ_SW_LISR12_CODE, IRQ_SW_LISR12_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE13, IRQ_SW_LISR13_CODE, IRQ_SW_LISR13_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE14, IRQ_SW_LISR14_CODE, IRQ_SW_LISR14_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE15, IRQ_SW_LISR15_CODE, IRQ_SW_LISR15_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE16, IRQ_SW_LISR16_CODE, IRQ_SW_LISR16_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE17, IRQ_SW_LISR17_CODE, IRQ_SW_LISR17_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE18, IRQ_SW_LISR18_CODE, IRQ_SW_LISR18_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE19, IRQ_SW_LISR19_CODE, IRQ_SW_LISR19_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE20, IRQ_SW_LISR20_CODE, IRQ_SW_LISR20_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE21, IRQ_SW_LISR21_CODE, IRQ_SW_LISR21_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE22, IRQ_SW_LISR22_CODE, IRQ_SW_LISR22_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE23, IRQ_SW_LISR23_CODE, IRQ_SW_LISR23_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE24, IRQ_SW_LISR24_CODE, IRQ_SW_LISR24_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE25, IRQ_SW_LISR25_CODE, IRQ_SW_LISR25_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE26, IRQ_SW_LISR26_CODE, IRQ_SW_LISR26_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE27, IRQ_SW_LISR27_CODE, IRQ_SW_LISR27_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE28, IRQ_SW_LISR28_CODE, IRQ_SW_LISR28_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE29, IRQ_SW_LISR29_CODE, IRQ_SW_LISR29_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE30, IRQ_SW_LISR30_CODE, IRQ_SW_LISR30_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE31, IRQ_SW_LISR31_CODE, IRQ_SW_LISR31_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE32, IRQ_SW_LISR32_CODE, IRQ_SW_LISR32_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE33, IRQ_SW_LISR33_CODE, IRQ_SW_LISR33_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE34, IRQ_SW_LISR34_CODE, IRQ_SW_LISR34_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE35, IRQ_SW_LISR35_CODE, IRQ_SW_LISR35_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE36, IRQ_SW_LISR36_CODE, IRQ_SW_LISR36_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE37, IRQ_SW_LISR37_CODE, IRQ_SW_LISR37_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE38, IRQ_SW_LISR38_CODE, IRQ_SW_LISR38_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE39, IRQ_SW_LISR39_CODE, IRQ_SW_LISR39_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE40, IRQ_SW_LISR40_CODE, IRQ_SW_LISR40_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE41, IRQ_SW_LISR41_CODE, IRQ_SW_LISR41_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE42, IRQ_SW_LISR42_CODE, IRQ_SW_LISR42_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE43, IRQ_SW_LISR43_CODE, IRQ_SW_LISR43_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE44, IRQ_SW_LISR44_CODE, IRQ_SW_LISR44_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE45, IRQ_SW_LISR45_CODE, IRQ_SW_LISR45_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE46, IRQ_SW_LISR46_CODE, IRQ_SW_LISR46_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE47, IRQ_SW_LISR47_CODE, IRQ_SW_LISR47_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE48, IRQ_SW_LISR48_CODE, IRQ_SW_LISR48_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE49, IRQ_SW_LISR49_CODE, IRQ_SW_LISR49_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE50, IRQ_SW_LISR50_CODE, IRQ_SW_LISR50_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE51, IRQ_SW_LISR51_CODE, IRQ_SW_LISR51_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE52, IRQ_SW_LISR52_CODE, IRQ_SW_LISR52_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE53, IRQ_SW_LISR53_CODE, IRQ_SW_LISR53_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE54, IRQ_SW_LISR54_CODE, IRQ_SW_LISR54_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE55, IRQ_SW_LISR55_CODE, IRQ_SW_LISR55_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE56, IRQ_SW_LISR56_CODE, IRQ_SW_LISR56_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE57, IRQ_SW_LISR57_CODE, IRQ_SW_LISR57_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE58, IRQ_SW_LISR58_CODE, IRQ_SW_LISR58_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE59, IRQ_SW_LISR59_CODE, IRQ_SW_LISR59_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE60, IRQ_SW_LISR60_CODE, IRQ_SW_LISR60_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE61, IRQ_SW_LISR61_CODE, IRQ_SW_LISR61_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE62, IRQ_SW_LISR62_CODE, IRQ_SW_LISR62_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE63, IRQ_SW_LISR63_CODE, IRQ_SW_LISR63_CODE)
X_SW_HANDLE_CONST(SW_TRIGGER_CODE64, IRQ_SW_LISR64_CODE, IRQ_SW_LISR64_CODE)

#else
#error "No CPU version select. Need to specify CPU version in project MT6765 for MDSYS."
#endif

