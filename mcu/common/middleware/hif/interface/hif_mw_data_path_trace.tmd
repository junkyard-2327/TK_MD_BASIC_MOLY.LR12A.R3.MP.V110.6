/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *   hif_mw_data_path_trace.tmd
 *
 * Project:
 * --------
 *   TATAKA
 *
 * Description:
 * ------------
 *   HIF middleware common data path trace Log.
 *
 * Author:
 * -------
 *   YiLun Chen
 *
 *==============================================================================
 *                 HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!! 
 *------------------------------------------------------------------------------
 * $Log$
 *
 * 09 25 2019 amit.singh
 * [MOLY00442328] [GEN_93]?Android P R15????????minidump????????????53/????58?[Fatal error(task)] err_code1:0x00000305 err_code2:0x88880272 err_code3:0xCCCCCCCC
 * 	
 * 	R3.MP patch GPD aggregation.
 *
 * 09 25 2019 amit.singh
 * [MOLY00442328] [GEN_93]?Android P R15????????minidump????????????53/????58?[Fatal error(task)] err_code1:0x00000305 err_code2:0x88880272 err_code3:0xCCCCCCCC
 * 	
 * 	R3.MP patch GPD aggregation.
 *
 * 06 18 2019 jun-jie.su
 * [MOLY00412903] [Merlot][Q0][BSP+] SIM1 registers VoLTE in more 30 sec
 * 	
 * 	porintg queue RA patch.
 *
 * 10 22 2018 amit.singh
 * [MOLY00353403] [Gen93][USIR] User sensitive information removal IPCore
 * 	
 * 	minidump for R3.MP.
 *
 * 02 12 2018 jun-jie.su
 * [MOLY00307844] [IN5][MT6737H][PPD][功耗][network]Gen 93平?能?在modem侧过滤收到的带fin，ack flag的tcp?传包 [LR12A.R3][header file]
 * 	     merge back to R3 - header.
 *
 * 02 12 2018 jun-jie.su
 * [MOLY00307844] [IN5][MT6737H][PPD][功耗][network]Gen 93平?能?在modem侧过滤收到的带fin，ack flag的tcp?传包 [LR12A.R3][header file]
 *      merge back to R3 - header.
 *
 * 02 12 2018 jun-jie.su
 * [MOLY00307844] [IN5][MT6737H][PPD][功耗][network]Gen 93平?能?在modem侧过滤收到的带fin，ack flag的tcp?传包 [LR12A.R3][header file]
 * merge back to R3 - header.
 *
 * 12 07 2017 i-wei.tsai
 * [MOLY00287984] [MT6763][Bianco][N1][MTBF][PHONE][HQ][Lab][Ericsson][ASSERT] file:mcu/common/middleware/hif/ipcore/src/ipc_filter.c line:3653
 * 	
 * 	.
 *
 * 10 13 2017 bo-kai.huang
 * [MOLY00281667] HIF L2 trace
 * [HIF] L2 Trace.
 *
 * 07 18 2017 bo-kai.huang
 * [MOLY00239838] IPCORE Fragment Support
 * [IPC_FRAG] Reassemble and fragment support.
 *
 * 06 22 2017 peter.hsu
 * [MOLY00258500] [MT6763][Bianco][N1][India FT][Kolkata][WW FT][4GMM][Airtel][Vodafone]After 3G2 handover data stuck in all RAT mode
 * [Gen93][IPCORE] Refine log for uplink data path
 *
 * 06 02 2017 peter.hsu
 * [MOLY00254208] [Gen93] Universal PSN HIF dev
 * [Gen93][IPCORE] Universal PSN Dev
 * - Refine log to format using PSN
 * - Dump packets which is extracted from the main data path
 *
 * 04 07 2017 jun-quan.chen
 * [MOLY00239451] [MDT] MDT porting to UMOLYA
 * UFPM porting to UMOLYA
 *
 * 04 06 2017 peter.hsu
 * [MOLY00239838] IPCORE Fragment Support
 * [Gen93][Frag][IPCORE] Solve build errors
 *
 * 04 06 2017 bo-kai.huang
 * [MOLY00239838] IPCORE Fragment Support
 * [IPC_FRAG] IPCORE fragment feature support.
 *
 * 03 08 2017 tj.chang
 * [MOLY00227639] [Bianco Bring-up] RNDIS support DID/DRB
 * Seperate MW USB L2 trace.
 *
 * 02 23 2017 tj.chang
 * [MOLY00227639] [Bianco Bring-up] RNDIS support DID/DRB
 * [UMOLYA] ring-buffer based support.
 *
 * 02 22 2017 peter.hsu
 * [MOLY00199626] [Gen93][IPCORE] IPCore Dev
 * [Gen93][IPCORE] Gen93 Dev Phase 3: MDT
 *
 * 01 06 2017 bo-kai.huang
 * [MOLY00223052] [USBCFI] 93 USB MW Merge
 * [USBCFI] 93 USB code merge.
 *
 * 10 07 2016 peter.hsu
 * [MOLY00199626] [Gen93][IPCORE] IPCore Dev
 * [Gen93][IPCORE] Support Test Loop Back mode
 *
 * 08 31 2016 peter.hsu
 * [MOLY00200586] [IPCORE] Remove mdt debug use log
 * [IPCORE] Remove packet filter not match L2 trace log
 *
 * 08 29 2016 peter.hsu
 * [MOLY00182402] [MT6291] Trace reduction -- Phase 3
 * [IPCORE] L2 trace log reduction
 *
 * 08 29 2016 peter.hsu
 * [MOLY00199626] [Gen93][IPCORE] IPCore Dev
 * [IPCORE] Gen93 Dev Phase1: Basic Data Path
 * - UL Meta & DL DID without filtering
 *
 * 08 18 2016 cs.huang
 * [MOLY00198141] [CCCI] Change log format for log reduction
 * [CCCI] Change log format
 *
 * 06 02 2016 peter.hsu
 * [MOLY00182402] [MT6291] Trace reduction -- Phase 3
 * [IPCORE] L2 trace log reduction
 *
 * 06 02 2016 cs.huang
 * [MOLY00182402] [MT6291] Trace reduction -- Phase 3
 * [CCCI] Log reduction
 *
 * 06 02 2016 cs.huang
 * [MOLY00182402] [MT6291] Trace reduction -- Phase 3
 * [CCCI] Log reduction
 *
 * 06 01 2016 cs.huang
 * [MOLY00182647] [CCCI] Fast CCCI header
 * [CCCI] Fast CCCI header
 *
 * 06 01 2016 peter.hsu
 * [MOLY00179286] [IPCORE] LTECSR Request to Get IP/UDP Header for RTP packets
 * [LTECSR][IPCORE] Export ipc_pack_pkt() to LTECSR for adding IP/UDP header
 *
 * 06 01 2016 peter.hsu
 * [MOLY00171352] [WW FT][MT6755][Jade-M][H3G][UK][VoLTE][SQC Excluded] No "manage conference" menu
 * [IPCORE][MTU] Config MTU by CCCI runtime data instead of SBP
 *
 * 12 02 2015 cs.huang
 * [MOLY00151377] [UMOLY][CCCI] Change L2 buffer setting to L2_BUFFER_HIF
 * [92][CCCI] Change L2 trace default print to L2Trace
 *
 * 11 03 2015 peter.hsu
 * [MOLY00146648] [IPCORE] Uplink QoS mechanism
 * [IPCORE] Internal UL queues are applied Qos mechanism
 *
 * 11 03 2015 peter.hsu
 * [MOLY00146500] [MT6755][Jade M5][MP1][MTBF][Lab][HQ][Ericsson] (MCU_PCORE)[Fatal error (data abort)] err_code1:0x00000004 err_code2:0x0047E930 err_code3:0x00000010 CaDeFa Supported
 * [IPCORE] Change ipc_send_ul_pkt() & ipc_send_ul_pkt_by_pdn() to ILM based API
 * - Queue packets and forward to UPCM in IPCore's own context
 *
 * 09 22 2015 hsin-jun.tang
 * [MOLY00142648] [LTM_SIM] Data-generation refine
 * [LTM_SIM] Generate data refine - UMOLY
 *
 * 08 24 2015 peter.hsu
 * [MOLY00138390] UL Data Throttling v2
 * [TMC][IPCORE] UL Data Throttling v2
 * - Add new module TMC (Thermal Management Controller)
 * - Add IMS Blocking mode
 *
 * 08 07 2015 cs.huang
 * [MOLY00136043] cccidev_qbm.h assertion
 * [CCMNI] Fix SPD EOL problem
 *
 * 08 07 2015 cs.huang
 * [MOLY00136043] cccidev_qbm.h assertion
 * [CCMNI] Fix SPD EOL problem
 *
 * 08 06 2015 peter.hsu
 * [MOLY00094823] HIF support for ESL
 * [SPD][IPCORE] Add more log for SPD entry being ignored case
 *
 * 07 28 2015 cs.huang
 * [MOLY00131268] [CCMNI] Add SPD trace
 * [CCMNI] Add SPD trace
 *
 * 07 28 2015 cs.huang
 * [MOLY00131268] [CCMNI] Add SPD trace
 * [CCMNI] Add SPD trace
 *
 * 07 23 2015 cs.huang
 * [MOLY00131268] [CCMNI] Add SPD trace
 * [CCMNI] Add SPD trace
 *
 * 03 27 2015 ap.wang
 * [MOLY00100246] [UMOLY] Fix SPD type3 re-layout error
 * Add CCCI Len for SPD DL v2
 *
 * 02 26 2015 hsin-jun.tang
 * [MOLY00097014] [CCCI CCMNI] log reduction .tmd
 * [CCCI CCMNI] log reduction UMOLY .tmd files
 *
 * 11 25 2014 peter.hsu
 * [MOLY00085013] [VoLTE] IPcore support IP/UDP header size and PDN interface
 * [IPCORE] Support LG VoLTE
 * - Carry packet data offset to RTP header in the filter info.
 * - New API: Send UL packet to the PDN
 *
 * 11 25 2014 peter.hsu
 * [MOLY00084258] [MT6795][Modem][Feature]Please support Garbage filter from network
 * [PFM] [IPCORE] Packet Filter Manager & Garbage Filter Implementation
 *
 * 11 14 2014 peter.hsu
 * [MOLY00081425] [TK6291_DEV] Add SPD sw solution
 * [SPD] [IPCORE] SPD v2 implementation
 *
 * 11 13 2014 cs.huang
 * [MOLY00075481] Add CCCI SPD DL support
 * Merging
 *  
 *  //UMOLY/DEV/MT6291_DEV/mcu/pcore/...
 *  
 *  to //UMOLY/TRUNK/UMOLY/mcu/pcore/...
 *
 * 11 11 2014 bo-kai.huang
 * [MOLY00081425] [TK6291_DEV] Add SPD sw solution
 * [USBCORE][USB_HIF_SIM] Add SPD support
 *
 * 08 14 2014 peter.hsu
 * [MOLY00075474] Throughput Throttling
 * [IPCORE] T-put Throttling
 *
 * 07 09 2014 peter.hsu
 * [MOLY00071814] [IPCORE] Prevent the race condition of UL reload retry global variable
 * + [IPCORE] Add set-need-reload flag to detect the race condition
 *
 * 06 27 2014 ap.wang
 * [MOLY00070335] Inter rat FLC size change HIF notify
 * Add QBM pool status notify
 *
 * 06 25 2014 bo-kai.huang
 * [MOLY00069324] MD USB power saving enhancement
 * .
 *
 * 05 14 2014 ap.wang
 * [MOLY00063866] [ROME] data/ack?queue? IT
 * CCMNI Fast Ack Patch and linkdown fast reload
 *
 * 03 11 2014 yilun.chen
 * [MOLY00059133] IPCore log refining
 *  * [HIF MW L2 trace] remove redundant log messages.
 *
 * 03 11 2014 yilun.chen
 * [MOLY00059133] IPCore log refining
 * 1. Add new SAP to define IPCORE data path ILM (for futher ELT filtering in performance test)
 * 2. Add new class of IPCORE L2 logging
 *
 * 03 06 2014 ap.wang
 * [MOLY00058479] [CCMNI] CCMNI log reduction
 * CCMNI Log reduction
 *
 * 02 18 2014 bo-kai.huang
 * [MOLY00056447] HIF logging reduction
 * : Reduce L2 trace for USBCORE module
 *
 * 02 14 2014 cw.wang
 * [MOLY00056071] [MP1 Post MP patch]IPCORE drop invalid length packet
 * IPCORE drop invalid length packet & UT
 *
 * 01 17 2014 bo-kai.huang
 * [MOLY00054128] Reuse COM port for META mode
 * 1. Support META COM port reuse. 
 * 2. Support unique serial number for production release. 
 * 3. Re-organize the customization part of USB. 
 * 4. Show GPD/BD length in L2 trace for debugging.
 *
 * 10 15 2013 bo-kai.huang
 * [MOLY00041272] Add USBCORE L2 trace for analysis
 * 1. Add L2 trace for USBClass submit IO requests.
 * 2. Print L2 trace only if USBCORE polls non-zero GPDs.
 *
 * 10 07 2013 yilun.chen
 * [MOLY00040390] [IPCORE] filter procedure refining
 * Filter procedure refining.
 *
 * 09 17 2013 yilun.chen
 * [MOLY00037445] [IPCORE] Flush cache lines of destination packet content in gpd copy
 * *[IPCORE] Add L2 trace messages to show GPD length in UNITE procedure for further debugging.
 *
 * 09 06 2013 ap.wang
 * [MOLY00036761] [CCCI] Add L2 trace log   [CCCI] Add L2 trace log
 *
 * 08 28 2013 bo-kai.huang
 * [MOLY00035734] Reduction for USBCORE L2 trace
 * .
 *
 * 08 28 2013 ap.wang
 * [MOLY00035451] [HMU] Add L2 trace log
 *  [HMU] Add L2 trace for event trigger
 *
 * 08 27 2013 yilun.chen
 * [MOLY00035353] [IPCORE] unite DL GPD pieces when IPCore doing packet content filtering
 * + [IPCORE] Add unite feature for DL packet dividing in pieces.
 *
 * 08 27 2013 ap.wang
 * [MOLY00035319] [CCCI_CCMNI] Add l2 trace log
 * CCMNI L2 trace
 *
 * 08 26 2013 yilun.chen
 * [MOLY00032630] IPCORE : Add L1 trace log
 * * [IPCORE] Fix IPv6 L2 trace log typo.
 *
 * 08 21 2013 yilun.chen
 * [MOLY00034552] Using hif_data_trace() to pack HIF data path L2 trace logs
 * +:[IPCORE] : Using hif_data_trace() to pack L2 trace logs
 *
 * 08 15 2013 yilun.chen
 * [MOLY00033889] Change buffer usage for HIF data path trace
 * * [HIF] Change HIF data path log buffer to L2_Buffer.
 * * [HIF] Follow codegen variable convention.
 *
 * 08 06 2013 yilun.chen
 * [MOLY00032630] IPCORE : Add L1 trace log
 * * [IPCORE] only print L1 trace log when UL reload retial is needed.
 *
 * 08 06 2013 yilun.chen
 * [MOLY00032630] IPCORE : Add L1 trace log
 * +[IPCORE] Add L1 trace log.
 *
 * 08 06 2013 yilun.chen
 * [HIF] Remove prefix "0x" from hex display.
 *
 * 08 02 2013 bo-kai.huang
 * [MOLY00032349] Add ELT log and L1 trace for USBCORE
 * Add debug log for USBCORE.
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!! 
 *==============================================================================
 *******************************************************************************/

/*
Notes:
    MAX MAX_ARG is 7, But the best MIPS is 4.
    Set MAX_ARG bigger than 4, only affect MIPS of log use more than 4 ARG.
*/

[Default]
    HIF_MW
    ON
    L2_Buffer
    TCMFORCE
    MAX_ARG 7
    L2_BUFFER_SETTING   L2_BUFFER_HIF

[Modem_Type]
    Generic

[Class]
    UL                                   on
    DL                                   on
    GE                                   on
    CCMNI                                on
    CCMNI_DL                             on
    CCMNI_UL                             on
    CCMNI_DUMP                           on
    CCCITTY_DUMP                         on
    UL_DETAIL                            on
    DL_DETAIL                            on
    GE_DETAIL                            on
    MDT                                  on
    IPC_FRAG                             on
    NMU                                  on
    DATA_PATH_SENSITIVE                  on

[String]
    IPC_IP_TYPE
    {
        "IPC_IP_TYPE_MIXED",
        "IPC_IP_TYPE_IPV4",
        "IPC_IP_TYPE_IPV6"
    }

[Message]
    info    IPC_UL_UPLINK_CALLBACK                  UL "[IPCORE] ipc_uplink() : [%ub] Callback with UL IP IOR[%xl] for netif[%xl], netif's features[%xl]"
    info    IPC_UL_META_UPLINK_CALLBACK             UL "[IPCORE] ipc_meta_uplink() : Callback with UL IP Meta start_idx[%xl], end_idx[%xl], q_type[%ub]"
    info    IPC_UL_DEQUEUE_UPLINK_PRIORITY_QUEUE    UL "[IPCORE] ipc_on_process_ul_ior_list() : Pending IOR count[%d], Throttling state: blocking-latency-concern[%ub]/ims-emergency[%ub]. High priority IOR list head[%xl]"
    info    IPC_UL_DEQUEUE_UPLINK_QUEUE             UL "[IPCORE] ipc_on_process_ul_queue() : UL data throttled! Pending q_type[%ub], q_priority[%ub], cnt[%ul]."
    info    IPC_UL_PROCESS_UPLINK_QUEUE             UL "[IPCORE] ipc_on_process_ul_queue()"
    info    IPC_UL_UPLINK_QUEUE_PENDING             UL "[IPCORE] ipc_on_process_ul_queue() : Queue: type[%ub], priority[%ub] and Pending_cnt[%l]"
    info    IPC_IOR_CHANGE_GPD_TYPE                 UL_DETAIL "[IPCORE] ipc_ior_change_gpd_type() : Change to GPD type[%d], with origin IOR[%xl] and new IOR[%xl]"
    info    IPC_MDT_LAN_DIRECT_SEND_DL_IOR          DL "[IPCORE] ipc_on_process_ul_ior_list() : [%ub] CCMNI-LAN directly send DL IOR from netif_id[%xl] to netif_id[%xl] - IOR[%xl]"
    info    IPC_UL_ON_PROCESS_NORMAL_IOR            UL_DETAIL "[IPCORE] ipc_on_process_ul_ior_list() : [%ub] Handle IOR[%xl] belongs to netif[%xl]"
    info    IPC_UL_FORWARD_META                     UL "[IPCORE] ipc_on_process_ul_meta_table() : Forward UL Meta: start_idx[%xl], end_idx[%xl], q_type[%ub]"
    info    IPC_UL_THROTTLE_IMS_EMERGEMCY_IND       UL "[IPCORE] ipc_ims_emergency_call_ind_handler(): VDM indication to change ims_block_flag from [%ub] to [%ub]"
    info    IPC_TR_TIMER_UL_THROTTLE_TIMEOUT        UL "[IPCORE] ipc_ul_throttle_timeout(): UL throttle timer timeout, current_tick(%l), current_state(%ub), enable(%ub), active(%ub), suspend(%ub)"
    info    IPC_TR_START_UL_THROTTLE_TIMER          UL "[IPCORE] ipc_start_ul_throttle_timer(): Start UL throttle timer, current_tick(%l), elapse_time(%l)"
    info    IPC_UL_RELOAD_UPLINK                    UL_DETAIL "[IPCORE] ipc_reload_uplink() : [%ub] Reload uplink for netif[%xl], netif_id[%xl], callback[%xl]"
    info    IPC_UL_RELOAD_UPLINK_RESULT             UL "[IPCORE] ipc_reload_uplink() : [%ub] Reload uplink result for for netif[%xl], netif_id[%xl] : %ub"
    info    IPC_UL_RELOAD_RETRY                     UL_DETAIL "[IPCORE] ipc_set_netif_ul_reload_retry() : Update retry-reload flag [%ub] for netif[%xl], netif_id[%xl], callback[%xl] while set-need-reload bit-mask[%xl]"
    info    IPC_UL_RELOAD_RETRY_RACE_COND           UL "[IPCORE] ipc_set_netif_ul_reload_retry() : [%ub] Update retry-reload race condition occurred with retry-reload flag [%ub], set-need-reload flag [%l] and reload retrial bit-mask[%xl]"
    info    IPC_UL_RELOAD_RETRY_FLAG                UL_DETAIL "[IPCORE] ipc_set_netif_ul_reload_retry() : [%ub] Uplink reload retrial bit-mask[%xl] while set-need-reload bit-mask[%xl]"
    info    IPC_UL_SET_NEED_RELOAD                  UL_DETAIL "[IPCORE] ipc_set_netif_ul_set_need_reload() : Update set-need-reload flag [%ub] for netif[%xl], netif_id[%xl], callback[%xl]"
    info    IPC_UL_SET_NEED_RELOAD_FLAG             UL_DETAIL "[IPCORE] ipc_set_netif_ul_set_need_reload() : [%ub] Netif set need reload bit-mask[%xl]"
    info    IPC_UL_ON_RETRY_RELOAD                  UL "[IPCORE] ipc_on_retry_ul_reload() : [%ub] Current uplink reload retrial bit-mask[%xl]"
    info    IPC_UL_ON_RETRY_RELOAD_FOR_NETIF        UL "[IPCORE] ipc_on_retry_ul_reload() : [%ub] Reload network interface[%xl] for bit[%xl]"
    info    IPC_UL_CHECK_UL_RELOAD_RETRY            UL "[IPCORE] ipc_check_ul_reload_retry() : [%ub] Current uplink reload retrial bit-mask[%xl] : need retry reload !"
    info    IPC_UL_DROP_UL_IOR                      UL "[IPCORE] ipc_forward_ul_ior() : [%ub] Drop UL IOR for netif[%xl], ior[%xl]"
    info    IPC_UL_LOOPBACK_UL_IOR                  UL "[IPCORE] ipc_forward_ul_ior() : [%ub] Loopback UL IOR for netif[%xl], ior[%xl], DL callback[%xl]"
    info    IPC_UL_LOOPBACK_UL_IOR_DROP             UL "[IPCORE] ipc_forward_ul_ior() : [%ub] Drop loopback UL IOR due to invalid DL callback for netif[%xl], ior[%xl], DL callback[%xl]"
    info    IPC_UL_HANDLE_UL_GPD_LIST               UL "[IPCORE] ipc_forward_ul_ior() : IP-Type(%ub) - To handle UL GPD : netif_id[%xl], first_gpd[%xl], last_gpd[%xl]"
    info    IPC_UL_FORWARD_UL_SDU                   UL "[IPCORE] ipc_forward_ul_ior() : IP-Type(%ub) - Forward UL GPD : pdn_id[%xl], first_gpd[%xl], last_gpd[%xl]"
    info    IPC_UL_HANDLE_IPV4_UL_GPD_LIST          UL_DETAIL "[IPCORE] ipc_forward_ul_ior() : IP-Type(%ub) - To handle IPv4 UL GPD : netif_id[%xl], first_gpd[%xl], last_gpd[%xl]"
    info    IPC_UL_FORWARD_IPV4_UL_SDU              UL "[IPCORE] ipc_forward_ul_ior() : IP-Type(%ub) - Forward IPv4 UL GPD : pdn_id[%xl], first_gpd[%xl], last_gpd[%xl]"
    info    IPC_UL_HANDLE_IPV6_UL_GPD_LIST          UL "[IPCORE] ipc_forward_ul_ior() : IP-Type(%ub) - To handle IPv6 UL GPD : netif_id[%xl], first_gpd[%xl], last_gpd[%xl]"
    info    IPC_UL_FORWARD_IPV6_UL_SDU              UL "[IPCORE] ipc_forward_ul_ior() : IP-Type(%ub) - Forward IPv6 UL GPD : pdn_id[%xl], first_gpd[%xl], last_gpd[%xl]"
    info    IPC_UL_FORWARD_UL_SDU_MULTI_PS          UL "[IPCORE] IPC_FORWARD_UL_SDU() : Forward UL GPD with pdn_id[%l] and proto_idx[%l]"
    info    IPC_UL_FORWARD_UL_SDU_BY_EBI_MULTI_PS   UL "[IPCORE] IPC_FORWARD_UL_SDU_BY_EBI() : Forward GPD to UL with EBI(%l) and proto_idx[%l]"
    info    IPC_UL_DHCP4C_PKT_SESSION               UL "[IPCORE] ipc_on_dhcp4c_packet_ind() : [%ub] Send DHCPv4 gpd[%xl], ip_id[%ub], session[%xl]"
    info    IPC_UL_DHCP4C_PKT_UPLINK                UL "[IPCORE] ipc_on_dhcp4c_packet_ind() : [%ub] Send DHCPv4 gpd[%xl], session[%xl], netif_id[%xl]"
    info    IPC_UL_SEND_PKT                         UL "[IPCORE] ipc_send_ul_pkt() : Receive GPD to UL with EBI(%l) : head[%xl] ~ tail[%xl]"
    info    IPC_UL_SEND_PKT_BY_PDN                  UL "[IPCORE] ipc_send_ul_pkt_by_pdn() : Receive GPD to UL with PDN(%l), ip_type(%xb) : head[%xl] ~ tail[%xl]"
    info    IPC_UL_SEND_PKT_MULTI_PS                UL "[IPCORE] ipc_send_ul_pkt_multiple_ps() : Function be called with EBI(%l) and proto_idx(%l)"
    info    IPC_UL_SEND_PKT_BY_PDN_MULTI_PS         UL "[IPCORE] ipc_send_ul_pkt_by_pdn_multiple_ps() : Function be called with PDN(%l) and proto_idx(%l)"
    info    IPC_UL_SEND_PKT_BY_NETIF_ID             UL "[IPCORE] ipc_send_ul_pkt_by_netif_id() : Send GPD to UL with NETIF_ID(%xl), ip_tpye(%xb) : head[%xl] ~ tail[%xl]"
    info    IPC_UL_SEND_PKT_FORWARD                 UL "[IPCORE] ipc_on_process_ul_ior_list() : Send GPD to UL with EBI(%l) : head[%xl] ~ tail[%xl]"
    info    IPC_UL_SEND_PKT_BY_PDN_FORWARD          UL "[IPCORE] ipc_on_process_ul_ior_list() : Send GPD to UL with PDN(%l), ip_type(%xb) : head[%xl] ~ tail[%xl]"
    info    IPC_DL_SEND_IPV4_PKT                    DL "[IPCORE] ipc_send_dl_pkt() : [%ub] Send IPv4 GPD to netif_id[%xl], first_gpd[%xl], last_gpd[%xl]"
    info    IPC_DL_SEND_IPV6_PKT                    DL "[IPCORE] ipc_send_dl_pkt() : [%ub] Send IPv6 GPD to netif_id[%xl], first_gpd[%xl], last_gpd[%xl]"
    info    IPC_DL_SEND_PKT_DID                     DL "[IPCORE] ipc_send_dl_pkt_in_did() : Send DID to netif_id[%xl], did_head[%xl], did_tail[%xl]"
    info    IPC_DL_SEND_PKT_DID_PENDING             DL "[IPCORE] ipc_send_dl_pkt_in_did() : Netif refuse to receive DL DIDs, pending_head[%xl], pending_tail[%xl]"
    info    IPC_DL_ON_DOWNLINK                      DL "[IPCORE] ipc_on_downlink() : Downlink handle from pdn_id[%l], head[%xl], tail[%xl]"
    info    IPC_DL_ON_DOWNLINK_FILTER_OUT           DL "[IPCORE] ipc_on_downlink() : [%ub] Filter out all downlink GPDs : session_type[%ub], netif_id[%xl]"
    info    IPC_DL_ON_DOWNLINK_CALLBACK_INFO        DL_DETAIL "[IPCORE] ipc_on_downlink() : Send DL GPDs from pdn_id[%l] - Session/netif information : session_type[%ub], netif_id[%xl]"
    info    IPC_DL_ON_DOWNLINK_CALLBACK_GPD         DL "[IPCORE] ipc_on_downlink() : Send DL GPDs from pdn_id[%l] - GPD information : first_gpd[%xl], last_gpd[%xl]"
    info    IPC_DL_ON_DOWNLINK_MULTI_PS             DL "[IPCORE] ipc_on_downlink_multiple_ps() : Downlink handle from pdn_id[%l], proto_idx[%ub]"
    info    IPC_DL_ON_DID_DOWNLINK                  DL "[IPCORE] ipc_did_downlink_enqueue() : Downlink handle from pdn_id[%xl] (mask with proto_idx), head[%xl], tail[%xl]"
    info    IPC_DL_PROCESS_DL_DID                   DL "[IPCORE][DL_PSN flow: %ub, from: %xd, to: %xd, seg_num: %ud] ipc_on_process_dl_did_list() : Process DL DID[%xl] from pdn_id[%l]"
    info    IPC_DL_FWD_DL_CALLBACK_DID              DL "[IPCORE] ipc_forward_dl_did_default() : Send DL %ub packets to netif_id[%xl]"
    info    IPC_DL_DO_FILTER_DID_ZERO_SIT	        DL "[IPCORE] ipc_do_did_filter() : hif_type is ignore && legnth is zero, curr_id[%ub] bypass_seg[%ub] pkt_seg[%ub]"
    info    IPC_DL_FWD_DL_CALLBACK_DID_WO_FILTER    DL "[IPCORE] ipc_forward_dl_did_default_wo_filter() : Send DL %ub packets to netif_id[%xl]"
    info    IPC_DL_ON_DID_DOWNLINK_PENDING          DL "[IPCORE] ipc_on_process_dl_did_list() : Netif refuse to receive DL DIDs, pending_head[%xl], pending_tail[%xl]"
    info    IPC_DL_ON_DID_DOWNLINK_TEST_LOOPBACK    DL "[IPCORE] ipc_on_did_downlink_test_mode() : Downlink handle from pdn_id[%l], head[%xl], tail[%xl], test_mode[%ub]"
    info    IPC_DL_DO_FILTER_WHEN_LINK_DOWN         DL "[IPCORE] ipc_on_process_dl_did_list_when_link_down() : Do DL filter when link down did_head[%xl], did_tail[%xl], from pdn_id[%l]"
    info    IPC_DL_INVALID_LEN_CHK                  DL "[IPCORE] ipc_pkt_do_filter() : dl_invalid_len : cur_gpd[%xl], cur_bd[%xl], pkt_length[%xl], valid_length[%xl]"
    info    IPC_DL_INVALID_LEN_CHK_DID              DL "[IPCORE][DL_PSN flow: %ub, psn: %xd] ipc_pkt_do_filter() : dl_invalid_len : pkt_length[%xl], valid_length[%xl]"
    info    IPC_DL_INVALID_LEN_PKT_IP_HDR           DL "[IPCORE] ipc_pkt_do_filter() : dl_invalid_len ip_header[%ub] header data[%xl]"
    info    IPC_GE_FILTER_RULE_MATCHED              GE "[IPCORE] ipc_pkt_do_filter() : [%ub] filter rule matched - filter rules: rules[%xl], features[%xb], valid_fields[%xl]"
    info    IPC_GE_SPD_DO_FILTER                    GE "[IPCORE] ipc_spd_do_filter() : [%ub] SPD[%xl] with length[%xl], pkt_num[%xb] is about to do filter"
    info    IPC_GE_SPD_ENTRY_IGR_INFO               GE "[IPCORE] ipc_spd_do_filter() : One of SPD entries has been ignored : uplink[%ub], curr_spd[%xl], idx[%l], payload_len[%l]"
    info    IPC_GE_SPD_ALL_IGR_INFO                 GE "[IPCORE] ipc_do_filter() : All entry of the SPD have been ignored : uplink[%ub], curr_spd[%xl], packet_num[%l]"
    info    IPC_GE_DO_FILTER_GPD_UPDATE             GE "[IPCORE] ipc_do_filter() : GPD update after uniting : uplink[%ub], curr_gpd[%xl], united_gpd[%xl]/len[%l]"
    info    IPC_GE_FILTER_OUT_INFO                  GE "[IPCORE] ipc_call_filter_cbk() : filter out and callback - General info : uplink[%ub], callback_context[%xl], filter_id[%xl]"
    info    IPC_GE_FILTER_OUT_GPD                   GE "[IPCORE] ipc_call_filter_cbk() : filter out and callback - GPD info : uplink[%ub], gpd_head[%xl], gpd_tail[%xl], length[%l]"
    info    IPC_GE_UNITE_FAIL_DROP                  GE "[IPCORE] ipc_do_filter() : Unite Failed ! Drop packet with length[%l], orgGPD[%lx]"
    info    IPC_GE_UNITE_FAIL_DROP_INFO             GE "[IPCORE] ipc_do_filter() : Dropped packet info : FilterID[%l], orgGPD[%lx], pdnID[%l], netifID[%l]"
    info    IPC_GE_HANDLE_GPD                       GE "[IPCORE] ipc_pack_pkt() : [%ub] Handle GPD - head[%xl], tail[%xl]"
    info    IPC_GE_SET_ALLOC_DATA                   GE "[IPCORE] ipc_pack_pkt() : Set and allocate GPD for data buffer - data_len[%l], data[%xl], ip_header_len[%l], udp_header_len[%l]"
    info    IPC_GE_FILL_HEADER                      GE "[IPCORE] ipc_pack_pkt() : Fill header with total_le[%d] for GPD[%xl], ip_header_len[%l], udp_header_len[%l]"
    info    IPC_GE_PACK_PACKET_PUBLIC               GE "[IPCORE] ipc_pack_pkt_public() : [%ub] ipc_pack_pkt_public() is invoked."
    info    IPC_GE_UNITED_GPD                       GE "[IPCORE] ipc_gpd_unite() : GPD is united with new one : uplink[%ub], p_gpd_in[%xl], *pp_gpd_out[%xl]/len[%l]"
    info    IPC_UL_PKT_FILTER_RESULT_META           UL "[IPCORE][UL_PSN: %xd] ipc_pkt_do_filter() : packet match result[%ub], mdt_rule_id[%ub] (only valid when result=3)"
    info    IPC_DL_PKT_FILTER_RESULT_DID            DL "[IPCORE][DL_PSN flow: %ub, psn: %xd] ipc_pkt_do_filter() : packet match result[%ub], mdt_rule_id[%ub] (only valid when result=3)"
    info    IPC_PKT_FILTER_RESULT_GPD               GE "[IPCORE] ipc_pkt_do_filter() : uplink[%ub], gpd[%xl], packet match result[%ub], mdt_rule_id[%ub] (only valid when result=3)"
    info    IPC_DL_TRNAS_GPD_TO_DID                 GE "[IPCORE] ipc_send_dl_pkt_in_did_internal() : translate GPD (%xl) to DID_head (%xl) and DID_tail (%xl)"
    info    IPC_PKT_FILTER_RESULT_SPD               GE "[IPCORE] ipc_pkt_do_filter() : uplink[%ub], packet match result[%ub], mdt_rule_id[%ub] (only valid when result=3)"
    info    PFM_GE_MATCHED_PACKET_INFO              GE "[PFM] pfm_drop_packet_trace(): The packet is dropped! EBI[%d], IPID[%xb], checksum[%xd]"
    info    PFM_GE_MATCHED_PACKET_DUMP              DATA_PATH_SENSITIVE "[PFM DUMP] %3d: %10xl %10xl %10xl %10xl"
    info    PFM_DL_RECEIVED_FILTER_PACKET           GE "[PFM] Received fin ack packet gpd_head (%xl) gpd_tail (%xl)"
    info    IPC_MDT_CHECK_ROUTE_MATCHED             MDT "[IPCORE] ipc_pkt_do_filter() : [%ub] MDT check route matched for GPD [%xl], to netif_id[%xl]"
    info    IPC_MDT_ON_DOWNLINK                     MDT "[IPCORE] ipc_mdt_on_downlink() : [%ub] MDT DL direct path : first_gpd[%xl], last_gpd[%xl]"
    info    IPC_MDT_ON_DOWNLINK_PKT_IPV4            MDT "[IPCORE] ipc_mdt_on_downlink() : MDT DL direct path IPV4 : curr_gpd[%xl], IPID = %xb, checksum = %xd"
    info    IPC_MDT_ON_DOWNLINK_PKT_IPV6            DATA_PATH_SENSITIVE "[IPCORE] ipc_mdt_on_downlink() : MDT DL direct path IPV6 : protocol:%d, curr_gpd[%xl], checksum = %xl, Src Addr=%10xl %10xl %10xl %10xl"
    info    IPC_MDT_ON_DOWNLINK_PKT_NON_IPV4V6      MDT "[IPCORE] ipc_mdt_on_downlink() : MDT DL direct path non IPv4 and IPv6 : curr_gpd[%xl], length = %d"
    info    IPC_MDT_FORWARD_UL_IOR                  MDT "[IPCORE] ipc_mdt_forward_ul_ior() : [%d] MDT UL direct path : first_gpd[%xl], last_gpd[%xl]"
    info    IPC_MDT_FORWARD_UL_IOR_PKT_IPV4         MDT "[IPCORE] ipc_mdt_forward_ul_ior() : MDT UL direct path IPv4 : curr_gpd[%xl], IPID = %xl, checksum = %xl"
    info    IPC_MDT_FORWARD_UL_IOR_PKT_IPV6         DATA_PATH_SENSITIVE "[IPCORE] ipc_mdt_forward_ul_ior() : MDT UL direct path IPv6 : protocol:%d, curr_gpd[%xl], checksum = %xl, Src Addr=%10xl %10xl %10xl %10xl"
    info    IPC_MDT_FORWARD_UL_IOR_PKT_NON_IPV4V6   MDT "[IPCORE] ipc_mdt_forward_ul_ior() : MDT UL direct path non IPv4 and IPv6 : curr_gpd[%xl], length = %d"
    info    IPC_BIND_LAN_NETIF                      MDT "[IPCORE] ipc_bind_lan_netif() : [%d] netif_1[%xl] id[%xl], netif_2[%xl] id[%xl]"
    info    IPC_UNBIND_LAN_NETIF                    MDT "[IPCORE] ipc_unbind_lan_netif() : [%d] netif_1[%xl], id[%xl], netif_2[%xl] id[%xl]"
    info    IPC_MDT_DETECT_FM_NOT_MATCH             MDT "[IPCORE] ipc_on_pdn_deact() : MDT detect flight mode not match [%d] netif[%xl]"
    info    MDT_START_FILTER_EXPIRED_TIMER          MDT "[MDT] mdt_start_filter_expired_timer(): Start filter expired timer, current_tick(%d), elapse_time(%l)"
    info    MDT_CHECK_FILTER_VALID                  MDT "[MDT] mdt_check_filter_valid_period(): Timer expired! Remaining filter number[%xl], expired filter number[%xl], timeout filter number[%xl]"
    info    MDT_START_TRACK_TABLE_EXPIRED_TIMER     MDT "[MDT] mdt_start_track_table_expired_timer(): Start track table expired timer, current_tick(%d), elapse_time(%l)"
    info    MDT_SET_GLOBAL_ALERT                    MDT "[MDT] mdt_set_global_alert_value(): Set global alert value[%xl %xl]"
    info    MDT_SET_IQUOTA_LIMIT                    MDT "[MDT] mdt_set_iquota_value(): Set limit iquota mdt_netif_id[%d], value[%xl %xl]"
    info    MDT_DEL_IQUOTA_LIMIT                    MDT "[MDT] mdt_del_iquota_value(): Del limit iquota mdt_netif_id[%d]"
    info    MDT_ALERT_GLOBAL_ALERT                  MDT "[MDT] mdt_update_global_alert_data_usage(): Send global alert to AP, remaining value[%xl %xl]"
    info    MDT_ALERT_IQUOTA_LIMIT                  MDT "[MDT] mdt_update_iquota_data_usage_of_netif(): mdt_netif_id[%d] reaches iquota limit"
    info    IPC_FRAG_QUE_V4_KEY_INFO                DATA_PATH_SENSITIVE "[IPC_FRAG] ipc_fragment_queuing_v4(): src = %xl, dst = %xl, ip_id = %xl, protocol = %d"
    info    IPC_FRAG_QUE_V6_KEY_INFO_SRC            DATA_PATH_SENSITIVE "[IPC_FRAG] ipc_fragment_queuing_v6(): src = %xl %xl %xl %xl"
    info    IPC_FRAG_QUE_V6_KEY_INFO_DST            DATA_PATH_SENSITIVE "[IPC_FRAG] dst = %xl %xl %xl %xl"
    info    IPC_FRAG_QUE_V6_KEY_INFO_ID             IPC_FRAG "[IPC_FRAG] ip_id = %xl"
    info    IPC_FRAG_QUE_FRAG_INFO                  IPC_FRAG "[IPC_FRAG] frag_offset = %xd, frag_len = %xd, frag_flag = %xd, frag_end = %xd"
    info    IPC_FRAG_QUE_GRP_INFO                   IPC_FRAG "[IPC_FRAG] info_mask = %xd, accumulate_len = %xl, total_len = %xl, head_gpd = %xl"
    info    IPC_FRAG_QUE_FIND_POS                   IPC_FRAG "[IPC_FRAG] Find position in v4 queuing: priv_gpd = %xl, priv_meta = %xl, next_gpd = %xl, next_meta = %xl"
    info    IPC_FRAG_QUE_OVERLAP_PRIV               IPC_FRAG "[IPC_FRAG] Overlap with priv fragment: priv_offset = %xd, priv_len = %xd, shrink_len = %xd"
    info    IPC_FRAG_QUE_OVERLAP_NXT                IPC_FRAG "[IPC_FRAG] Overlap with next fragment: next_offset = %xd, next_len = %xd, shrink_len = %xd"
    info    IPC_FRAG_QUE_INSERT                     IPC_FRAG "[IPC_FRAG] Insert new fragment into list: new_offset = %xd, new_len = %xd, accumulate_len = %xl, offset(new) = %xd"
    info    IPC_FRAG_QUE_ERR                        IPC_FRAG "[IPC_FRAG] Queuing error: release gpd = %xl, meta = %xl"
    info    IPC_FRAG_QUE_FIRST_FRAG                 IPC_FRAG "[IPC_FRAG] First fragment is received!! filter_id = %xl"
    info    IPC_FRAG_QUE_LAST_FRAG                  IPC_FRAG "[IPC_FRAG] Last fragment is received!!"
    info    IPC_FRAG_QUE_COMPLETE                   IPC_FRAG "[IPC_FRAG] Queuing completing!! ba~ba~la~la~la~la~"
    info    IPC_FRAG_RECYCLE_NO_SPACE               IPC_FRAG "[IPC_FRAG] Queuing recycle when space is not enough: is_v4 = %ub, ip_id = %xl"
    info    IPC_FRAG_RECYCLE                        IPC_FRAG "[IPC_FRAG] Queuing recycle: is_v4 = %ub, ip_id = %xl"
    info    IPC_FRAG_FRAG_START                     IPC_FRAG "[IPC_FRAG] ipc_fragment_frag start: is_v4 = %ub, buffer_addr = %xl, buffer_len = %ud, ip_id = %xl"
    info    IPC_FRAG_FRAG_END                       IPC_FRAG "[IPC_FRAG] ipc_fragment_frag end: frag_gpd_num = %ud, frag_gpd_head = %ul, frag_gpd_tail = %ul"
    info    IPC_FRAG_REASM                          IPC_FRAG "[IPC_FRAG] ipc_fragment_reassemble: is_v4 = %ub, reasm_gpd = %ul"
    info    CCMNI_DATA_DUMP_TRACE                   CCMNI_DUMP "[CCMNI DUMP] %b: %10xl %10xl %10xl %10xl"
    info    CCMNI_DATA_DUMP_GPD_PTR                 CCMNI_DUMP "[CCMNI DL] CCMNI%b: GDP=%xl BD1=%xl BD2=%xl DATA=%xl"
    info    CCMNI_DL_DATA_IPv6_PACKET_TRACE         CCMNI_DL       "[CCMNI DLv6] Protocol:%b GPD=%xl Checksum=%xl Src Addr=%10xl %10xl %10xl %10xl"
    info    CCMNI_UL_DATA_IPv6_PACKET_TRACE         CCMNI_UL       "[CCMNI ULv6] Protocol:%b GPD=%xl Checksum=%xl Dst Addr=%10xl %10xl %10xl %10xl"
    info    CCMNI_DL_DATA_PACKET_TRACE              CCMNI_DL       "[CCMNI DL] CCMNI%b: CCCIHDR=%xl SEQ=%xd IPID=%xd checksum=%xd"
    info    CCMNI_DL_DATA_PACKET_NON_IPV4V6_TRACE   CCMNI_DL       "[CCMNI DL] CCMNI%b: CCCIHDR=%xl SEQ=%xd PAYLOAD=%xl PAYLOAD_LEN=%d"
    info    CCMNI_UL_DATA_PACKET_TRACE              CCMNI_UL       "[CCMNI UL] CCMNI%b: GPD=%xl IPID=%xd checksum=%xd"
    info    CCMNI_UL_GPD_IN_HIF                     CCMNI_UL       "[CCMNI UL] CCMNI%b: Receive GPD=%d, Need Reload=%d, GPD in HIF=%d, Data_Q=%d, Ack_Q=%d"
    info    CCMNI_UL_RELOAD_RGPD                    CCMNI_UL       "[CCMNI UL_RELOAD] CCMNI%b: Reload RGPD Want=%d, Allocated=%d, in HIF=%d"
    info    CCMNI_UL_RELOAD_RGPD_IN_HIF             CCMNI_UL       "[CCMNI UL_RELOAD] CCMNI%b: Nor_Q_before=%d, Nor_Q_after=%d, Nor_Q_MAX=%d, Ack_Q_before=%d, Ack_Q_after=%d, Ack_Q_MAX=%d"
    info    CCMNI_MAX_RELOAD_RGPD_IN_HIF            CCMNI      "[CCMNI MAX RGPD] Data_Q_MAX=%d Ack_Q_MAX=%d, Misc_Q_MAX=%d"
    info    CCMNI_DEVICE_STATUS                     CCMNI      "[CCMNI STATUS] CCMNI%b: event=%b status=%b -> %b"
    info    CCMNI_DL_DATA_FIRST_FAST_CCCI_HDR       CCMNI      "[CCMNI DL] CCMNI%b: Rem_gpd(%d)"
    info    CCCITTY_DATA_DUMP_TRACE                 CCCITTY_DUMP "[CCCITTY DUMP] %b: %10xl %10xl %10xl %10xl"
    info    CCCIDEV_PROCESS_DL_SPD_TRACE            DL "[CCCIDEV DL SPD] pkt_num:%d current_gpd:%xl"
    warn    CCCIDEV_PROCESS_DL_SPD_SET_IGR_TRACE    DL "[CCCIDEV DL SPD] ignore bit set (%d) in pkt:%d pie:%xl"
    info    CCCIDEV_SPD_RELAYOUT_SET_PKTNUM_TRACE   DL "[CCCIDEV DL SPD] Get pkt_num:%d from pi:%xl and write to spd_ext:%xl"
    warn    CCCIDEV_SPD_RELAYOUT_GET_EOL_BREAK_TRACE            DL "[CCCIDEV DL SPD] BREAK!!! total pkt_num:%d current pkt_num:%d spd_ph:%xl"
    info    LTM_SIM_TPUT_ANALYSIS                   GE         "[LTM_SIM] REAL_PKT_NUM : %d, EXPECTED_PKT_NUM : %l, TIME_DIFF : %l, Current_Time: %l, Last_Time : %l, RECYCLE_PKT_NUM : %l."
    info    NMU_SET_PROPERTY                        NMU "[NMU] nmu_set_property(): set property %d, len(%ul)."
    info    NMU_GET_PROPERTY                        NMU "[NMU] nmu_get_property(): get property %d, len(%ul)."
    info    NMU_UTIL_SET_HOST_MAC                   NMU "[NMU] nmu_set_host_mac(): set eth%d host_mac to 0-1(%xl) 2-5(%xl)"
    info    NMU_UTIL_GET_HOST_MAC                   NMU "[NMU] nmu_get_host_mac(): get eth%d host_mac to 0-1(%xl) 2-5(%xl)"
    info    NMU_UTIL_SET_GW_MAC                     NMU "[NMU] nmu_set_gateway_mac(): set eth%d gateway_mac to 0-1(%xl) 2-5(%xl)"
    info    NMU_UTIL_GET_GW_MAC                     NMU "[NMU] nmu_get_gateway_mac(): get eth%d gateway_mac to 0-1(%xl) 2-5(%xl)"
    info    NMU_UTIL_SET_ETH_TX_PKT_CNT             NMU "[NMU] nmu_set_eth_tx_pkt_cnt(): set eth %d tx_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_TX_PKT_CNT             NMU "[NMU] nmu_add_eth_tx_pkt_cnt(): add eth %d tx_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_TX_PKT_CNT             NMU "[NMU] nmu_get_eth_tx_pkt_cnt(): get eth %d tx_pkt_cnt u64(%xl %xl)."
    info    NMU_UTIL_SET_ETH_RX_PKT_CNT             NMU "[NMU] nmu_set_eth_rx_pkt_cnt(): set eth %d rx_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_RX_PKT_CNT             NMU "[NMU] nmu_add_eth_rx_pkt_cnt(): add eth %d rx_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_RX_PKT_CNT             NMU "[NMU] nmu_get_eth_rx_pkt_cnt(): get eth %d rx_pkt_cnt u64(%xl %xl)."
    info    NMU_UTIL_SET_ETH_TX_BYTE_CNT            NMU "[NMU] nmu_set_eth_tx_byte_cnt(): set eth%d tx_byte_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_TX_BYTE_CNT            NMU "[NMU] nmu_add_eth_tx_byte_cnt(): add eth%d tx_byte_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_TX_BYTE_CNT            NMU "[NMU] nmu_get_eth_tx_byte_cnt(): get eth%d tx_byte_cnt u64(%xl %xl)."
    info    NMU_UTIL_SET_ETH_RX_BYTE_CNT            NMU "[NMU] nmu_set_eth_rx_byte_cnt(): set eth%d rx_byte_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_RX_BYTE_CNT            NMU "[NMU] nmu_add_eth_rx_byte_cnt(): add eth%d rx_byte_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_RX_BYTE_CNT            NMU "[NMU] nmu_get_eth_rx_byte_cnt(): get eth%d rx_byte_cnt u64(%xl %xl)."
    info    NMU_UTIL_SET_ETH_TX_ERROR_PKT_CNT       NMU "[NMU] nmu_set_eth_tx_error_pkt_cnt(): set eth%d tx_error_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_TX_ERROR_PKT_CNT       NMU "[NMU] nmu_add_eth_tx_error_pkt_cnt(): add eth%d tx_error_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_TX_ERROR_PKT_CNT       NMU "[NMU] nmu_get_eth_tx_error_pkt_cnt(): get eth%d tx_error_pkt_cnt u64(%xl %xl)."
    info    NMU_UTIL_SET_ETH_RX_ERROR_PKT_CNT       NMU "[NMU] nmu_set_eth_rx_error_pkt_cnt(): set eth%d rx_error_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_RX_ERROR_PKT_CNT       NMU "[NMU] nmu_add_eth_rx_error_pkt_cnt(): add eth%d rx_error_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_RX_ERROR_PKT_CNT       NMU "[NMU] nmu_get_eth_rx_error_pkt_cnt(): get eth%d rx_error_pkt_cnt u64(%xl %xl)."
    info    NMU_UTIL_SET_ETH_TX_DROP_PKT_CNT        NMU "[NMU] nmu_set_eth_tx_drop_pkt_cnt(): set eth%d tx_drop_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_TX_DROP_PKT_CNT        NMU "[NMU] nmu_add_eth_tx_drop_pkt_cnt(): add eth%d tx_drop_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_TX_DROP_PKT_CNT        NMU "[NMU] nmu_get_eth_tx_drop_pkt_cnt(): get eth%d tx_drop_pkt_cnt u64(%xl %xl)."
    info    NMU_UTIL_SET_ETH_RX_DROP_PKT_CNT        NMU "[NMU] nmu_set_eth_rx_drop_pkt_cnt(): set eth%d rx_drop_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_RX_DROP_PKT_CNT        NMU "[NMU] nmu_add_eth_rx_drop_pkt_cnt(): add eth%d rx_drop_pkt_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_RX_DROP_PKT_CNT        NMU "[NMU] nmu_get_eth_rx_drop_pkt_cnt(): get eth%d rx_drop_pkt_cnt u64(%xl %xl)."
    info    NMU_UTIL_SET_ETH_RX_FRAME_ALIGN_ERROR_CNT    NMU "[NMU] nmu_set_eth_rx_frame_align_error_cnt(): set eth%d rx_frame_align_error_cnt to u64(%xl %xl)."
    info    NMU_UTIL_ADD_ETH_RX_FRAME_ALIGN_ERROR_CNT    NMU "[NMU] nmu_add_eth_rx_frame_align_error_cnt(): add eth%d rx_frame_align_error_cnt to u64(%xl %xl)."
    info    NMU_UTIL_GET_ETH_RX_FRAME_ALIGN_ERROR_CNT    NMU "[NMU] nmu_get_eth_rx_frame_align_error_cnt(): get eth%d rx_frame_align_error_cnt u64(%xl %xl)."
    info    IPC_UL_CLUB_PKT_B4_FORWARD                 UL "[IPCORE] ipc_on_process_ul_ior_list() : Club curr UL GPD for EBI(%l) : head[%xl] ~ tail[%xl]"
    info    IPC_UL_CLUB_PKT_BY_PDN_B4_FORWARD          UL "[IPCORE] ipc_on_process_ul_ior_list() : Club curr UL GPD for PDN(%l), ip_type(%xb) : head[%xl] ~ tail[%xl]"
