#ifndef _L1SP_TRC_H
#define _L1SP_TRC_H

#ifndef GEN_FOR_PC
   #ifndef _STACK_CONFIG_H
   #error "stack_config.h should be included before l1sp_trc.h"
   #endif
#endif /* GEN_FOR_PC */

#include "kal_trace.h"


#ifndef _KAL_TRACE_H
   #error "kal_trace.h should be included before nvram_trc.h"
#endif

#define TRACE_GROUP_DDLOAD       TRACE_GROUP_1
#define TRACE_GROUP_SND          TRACE_GROUP_2
#define TRACE_GROUP_AUD_PROCESS  TRACE_GROUP_3
#define TRACE_GROUP_SP_DEBUG     TRACE_GROUP_5
#define TRACE_GROUP_SP4G         TRACE_GROUP_6
#define TRACE_GROUP_SP3G         TRACE_GROUP_8
#define TRACE_GROUP_AUD_PLAYBACK TRACE_GROUP_9
#define TRACE_GROUP_ECALL        TRACE_GROUP_1
#define TRACE_GROUP_AUD_MD2GCTRL TRACE_GROUP_1
#define TRACE_GROUP_SCO          TRACE_INFO
#define TRACE_GROUP_SPLOG        TRACE_INFO

#if !defined(GEN_FOR_PC)
#if defined(__TST_MODULE__) || defined(__CUSTOM_RELEASE__)
    #include "l1sp_trc_gen.h"
#endif /* TST Trace Defintion */
#endif
BEGIN_TRACE_MAP(MOD_L1SP)
   //LCORE
   TRC_MSG(AM_L_SP3G_UPDATEL1DSYNC, "[SPH_L]sp3g_updateL1DSync_dummy timer_hisr_state_L=%x")
   TRC_MSG(AM_L_SP3G_UPDATEL1DSYNC_TIMER, "[SPH_L]L1AL_Timer_L_HISR timer_hisr_state_L=%x")
   TRC_MSG(AM_L_CC_2G_HANDOVER_SKIP, "[SPH_L]cc_2G_Handover Skip %d %d")
   TRC_MSG(AM_L_CC_2G_HANDOVER_ENTER, "[SPH_L]cc_2G_Handover Enter %d ")
   TRC_MSG(AM_L_CC_2G_HANDOVER_LEAVE, "[SPH_L]cc_2G_Handover Leave")
	 TRC_MSG(AM_L_CC_2G_CALLOPEN_ENTER, "[SPH_L]cc_2G_Call_Open Enter %d ")
   TRC_MSG(AM_L_CC_2G_CALLOPEN_LEAVE, "[SPH_L]cc_2G_Call_Open Leave") 
	 TRC_MSG(AM_L_CC_2G_CALLCLOSE_ENTER, "[SPH_L]cc_2G_Call_Close Enter %d")
   TRC_MSG(AM_L_CC_2G_CALLCLOSE_LEAVE, "[SPH_L]cc_2G_Call_Close Leave")  
   TRC_MSG(AM_L_CC_3G_CALLOPEN_ENTER, "[SPH_L]cc_3G_Call_Open Enter delR=%d delW=%d")
   TRC_MSG(AM_L_CC_3G_CALLOPEN_LEAVE, "[SPH_L]cc_3G_Call_Open Leave delR=%d delW=%d P_to_L1_delay=%dms")
   TRC_MSG(AM_L_CC_3G_CALLCLOSE_ENTER, "[SPH_L]cc_3G_Call_Close Enter")
   TRC_MSG(AM_L_CC_3G_CALLCLOSE_LEAVE, "[SPH_L]cc_3G_Call_Close Leave") 
   TRC_MSG(AM_L_CC_4G_CALLOPEN_ENTER,  "[SPH_L]cc_4G_Call_Open_temp Enter")
   TRC_MSG(AM_L_CC_4G_CALLOPEN_LEAVE,  "[SPH_L]cc_4G_Call_Open_temp Leave delR=%d delW=%d P_to_L1_delay=%dms is_4G_handover=%d")
   TRC_MSG(AM_L_CC_4G_CALLCLOSE_ENTER, "[SPH_L]cc_4G_Call_Close_temp Enter")
   TRC_MSG(AM_L_CC_4G_CALLCLOSE_LEAVE, "[SPH_L]cc_4G_Call_Close_temp Leave")
   TRC_MSG(AM_L_CC_4G_GCALLOPEN_ENTER,  "[SPH_L]cc_4G_G_Codec_Call_Open_temp Enter")
   TRC_MSG(AM_L_CC_4G_GCALLOPEN_LEAVE,  "[SPH_L]cc_4G_G_Codec_Call_Open_temp Leave delR=%d delW=%d P_to_L1_delay=%dms")
   TRC_MSG(AM_L_CC_4G_GCALLCLOSE_ENTER, "[SPH_L]cc_4G_G_Codec_Call_Close_temp Enter")
   TRC_MSG(AM_L_CC_4G_GCALLCLOSE_LEAVE, "[SPH_L]cc_4G_G_Codec_Call_Close_temp Leave")
   TRC_MSG(AM_L_CC_C2K_CALLOPEN_ENTER, "[SPH_L]cc_C2K_Call_Open Enter so=%d dtx=%d delR=%d delW=%d delM=%d")
   TRC_MSG(AM_L_CC_C2K_CALLOPEN_LEAVE, "[SPH_L]cc_C2K_Call_Open Leave so=%d dtx=%d delR=%d delW=%d delM=%d")
   TRC_MSG(AM_L_CC_C2K_CALLCLOSE_ENTER, "[SPH_L]cc_C2K_Call_Close Enter")
   TRC_MSG(AM_L_CC_C2K_CALLCLOSE_LEAVE, "[SPH_L]cc_C2K_Call_Close Leave")    
   TRC_MSG(AM_L_CC_STANDBY_CALLOPEN_ENTER, "[SPH_L]cc_STANDBY_Call_Open Enter codec=%d")
   TRC_MSG(AM_L_CC_STANDBY_CALLOPEN_LEAVE, "[SPH_L]cc_STANDBY_Call_Open Leave")
   TRC_MSG(AM_L_CC_STANDBY_CALLCLOSE_ENTER, "[SPH_L]cc_STANDBY_Call_Close Enter")
   TRC_MSG(AM_L_CC_STANDBY_CALLCLOSE_LEAVE, "[SPH_L]cc_STANDBY_Call_Close Leave") 
   TRC_MSG(AM_L_CC_SET_VBI_FOR_FSM_ENTER, "[SPH_L]cc_Set VBI For FSM Enter: %x")    
   TRC_MSG(AM_L_CC_SET_VBI_FOR_FSM_LEAVE, "[SPH_L]cc_Set VBI For FSM Leave")
   TRC_MSG(AM_L_L1AUD_TASK_CLRBUF, "[SPH_L]L1AUD_TASK_L clear internal buffer")
   TRC_MSG(AM_L_L1AUD_TASK_P2L, "[SPH_L]L1AUD_TASK_L receive a P2L event")
   TRC_MSG(AM_L_L1AUD_TASK_P2L_DATA, "[SPH_L]L1AUD_TASK_L receive a P2L data[%d] = %x")
   TRC_MSG(AM_L_L1AUD_TASK_L2P_DATA, "[SPH_L]L1AUD_TASK_L receive a L2P data[%d] = %x")
   TRC_MSG(AM_L_L1AUD_TASK_L2P, "[SPH_L]L1AUD_TASK_L set a L2P event")
   TRC_MSG(SP3G_L1A_UPDATE_INFO_L, "[SPH_L] SP3G Update Info bitmap %d, val %d")
   TRC_MSG(AM_L_CC_4G_EVSCALLOPEN_ENTER, "cc_4G_EVS_Codec_Call_Open_temp_L Enter")
   TRC_MSG(AM_L_CC_4G_EVSCALLOPEN_LEAVE, "cc_4G_EVS_Codec_Call_Open_temp_L Leave delR=%d delW=%d P_to_L1_delay=%dms is_4G_handover=%d")
   TRC_MSG(AM_L_CC_4G_EVSCALLCLOSE_ENTER, "cc_4G_EVS_Codec_Call_Close_temp_L Enter")
   TRC_MSG(AM_L_CC_4G_EVSCALLCLOSE_LEAVE, "cc_4G_EVS_Codec_Call_Close_temp_L Leave")

   //MCU DTMF
   TRC_MSG(MCU_DTMF_PLAY                     , "[DTMF]DTMF_MCU_Play, DTMF_SW.pHandle: 0x%X" )
   TRC_MSG(MCU_DTMF_STOP                     , "[DTMF]DTMF_MCU_Stop, DTMF_SW.pHandle: 0x%X" )
   TRC_MSG(MCU_DTMF_STOP_AND_WAIT            , "[DTMF]DTMF_MCU_StopAndWait, DTMF_SW.pHandle: 0x%X, I: %d, IsAudioPlaying: %d, SoundRuning: %d" )
   TRC_MSG(MCU_DTMF_DATA_REQUEST             , "[DTMF]DTMF_MCU_DataRequestCallback, DTMF_SW.pHandle: 0x%X" )
   TRC_MSG(MCU_DTMF_GET_DATA_COUNT           , "[DTMF]DTMF_MCU_GetDataCount, uDataWord: %d" )
   TRC_MSG(MCU_DTMF_READ_DATA_DONE           , "[DTMF]DTMF_MCU_ReadDataDone, uDataWord: %d" )
   TRC_MSG(MCU_DTMF_GET_REAR_BUFFER          , "[DTMF]DTMF_MCU_GetReadBuffer, uDataWord: %d" )
   TRC_MSG(MCU_DTMF_DESTROY                  , "[DTMF]dtmf_mcu_Destroy, DTMF_SW.pHandle: 0x%X, fNewDTMF: %d, fEnding: %d, fForceStop: %d" )
   TRC_MSG(MCU_DTMF_INIT                     , "[DTMF]dtmf_mcu_Init, uSampleRate: %d, uPcmBufSize(byte): %d, uTotalBufferSize(byte): %d" )
   TRC_MSG(MCU_DTMF_PROCESS_ENTRY            , "[DTMF]dtmf_mcu_Process.entry, fNewDTMF: %d, fClearDTMF: %d, fEnding: %d, uBufLen(byte): %d" )
   TRC_MSG(MCU_DTMF_PROCESS_STATUS           , "[DTMF]dtmf_mcu_Process.status, fIsPlaying: %d, uCurrentData: %d, uFlushSilenceCount: %d" )
   TRC_MSG(MCU_DTMF_NEWKEY                   , "[DTMF]dtmf_mcu_ActivatNewKey, uCurIdx: %d, IsQTMF: %d, Freq: [%d] [%d] [%d] [%d]" )
   TRC_MSG(MCU_DTMF_NEWKEY_FORCE_END_2       , "[DTMF]dtmf_mcu_ActivatNewKey, Force stop: uPreIndex2: %d, uRemainDuration: %d" )
   TRC_MSG(MCU_DTMF_NEWKEY_FORCE_END_1       , "[DTMF]dtmf_mcu_ActivatNewKey, Reduce Dur: uPreIndex1: %d, uRemainDuration: %d, uTotalDuration:%d" )
   TRC_MSG(MCU_DTMF_UPDATE_TONE_PREV_END     , "[DTMF]dtmf_mcu_UpdateTone, prev_end: uIndex: %d" )
   TRC_MSG(MCU_DTMF_UPDATE_TONE_CURR_END     , "[DTMF]dtmf_mcu_UpdateTone, curr_end: uIndex: %d" )
   TRC_MSG(MCU_DTMF_UPDATE_TONE_CURR_OFF     , "[DTMF]dtmf_mcu_UpdateTone, curr_off: uIndex: %d" )
   TRC_MSG(MCU_DTMF_UPDATE_TONE_CURR_ON      , "[DTMF]dtmf_mcu_UpdateTone, curr_on : uIndex: %d" )
   TRC_MSG(MCU_DTMF_UPDATE_TONE_RAMPDOWN     , "[DTMF]dtmf_mcu_UpdateTone, RAMPDOWN: uIndex: %d" )
   TRC_MSG(MCU_DTMF_MCU_PROCESS_INTERNAL_ENTER     , "[dtmf_mcu_Process_Internal] Enter" )
   TRC_MSG(MCU_DTMF_MCU_PROCESS_INTERNAL_LEAVE     , "[dtmf_mcu_Process_Internal] Leave" )
   

   //C2K  
   TRC_MSG(C2K_AM_DSP_TurnOnC2KSDSP          , "[C2K][AM] C2K_AM_DSP_TurnOnC2KSDSP speech_modec=%X codec=%X" )
   TRC_MSG(C2K_AM_DSP_TurnOffC2KSDSP          , "[C2K][AM] C2K_AM_DSP_TurnOffC2KSDSP" )
   TRC_MSG(C2K_SPH_SO_CONNECT          , "[C2K][SPH] SO_Connect codec=%X" )
   TRC_MSG(C2K_SPH_SO_CONNECT2          , "[C2K][SPH] SO_Connect(%d)" )
   TRC_MSG(C2K_SPH_SO_DISCON          , "[C2K][SPH] SO_Disconnect(%d)" )
   TRC_MSG(C2K_SPH_SO_DISCON_DONE          , "[C2K][SPH] SO_Disconnect_Done(%d)" )
   TRC_MSG(C2K_SPH_INTRARAT          , "[C2K][SPH] SO_INTRARAT(%d)" )
   TRC_MSG(C2K_SPH_SKIP_SO_CON_DONE , "[C2K][SPH] Skip SO_Connect_Done(%d)" )
   
   TRC_MSG(C2K_SPH_RS_COD_PARSE , "[C2K][SPH] RS=%d, Cod=%d" )
   TRC_MSG(C2K_SPH_LINK_CON_SSO_REQ , "[C2K][SPH] Link connect SSO req, SO=%d, MaxRate=%d" )
   TRC_MSG(C2K_SPH_LINK_CON_SSO_REQ_REPEAT , "[C2K][SPH] Link SSO req repeat" )
   TRC_MSG(C2K_SPH_LINK_CON_SSO_DONE , "[C2K][SPH] Link connect SSO done" )
   TRC_MSG(C2K_SPH_LINK_DISCON_SSO_REQ , "[C2K][SPH] Link disconnect SSO req" )
   TRC_MSG(C2K_SPH_LINK_DISCON_SSO_REQ_REPEAT , "[C2K][SPH] Link disconnect SSO req repeat" )
   TRC_MSG(C2K_SPH_LINK_DISCON_SSO_DONE , "[C2K][SPH] Link disconnect SSO done" )
   TRC_MSG(C2K_SPH_LINK_COD_RDY , "[C2K][SPH] Link cod ready, CodRdy=%d" )
   TRC_MSG(C2K_SPH_LINK_COD_CLOSE , "[C2K][SPH] Link cod close, CodRdy=%d" )
   TRC_MSG(C2K_SPH_LINK_COD_DL_UNRDY , "[C2K][SPH] Link cod DL unready" )
   TRC_MSG(C2K_SPH_LINK_COD_UL_UNRDY , "[C2K][SPH] Link cod UL unready" )
   TRC_MSG(C2K_SPH_LINK_UL_UNSYNC , "[C2K][SPH] Link UL unsync" )
   TRC_MSG(C2K_SPH_LINK_LBK_DL , "[C2K][SPH] Link lbk DL, Rate=%d, len=%d" )
   TRC_MSG(C2K_SPH_LINK_LBK_UL , "[C2K][SPH] Link lbk UL, Rate=%d, len=%d" )
   TRC_MSG(C2K_SPH_LINK_COD_DL , "[C2K][SPH] Cod_DL %x" )
   TRC_MSG(C2K_SPH_LINK_COD_UL , "[C2K][SPH] Cod_UL %x" )
   TRC_MSG(C2K_SPH_LINK_RATE_DL , "[C2K][SPH] rate_DL %x" )
   TRC_MSG(C2K_SPH_LINK_RATE_UL , "[C2K][SPH] rate_UL %x" )
   TRC_MSG(C2K_SPH_LINK_HB_DL , "[C2K][SPH] HB_DL %x %x %x %x %x %x %x %x %x %x %x" )
   TRC_MSG(C2K_SPH_LINK_HB_UL , "[C2K][SPH] HB_UL %x %x %x %x %x %x %x %x %x %x %x" )
   
      
   // AFE
   // TRC_MSG(AFE_SWITCH_FIR, "AFE Switch FIR %c for aud_func %X")
   TRC_MSG(AFE_SWITCH_LOOPBACK, "AFE Switch Loopback %c")
   // TRC_MSG(AFE_SWITCH_MIC, "AFE Switch MIC %c for aud_func %X")
   // TRC_MSG(AFE_SET_INPUT_SRC, "AFE SetInputSource: %X")
   // TRC_MSG(AFE_GAIN, "AFE_VAG_CON:%X, AFE_AAG_CON:%X, DP_SIDETONE:%X")
   TRC_MSG(AFE_DIGI_GAIN, "DP_VOL_OUT_PCM:%X, DP_EnhRefDigiGain_Setting:%X")
   TRC_MSG(AFE_SET_MIC_VOLUME, "AFE SetMicrophoneVolume: %d")
   // TRC_MSG(AFE_SET_SIDETONE_VOLUME, "AFE SetSideToneVolume: %X")
   // TRC_MSG(AFE_SET_OUTPUT_DEVICE, "AFE Set aud_func %X OutputDevice %X")
   TRC_MSG(AFE_SET_OUTPUT_VOLUME, "AFE Set aud_func %X OutputVolume %d %d")
   TRC_MSG(AFE_SET_LEVEL_VOLUME, "AFE Set aud_func %X MaxAnalogGain %d , step %d, level %d")
   TRC_MSG(AFE_SET_GIDI_GAIN, "AFE Set digital gain level %d, isForce=%d")
   TRC_MSG(AFE_SET_SPH_REF_GIDI_GAIN, "AFE Set speech enhancement reference digital gain %d")
   // TRC_MSG(AFE_MUTE_SPEAKER, "AFE mute aud_func %X speaker %d")


   // L1CTM
   TRC_MSG(L1CTM_OPEN, "Call L1Ctm_Open")
   TRC_MSG(L1CTM_CLOSE, "Call L1Ctm_Close")
   TRC_MSG(L1CTM_SET_INTERFACE, "Call L1Ctm_SetInterface")
   TRC_MSG(L1CTM_START_NEGOTIATION, "Call L1Ctm_StartNegotiation")
   TRC_MSG(L1CTM_4G_PUT_UL,  "[4G TTY]  put to UL Buffer %x")
   TRC_MSG(L1CTM_4G_GET_DL,  "[4G TTY]  get from DL Buffer %x")
   TRC_MSG(L1CTM_TTY_LTE_UL_GET,  "[TTY_LTE_PSR_UL_Get] ch = %x")
   TRC_MSG(L1CTM_TTY_LTE_DL_GET,  "[TTY_LTE_PSR_DL_Get] ch = %x")
   TRC_MSG(L1CTM_TTY_LTE_UL_PUT,  "[TTY_LTE_PSR_UL_Put] ch = %x")
   TRC_MSG(L1CTM_TTY_LTE_DL_PUT,  "[TTY_LTE_PSR_DL_Put] ch = %x")
   TRC_MSG(L1CTM_TTY_LTE_UL_QUEUE_SIZE,  "[TTY_LTE_PSR_UL_Queue_Size] size = %x")
   TRC_MSG(L1CTM_TTY_LTE_DL_QUEUE_SIZE,  "[TTY_LTE_PSR_DL_Queue_Size] size = %x")
   TRC_MSG(L1CTM_TTY_MODE,         "[CTM] TTY mode = %d")
   TRC_MSG(L1CTM_TX_PUT_TEXT, "Call L1Ctm_TxPutText")
   TRC_MSG(L1CTM_RX_GET_TEXT, "Call L1Ctm_RxGetText")
   TRC_MSG(L1CTM_IN_HISR_ENTER, "[l1ctm_in_hisr] Enter")
   TRC_MSG(L1CTM_IN_HISR_LEAVE, "[l1ctm_in_hisr] Leave")
   TRC_MSG(L1CTM_STOP_ENTER, "[L1Ctm_Stop] Leave")
   TRC_MSG(L1CTM_STOP_LEAVE, "[L1Ctm_Stop] Leave")

   TRC_MSG(L1CTM_FAR_END_CTM_DETECTED, "L1Ctm far-end CTM detected")
   TRC_MSG(L1CTM_NEGOTIATION_SUCCESS, "L1Ctm negotiation success")
   TRC_MSG(L1CTM_NEGOTIATION_FAIL, "L1Ctm negotiation fail")
   TRC_MSG(L1CTM_DEMAND_CTM_ACK, "L1Ctm is demanded to send CTM ACK")
   TRC_MSG(L1CTM_UL_SEND_IDLE_AS_ACK, "L1CtmTx ul-path send IDLE as ACK")
   TRC_MSG(L1CTM_DL_DETECT_CTM_SYNC, "L1Ctm dl-path detect CTM Sync")
   TRC_MSG(L1CTM_DL_CTM_BURST_END, "L1Ctm dl-path detect CTM burst-end")

   TRC_MSG(L1CTM_UL_SEND_ENQUIRY_CHAR, "L1Ctm ul-path send %d-time ENQUIRY char")
   TRC_MSG(L1CTM_UL_GET_DECODED_TTY_CHAR, "L1Ctm ul-path get decoded TTY-char 0x%02X")
   TRC_MSG(L1CTM_UL_SEND_CTM_CHAR, "L1Ctm ul-path send CTM-char 0x%02X")
   TRC_MSG(L1CTM_DL_GET_RECEIVED_CTM_CHAR, "L1Ctm dl-path get received CTM-char 0x%02X")
   TRC_MSG(L1CTM_DL_SEND_TTY_CHAR, "L1Ctm dl-path send TTY-char 0x%02X")
   TRC_MSG(L1CTM_REC_DIR_NO, "L1Ctm record to dir REC_%02u")
   TRC_MSG(L1CTM_SAVE_DECODED_CHAR, "L1Ctm dl-path save decoded char 0x%02X")   
   
   TRC_MSG(L1CTM_DEBUG_SHOW_SETTING1, "[CTM Setting 6229] AEC, EES, ES (Address 0x1A0~0x1A2): %d,%d,%d")
   TRC_MSG(L1CTM_DEBUG_SHOW_SETTING2, "[CTM Setting 6229] AMR codebook threshold=%d, gain=%d")
   TRC_MSG(L1CTM_DEBUG_SHOW_SETTING3, "[CTM Setting 6229] DSP_AFS/AHS_SP_BFI_THRESHOLD 0: %d,%d")
   TRC_MSG(L1CTM_DEBUG_SHOW_SETTING4, "[CTM Setting 6229] DSP_AFS/AHS_SP_BFI_THRESHOLD 1: %d,%d")
   TRC_MSG(L1CTM_DEBUG_SHOW_SETTING5, "[CTM Setting 6229] DSP_AFS/AHS_SP_BFI_THRESHOLD 2: %d,%d")
   TRC_MSG(L1CTM_DEBUG_SHOW_SETTING6, "[CTM Setting 6229] DSP_AFS/AHS_SP_BFI_THRESHOLD 3: %d,%d")
   TRC_MSG(L1CTM_DEBUG_SHOW_SETTING7, "[CTM Setting]: Audio Coefficient for input : %d, %d, %d, %d")
   TRC_MSG(L1CTM_DEBUG_SHOW_SETTING8, "[CTM Setting]: Audio Coefficient for output: %d, %d, %d, %d")
   TRC_MSG(L1CTM_FAKE_COSIM, "Turning on COSIM bit in DP_CTM_COSIM_CTRL")
   TRC_MSG(L1CTM_BUF_OVFLOW, "l1ctm buffer overflow")
   TRC_MSG(L1CTM_COSIM, "Turning on COSIM bit in DP_CTM_COSIM_CTRL")
   TRC_MSG(L1CTM_BFI_INFO, "l1ctm_in_hisr in cosim mode(buf_idx=%x, bfi_store_idx=%x, dsp_tch_bfi=%x, bfi flag=%x)")
   TRC_MSG(L1CTM_HCO_MODE, "Opening ctm in HCO mode.")
   TRC_MSG(L1CTM_VCO_MODE, "Opening ctm in VCO mode.")
   TRC_MSG(L1CTM_COSIM_MODE, "Opening CTM in cosim mode")
   TRC_MSG(L1CTM_NORMAL_MODE,"Opening ctm in normal mode (no HCO/VCO).")
   TRC_MSG(L1CTM_OPEN_PARAM, "ctm param is not null, cprm_debug_flag=%x")
   
   // SND
   TRC_MSG( SPC_BGSND_WRITEDATADONE_ENTER,"[spc_bgSnd_writeDataDone] Enter")
   TRC_MSG( SPC_BGSND_WRITEDATADONE_LEAVE,"[spc_bgSnd_writeDataDone] Leave")
   TRC_MSG( SPC_BGSND_REQUESTDATA_ENTER,"[spc_bgSnd_requestData] Enter")          
   TRC_MSG( SPC_BGSND_REQUESTDATA_INFO,"[spc_bgSnd_requestData] bLen=%d BGSND_RB_DEFAULT_THRESHOLD=%d") 
	TRC_MSG( SPC_BGSND_REQUESTDATA_LEAVE,"[spc_bgSnd_requestData] Leave") 
   TRC_MSG( SPC_BGSND_DLHDR_ENTER,"[spc_BGSND_DLHdr] Enter") 
	TRC_MSG( SPC_BGSND_DLHDR_LEAVE,"[spc_BGSND_DLHdr] Leave") 
   TRC_MSG( SPC_BGSNDSTART_ENTER,"[spc_BgSndStart] Enter") 
	TRC_MSG( SPC_BGSNDSTART_LEAVE,"[spc_BgSndStart] Leave") 
   TRC_MSG( SPC_BGSNDSTOP_ENTER,"[spc_BgSndStop] Enter") 	
	TRC_MSG( SPC_BGSNDSTOP_LEAVE,"[spc_BgSndStop] Leave") 	
   TRC_MSG( SPC_BGSNDCONFIG_ENTER,"[spc_BgSndConfig] Enter") 
	TRC_MSG( SPC_BGSNDCONFIG_LEAVE,"[spc_BgSndConfig] Leave")
	
	//EXT BGS
   TRC_MSG(DSP_BGSND_INIT_ENTER,                                                                          "[DSP_BGSND_INIT] Enter")
   TRC_MSG(DSP_BGSND_INIT_LEAVE,                                                                          "[DSP_BGSND_INIT] Leave")
   TRC_MSG(DSP_BGSND_CONFIGMIXER_ENTER,	                                                                 "[DSP_BGSND_ConfigMixer] Enter")	
   TRC_MSG(DSP_BGSND_CONFIGMIXER_BGSND_PROCESS_TYPE,                                                      "[DSP_BGSND_ConfigMixer] BGSND_PROCESS_TYPE(0->DL, 1->UL)=%d flag:%d, gain:%d")
   TRC_MSG(DSP_BGSND_CONFIGMIXER_LEAVE,                                                                   "[DSP_BGSND_ConfigMixer] Leave")
   TRC_MSG(DSP_BGSND_UPDATEMIXER_ENTER,	                                                                 "[DSP_BGSND_UpdateMixer] Enter")	   
   TRC_MSG(DSP_BGSND_UPDATEMIXER_LEAVE,	                                                                 "[DSP_BGSND_UpdateMixer] Leave")	   
   TRC_MSG(DSP_BGSND_STOP_ENTER,                                                                          "[DSP_BGSND_Stop] Enter")
   TRC_MSG(DSP_BGSND_STOP_LEAVE,                                                                          "[DSP_BGSND_Stop] Leave")   
   TRC_MSG(DSP_BGSND_SHARED_HISR_DL_UL_ENTER,                                                             "[DSP_BGSND_Shared_Hisr_DL_UL] Enter")   
   TRC_MSG(DSP_BGSND_SHARED_HISR_DL_UL_LEAVE,                                                             "[DSP_BGSND_Shared_Hisr_DL_UL] Leave")  
   TRC_MSG(DSP_BGSND_HISR_ENTER,                                                                          "[DSP_BGSND_Hisr] Enter")   
   TRC_MSG(DSP_BGSND_HISR_BGSND_PROCESS_TYPE,                                                             "[DSP_BGSND_Hisr] BGSND_PROCESS_TYPE(0->DL, 1->UL)=%d state=%d")
   TRC_MSG(DSP_BGSND_HISR,                                                                                "[DSP_BGSND_Hisr] %x %x %x %x %x %x %x %x %x %x")
   TRC_MSG(DSP_BGSND_HISR_LEAVE,                                                                          "[DSP_BGSND_Hisr] Leave")
   TRC_MSG(DSP_BGSND_START_ENTER,                                                                         "[DSP_BGSND_Start] Enter")
   TRC_MSG(DSP_BGSND_START_LEAVE,                                                                         "[DSP_BGSND_Start] Leave")
   TRC_MSG(EXT_BGSND_INIT_ENTER,                                                                          "[EXT_BGSND_init] Enter")
   TRC_MSG(EXT_BGSND_INIT_LEAVE,                                                                          "[EXT_BGSND_init] Leave")
   TRC_MSG(EXT_BGSND_START_ENTER,                                                                         "[EXT_BGSND_Start] Enter")
   TRC_MSG(EXT_BGSND_START_DEBUG1 ,                                                                       "[EXT_BGSND_Start] debug1 i=%d")
   TRC_MSG(EXT_BGSND_START_DEBUG2 ,                                                                       "[EXT_BGSND_Start] debug2 i=%d")
   TRC_MSG(EXT_BGSND_START_SELECTED_SRC,                                                                  "[EXT_BGSND_Start] selected_src_id=%d num_src_used=%d")
   TRC_MSG(EXT_BGSND_START_DEBUG3 ,                                                                       "[EXT_BGSND_Start] debug3 i=%d")
   TRC_MSG(EXT_BGSND_START_DEBUG4 ,                                                                       "[EXT_BGSND_Start] debug4 i=%d")
   TRC_MSG(EXT_BGSND_START_DEBUG5 ,                                                                       "[EXT_BGSND_Start] debug5 i=%d")
   TRC_MSG(EXT_BGSND_START_LEAVE,                                                                         "[EXT_BGSND_Start] Leave")         
   TRC_MSG(EXT_BGSND_FLUSH_ENTER,                                                                         "[EXT_BGSND_Flush] Enter")   
   TRC_MSG(EXT_BGSND_FLUSH_ID,                                                                            "[EXT_BGSND_Flush] id=%d")
   TRC_MSG(EXT_BGSND_FLUSH_STATE,                                                                         "[EXT_BGSND_Flush] state=%d")
   TRC_MSG(EXT_BGSND_FLUSH_LEAVE,                                                                         "[EXT_BGSND_Flush] Leave")   
   TRC_MSG(EXT_BGSND_CLOSE_ENTER,                                                                         "[EXT_BGSND_Close] Enter")     
   TRC_MSG(EXT_BGSND_CLOSE_SELECTED_SRC,                                                                  "[EXT_BGSND_Close] selected_src_id=%d num_src_used=%d")
   TRC_MSG(EXT_BGSND_CLOSE_LEAVE,                                                                         "[EXT_BGSND_Close] Leave")
   TRC_MSG(EXT_BGSND_DLHISR_ENTER,                                                                        "[EXT_BGSND_DLHisr] Enter")
   TRC_MSG(EXT_BGSND_DLHISR_LEAVE,                                                                        "[EXT_BGSND_DLHisr] Leave")
   TRC_MSG(EXT_BGSND_ULHISR_ENTER,                                                                        "[EXT_BGSND_ULHisr] Enter")
   TRC_MSG(EXT_BGSND_ULHISR_LEAVE,                                                                        "[EXT_BGSND_ULHisr] Leave")
   TRC_MSG(EXT_BGSND_GETDATACOUNT_ENTER,                                                                  "[EXT_BGSND_GetDataCount] Enter")
   TRC_MSG(EXT_BGSND_GETDATACOUNT_COUNT,                                                                  "[EXT_BGSND_GetDataCount] count=%d")
   TRC_MSG(EXT_BGSND_GETDATACOUNT_LEAVE,                                                                  "[EXT_BGSND_GetDataCount] Leave")
   TRC_MSG(EXT_BGSND_HISR_ENTER,                                                                          "[EXT_BGSND_Hisr] Enter")
   TRC_MSG(EXT_BGSND_HISR_BGSND_PROCESS_TYPE,                                                             "[EXT_BGSND_Hisr] BGSND_PROCESS_TYPE(0->DL, 1->UL)=%d")
   TRC_MSG(EXT_BGSND_HISR_SELECTED_SRC,                                                                   "[EXT_BGSND_Hisr] selected_src_id=%d src_state=%d")
   TRC_MSG(EXT_BGSND_HISR_EXT_SRC_STATE_FLUSHING_OVER,                                                    "  [EXT_BGSND_Hisr] %d-th Src's BGSND_PROCESS_TYPE(0->DL, 1->UL)=%d EXT_SRC_STATE_FLUSHING_OVER")
   TRC_MSG(EXT_BGSND_HISR_ENTER_SRC_OFFHDR,                                                               "  [EXT_BGSND_Hisr] Enter %d-th Src's OffHdr")
   TRC_MSG(EXT_BGSND_HISR_LEAVE_SRC_OFFHDR,                                                               "  [EXT_BGSND_Hisr] Leave %d-th Src's OffHdr")
   TRC_MSG(EXT_BGSND_HISR_FLUSH_SRC_OFFHDR_COMPLETELY,                                                    "  [EXT_BGSND_Hisr] Flush %d-th Src's OffHdr completely")
   TRC_MSG(EXT_BGSND_HISR_WAIT_SRC_HDR_TO_FLUSH_COMPLETELY,                                               "  [EXT_BGSND_Hisr] Wait %d-th Src's Hdr to flush completely")
   TRC_MSG(EXT_BGSND_HISR_FLUSHING,                                                                       "  [EXT_BGSND_Hisr]  %d-th Src's BGSND_PROCESS_TYPE(0->DL, 1->UL)=%d is flushing with len=%d")
   TRC_MSG(EXT_BGSND_HISR_NOT_FLUSHING,                                                                   "  [EXT_BGSND_Hisr] %d-th Src's BGSND_PROCESS_TYPE(0->DL, 1->UL)=%d is not flushing with state=%d")
   TRC_MSG(EXT_BGSND_HISR_HDR_IS_NOT_USED,                                                                "[EXT_BGSND_Hisr] %d-th Src's Hdr is not used")
   TRC_MSG(EXT_BGSND_HISR_LEAVE,                                                                          "[EXT_BGSND_Hisr] Leave")
   TRC_MSG(BGSND_DSP_BGSND_BUF_ADD,                                                                       "[BGSND] DSP_BGSND_Buf_Add id=%d src_len=%d type=%x")
   TRC_MSG(BKGSND_DSP_BUF_ADD_BUF,                                                                        "[BKGSND]DSP_buf_add buf[%d]=%x DSP_DLBuffer[%d]=%x")
   TRC_MSG(EXT_BGSND_WRITESRCBUFFER_ENTER,                                                                "[EXT_BGSND_WriteSrcBuffer] Enter")
   TRC_MSG(EXT_BGSND_WRITESRCBUFFER_LEAVE,                                                                "[EXT_BGSND_WriteSrcBuffer] Leave")
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_ENTER,                                                                "[EXT_BGSND_WriteExtBuffer] Enter")   
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_SELECTED_SRC,                                                         "[EXT_BGSND_WriteExtBuffer] selected_src_id = %d BGSND_PROCESS_TYPE(0->DL, 1->UL)=%d")
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_FSPH,                                                                 "[EXT_BGSND_WriteExtBuffer] fSph=%d gain=%d")
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_COUNT,                                                                "[EXT_BGSND_WriteExtBuffer] count=%d")
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_OVERFLOWS1,                                                           "[EXT_BGSND_WriteExtBuffer] overflows1")  
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_FILLED_TO_DSP,    	                                                   "[EXT_BGSND_WriteExtBuffer_%d] Filled %d word to DSP, bgSnd.bufRead=%d, bgSnd.bufWrite=%d")
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_OVERFLOWS2,                                                           "[EXT_BGSND_WriteExtBuffer] overflows2")  
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_FILLED_TO_DSP_WITH_LAST_SAMPLE,                                       "[EXT_BGSND_WriteExtBuffer] Filled %d word to DSP with last sample %x")
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_OVERFLOWS3,                                                           "[EXT_BGSND_WriteExtBuffer] overflows3")                                                                                                  
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_SKIP_TO_DSP,                                                          "[EXT_BGSND_WriteExtBuffer] skip fill %d word to DSP with silence pattern, state=%d")
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER,                                                                      "[EXT_BGSND_WriteExtBuffer] %x %x %x %x %x %x %x %x %x %x") 
   TRC_MSG(EXT_BGSND_WRITEEXTBUFFER_LEAVE,                                                                "[EXT_BGSND_WriteExtBuffer] Leave")    
   TRC_MSG(EXT_BGSND_GETFREESPACE_ENTER,                                                                  "[EXT_BGSND_GetFreeSpace] Enter") 
   TRC_MSG(EXT_BGSND_GETFREESPACE_INFO,                                                                   "[EXT_BGSND_GetFreeSpace] ## r = %d w = %d size = %d")
   TRC_MSG(EXT_BGSND_GETFREESPACE_LEAVE,                                                                  "[EXT_BGSND_GetFreeSpace] Leave")    
   TRC_MSG(EXT_BGSND_CONFIGMIXER_ENTER,                                                                   "[EXT_BGSND_ConfigMixer] Enter") 
   TRC_MSG(EXT_BGSND_CONFIGMIXER_BSPHFLAG,                                                                "[EXT_BGSND_ConfigMixer] bSPHFlag=%d SNDGain=%d")
   TRC_MSG(EXT_BGSND_CONFIGMIXER_LEAVE,                                                                   "[EXT_BGSND_ConfigMixer] Leave")  	
	
	 //VOLTETONE
   TRC_MSG(SP4G_PSR_DL_KT_PLAY_ENTER                                          ,"[SP4G_PSR_DL_KT_Play] Enter")                                   
   TRC_MSG(SP4G_PSR_DL_KT_PLAY_LEAVE                                          ,"[SP4G_PSR_DL_KT_Play] Leave")                                   
   TRC_MSG(SP4G_PSR_DL_KT_STOP_ENTER                                          ,"[SP4G_PSR_DL_KT_Stop] Enter")                                   
   TRC_MSG(SP4G_PSR_DL_KT_STOP_LEAVE                                          ,"[SP4G_PSR_DL_KT_Stop] Leave")                                   
   TRC_MSG(SP4G_PSR_DL_TONE_PLAY_ENTER                                        ,"[SP4G_PSR_DL_Tone_Play] Enter")                                 
   TRC_MSG(SP4G_PSR_DL_TONE_PLAY_LEAVE                                        ,"[SP4G_PSR_DL_Tone_Play] Leave")                                 
   TRC_MSG(SP4G_PSR_DL_TONE_STOP_ENTER                                        ,"[SP4G_PSR_DL_Tone_Stop] Enter")                                 
   TRC_MSG(SP4G_PSR_DL_TONE_STOP_LEAVE                                        ,"[SP4G_PSR_DL_Tone_Stop] Leave")                                 
   TRC_MSG(SP4G_PSR_UL_KT_PLAY_ENTER                                          ,"[SP4G_PSR_UL_KT_Play] Enter")                                   
   TRC_MSG(SP4G_PSR_UL_KT_PLAY_LEAVE                                          ,"[SP4G_PSR_UL_KT_Play] Leave")                                   
   TRC_MSG(SP4G_PSR_UL_KT_PLAY_SKIP                                           ,"[SP4G_PSR_UL_KT_Play] Skip")                                    
   TRC_MSG(SP4G_PSR_UL_KT_STOP_ENTER                                          ,"[SP4G_PSR_UL_KT_Stop] Enter")                                   
   TRC_MSG(SP4G_PSR_UL_KT_STOP_LEAVE                                          ,"[SP4G_PSR_UL_KT_Stop] Leave")                                   
   TRC_MSG(SP4G_PSR_UL_KT_STOP_SKIP                                           ,"[SP4G_PSR_UL_KT_Stop] Skip")                                    
   TRC_MSG(SP4G_PSR_UL_TONE_PLAY_ENTER                                        ,"[SP4G_PSR_UL_Tone_Play] Enter")                                 
   TRC_MSG(SP4G_PSR_UL_TONE_PLAY_LEAVE                                        ,"[SP4G_PSR_UL_Tone_Play] Leave")                                 
   TRC_MSG(SP4G_PSR_UL_TONE_PLAY_SKIP                                         ,"[SP4G_PSR_UL_Tone_Play] Skip")                                  
   TRC_MSG(SP4G_PSR_UL_TONE_STOP_ENTER                                        ,"[SP4G_PSR_UL_Tone_Stop] Enter")                                 
   TRC_MSG(SP4G_PSR_UL_TONE_STOP_LEAVE                                        ,"[SP4G_PSR_UL_Tone_Stop] Leave")                                 
   TRC_MSG(SP4G_PSR_UL_TONE_STOP_SKIP                                         ,"[SP4G_PSR_UL_Tone_Stop] Skip")                                  
   TRC_MSG(VOLTE_BGSNDCLOSE_ENTER                                             ,"[volte_BgSndClose] Enter")                                      
   TRC_MSG(VOLTE_BGSNDCLOSE_LEAVE 	                                           ,"[volte_BgSndClose] Leave") 	                                   
   TRC_MSG(VOLTE_BGSND_CLOSEHANDLER_ENTER                                     ,"[volte_bgSnd_closeHandler] Enter")                              
   TRC_MSG(VOLTE_BGSND_CLOSEHANDLER_LEAVE  	                                 ,"[volte_bgSnd_closeHandler] Leave")  	                           
   TRC_MSG(VOLTE_BGSND_ULHDR_ENTER                                            ,"[volte_BGSND_ULHdr] Enter")                                     
   TRC_MSG(VOLTE_BGSND_ULHDR_EXT_BGSND_WRITEEXTBUFFER                         ,"[volte_BGSND_ULHdr] EXT_BGSND_WriteExtBuffer")                  
   TRC_MSG(VOLTE_BGSND_ULHDR_EXT_BGSND_WRITEEXTBUFFER_LAST_DATA               ,"[volte_BGSND_ULHdr] EXT_BGSND_WriteExtBuffer last data")        
   TRC_MSG(VOLTE_BGSND_ULHDR_LEAVE  	                                         ,"[volte_BGSND_ULHdr] Leave")  	                                 
   TRC_MSG(VOLTE_BGSND_ULHDR_NEED_SAMPLES                                     ,"[volte_BGSND_ULHdr] we still need %d samples")
   TRC_MSG(VOLTE_BGSND_ULHDR_NO_EXT_BGSND_WRITEEXTBUFFER                      ,"[volte_BGSND_ULHdr] No EXT_BGSND_WriteExtBuffer")               
   TRC_MSG(VOLTE_BGSND_ULHDR_TONECNT_REMAINS                                  ,"[volte_BGSND_ULHdr]  ToneCnt %d Remains %d")
      
   //sp_dsptone_drv
   TRC_MSG(SP_DSPTONE_UL_KT_PLAY_SKIP                                  ,"[SP_DSPTone] SP_DSPTone_UL_KT_Play skip")
   TRC_MSG(SP_DSPTONE_UL_KT_PLAY_START                                 ,"[SP_DSPTone] SP_DSPTone_UL_KT_Play start freq1=%d freq2=%d duration=%d")
   TRC_MSG(SP_DSPTONE_UL_KT_PLAY_LEAVE                                 ,"[SP_DSPTone] SP_DSPTONE_UL_KT_Play leave")
   TRC_MSG(SP_DSPTONE_UL_KT_STOP_SKIP                                  ,"[SP_DSPTone] SP_DSPTone_UL_KT_Stop skip")
   TRC_MSG(SP_DSPTONE_UL_KT_STOP_START                                 ,"[SP_DSPTone] SP_DSPTone_UL_KT_Stop start")
   TRC_MSG(SP_DSPTONE_UL_KT_STOP_LEAVE                                 ,"[SP_DSPTone] SP_DSPTone_UL_KT_Stop leave")
   TRC_MSG(SP_DSPTONE_DL_KT_PLAY_SKIP                                  ,"[SP_DSPTone] SP_DSPTone_DL_KT_Play skip")
   TRC_MSG(SP_DSPTONE_DL_KT_PLAY_START                                 ,"[SP_DSPTone] SP_DSPTone_DL_KT_Play start freq1=%d freq2=%d duration=%d")
   TRC_MSG(SP_DSPTONE_DL_KT_PLAY_LEAVE                                 ,"[SP_DSPTone] SP_DSPTONE_DL_KT_Play leave")
   TRC_MSG(SP_DSPTONE_DL_KT_STOP_SKIP                                  ,"[SP_DSPTone] SP_DSPTone_DL_KT_Stop skip")
   TRC_MSG(SP_DSPTONE_DL_KT_STOP_START                                 ,"[SP_DSPTone] SP_DSPTone_DL_KT_Stop start")
   TRC_MSG(SP_DSPTONE_DL_KT_STOP_LEAVE                                 ,"[SP_DSPTone] SP_DSPTone_DL_KT_Stop leave")
   //VOLTE AAM Plus
   TRC_MSG(SP_4G_AAMPLUS_ENABLE                                               ,"sp_4g_AAMPlus Enable")                                   
   TRC_MSG(SP_4G_AAMPLUS_DISABLE                                              ,"sp_4g_AAMPlus Disable")                                   
   TRC_MSG(SP_4G_AAMPLUS_TALK                                                 ,"sp_4g_AAMPlus TALK")                                   
   TRC_MSG(SP_4G_AAMPLUS_SILENCE_SID_FIRST                                    ,"sp_4g_AAMPlus SILENCE SID first")
   TRC_MSG(SP_4G_AAMPLUS_SILENCE_SID_UPDATE                                   ,"sp_4g_AAMPlus SILENCE SID update")

   //am	
   TRC_MSG(SAL_4G_GSeriesCall_Open_CheckState_UL_DL,  "[SAL_4G_GSeriesCall_Open] I=%d SAL_PcmEx_CheckStateDL=%d SAL_PcmEx_CheckStateUL=%d is_ready=%d")
   TRC_MSG(SAL_4G_GSeriesCall_Open_CheckState,        "[SAL_4G_GSeriesCall_Open] SAL_PcmEx_CheckState OK")
   
   //audio service
   TRC_MSG(AUDIO_SERVICE_DSP2MCU                                    ,"DSP2MCU")                          
   TRC_MSG(AUDIO_SERVICE_DSP2MCU_TASK4                              ,"DSP2MCU Task4")                    
   TRC_MSG(AUDIO_SERVICE_DSP2MCU_TASK5                              ,"DSP2MCU Task5")                    
   TRC_MSG(AUDIO_SERVICE_DSP2MCU_TASK6                              ,"DSP2MCU Task6")                    
   TRC_MSG(AUDIO_SERVICE_DSP2MCU_TASK7_DSP_DIE                      ,"DSP2MCU Task7 DSP Die ")           
   TRC_MSG(AUDIO_SERVICE_L1AUDIO_CONSOLE_HANDLER_VIO18_ON           ,"l1audio_console_handler VIO18 ON") 
   TRC_MSG(AUDIO_SERVICE_L1AUDIO_CONSOLE_HANDLER_VIO18_OFF          ,"l1audio_console_handler VIO18 OFF")
      
   //BT_SCO                                 
   TRC_MSG(CVSD_BTSCO_HISR_ADDRESS                    ,"[CVSD]btsco_hisr address: W:%x, R:%x, status:%x")
   TRC_MSG(CVSD_BT_SCO_ALLOC_CVSD_MEMORY              ,"[CVSD]BT_SCO_Alloc_CVSD_Memory: uTotalMemory %d")
   TRC_MSG(CVSD_G711PLC_ADDTOHISTORY_COPY             ,"[CVSD]g711plc_addtohistory copy: btsco.pRX->iPacket_r %d")
   TRC_MSG(CVSD_G711PLC_DOFE_COPY                     ,"[CVSD]g711plc_dofe copy: btsco.pRX->iPacket_r %d")
   TRC_MSG(CVSD_BT_SCO_ALLOC_MSBC_MEMORY              ,"[CVSD]BT_SCO_Alloc_MSBC_Memory: uTotalMemory %d")
   TRC_MSG(MSBC_INFO                                  ,"[MSBC][%d][%d], index1: %d, valid: %d")
   TRC_MSG(MSBC_STATUS                                ,"[MSBC]status: %d,")
   TRC_MSG(CVSD_BTSCO_PROCESS_LOOPBACK                ,"[CVSD]btsco_process_loopback, uInLen: %d, uOutLen: %d")
   TRC_MSG(CVSD_BT_SCO_SPEECH_ON                      ,"[CVSD]BT_SCO_SPEECH_ON, uState: %d, fWideBand = %d")
   TRC_MSG(CVSD_BT_SCO_SPEECH_OFF                     ,"[CVSD]BT_SCO_SPEECH_OFF, uState: %d")
   TRC_MSG(CVSD_BT_SCO_LOOPBACK_ON                    ,"[CVSD]BT_SCO_Loopback_ON, fDisableCodec: %d, uState: %d")
   TRC_MSG(CVSD_BT_SCO_LOOPBACK_OFF                   ,"[CVSD]BT_SCO_Loopback_OFF, uState: %d")
   
   //p4w   
   TRC_MSG(P4W_GETDATAFROMDSP, "pcmEx_getDataFromDsp bufName=%d, addr=%x, length=%d")
   TRC_MSG(P4W_WRITEDATATODSP, "pcmEx_writeDataToDsp bufName=%d, addr=%x, length=%d")
      
   TRC_MSG(L1SND_DSP_BUFFER_INFO, "BGSND buf count:%d; dsp_buf_addr(toPtr): %x, dsp_buf_len: %d word")
   TRC_MSG(L1SND_FILLBUFFER, "BGSND[%d] Filled %d word to DSP, bgSnd.bufRead=%d, bgSnd.bufWrite=%d")
   TRC_MSG(L1SND_PUT_SILENCE, "BGSND Filled %d word to DSP with silence pattern %x")
   TRC_MSG(L1SND_WRITE_DATA, "[EXT_BGSND_WriteSrcBuffer_%d] selected_src_id=%d type=%d Write data %d word to buffer %d, bgSnd.bufRead=%d, bgSnd.bufWrite=%d")
   TRC_MSG(L1SND_STOP_FLUSH_COUNT, "BGSND Flush count: %d word")
   TRC_MSG(L1SND_STOP_FLUSH_LEAVE, "BGSND Flush Still Leave: %d word")
   
   TRC_MSG(L1SND_ENTER_BGSND_START, "Enter BGSND_Start")
   TRC_MSG(L1SND_ENTER_BGSND_STOP, "Enter BGSND_Stop")
   TRC_MSG(L1SND_ENTER_EVENT_HANDLER, "Enter bgsndEventHandler with state=%d")
   TRC_MSG(L1SND_CONFIG_ULMIXER, "BGSND ConfigULMixer, flag:%d, gain:%d")
   TRC_MSG(L1SND_CONFIG_DLMIXER, "BGSND ConfigDLMixer, flag:%d, gain:%d")

   TRC_MSG(L1SND_REENTER_HISR, "SND re-enter HISR with isDlHisrCome=%d, isUlHisrCome=%d")

   // Mixer
   TRC_MSG(MIXER2_START, "Enter PcmMixer_Start")
   TRC_MSG(MIXER2_CONFIG_DL, "pcmMixer DL Config, isMix:%d, gain:%d")
   TRC_MSG(MIXER2_CONFIG_UL, "pcmMixer UL Config, isMix:%d, gain:%d")

   // Mixer3
   TRC_MSG(MIXER3_START, "Enter PcmMixer3_Start")
   TRC_MSG(MIXER3_CONFIG_UL, "pcmMixer3 UL Config, isMix:%d, gain:%d")
   TRC_MSG(MIXER3_INFO, "PcmMixer3 Gain %x Mix %d")
   TRC_MSG(MIXER3_DATA_LENGTH, "PcmMixer3_writeUlBuf %d")
   //SP4G
   TRC_MSG(SP4G_DEBUG_PSR_SP4G_CALLBACK_0                                                                                      ,"[SP4G][DEBUG]PSR_SP4G_Callback 0")
   TRC_MSG(SP4G_DEBUG_PSR_SP4G_CALLBACK_1                                                                                      ,"[SP4G][DEBUG]PSR_SP4G_Callback 1")
   TRC_MSG(SP4G_DEBUG_SP4G_HISR_UL_AMR_EMAC_VOLTE_CALLOFF                                                                      ,"debug sp4g_hisr_ul_amr emac_volte_calloff")
   TRC_MSG(SP4G_DEBUG_SP4G_HISR_UL_AMR_EMAC_VOLTE_CALLON                                                                       ,"debug sp4g_hisr_ul_amr emac_volte_callon")
   TRC_MSG(SP4G_DEBUG_SP4G_SPEECH_INIT                                                                                         ,"[SP4G][DEBUG]sp4g_speech_init = 0x%x")
   TRC_MSG(SP4G_DEBUG_SP4G_UL_SETFRAMETYPE1                                                                                    ,"[SP4G][DEBUG]SP4G_UL_SetFrameType1 %MSP4G_Codec(0x%x) 0x%x ftype=%MSP4G_Codec(0x%x), ul_intrarat=%d")
   TRC_MSG(SP4G_DEBUG_SP4G_UL_SETFRAMETYPE2                                                                                    ,"[SP4G][DEBUG]SP4G_UL_SetFrameType2 %d %d ftype=%MSP4G_Codec(0x%x), ul_intrarat=%d")
   TRC_MSG(SP4G_DEBUG_SP4G_UL_SETFRAMETYPE3                                                                                    ,"[SP4G][DEBUG]SP4G_UL_SetFrameType3 %d %d ftype=%MSP4G_Codec(0x%x), ul_intrarat=%d")
   TRC_MSG(SP4G_DEBUG_UL_BUFF                                                                                                  ,"#debug_ul_buff(6) %d ")
   TRC_MSG(SP4G_DEBUG_UL_GETSPEECHFRAME                                                                                        ,"[SP4G]Debug_UL_GetSpeechFrame %d")
   TRC_MSG(SP4G_DECODE_GETBUFFERSIZE                                                                                           ,"[SP4G]Decode GetBufferSize %d %d %d %d")
   TRC_MSG(SP4G_DEBUG_UL_GETSPEECHFRAME_USE_EVS_IO_REPLACE_AWB                                                                 ,"[SP4G]Debug_UL_GetSpeechFrame USE_EVS_IO_REPLACE_AWB")
   TRC_MSG(SP4G_DEBUG_UL_GETSPEECHFRAME_USE_EVS_IO_REPLACE_AWB_LEN                                                             ,"[SP4G]Debug_UL_GetSpeechFrame USE_EVS_IO_REPLACE_AWB bit_len=%d, byte_len=%d")
   TRC_MSG(SP4G_DL_DSP_PCM                                                                                                     ,"[SP4G]DL DSP PCM: %x %x %x %x %x %x %x %x")
   TRC_MSG(SP4G_DL_EVENT                                                                                                       ,"[SP4G]DL_Event %d-th ")
   TRC_MSG(SP4G_DL_EVENT_CODEC                                                                                                 ,"[SP4G]DL_Event codec=%MSP4G_Codec(0x%x) len=%d hdr.len=%d")
   TRC_MSG(SP4G_DL_EVENT_DECODED_GSERIES_DECODE_PROCESS                                                                        ,"[SP4G]DL_Event Decoded GSeries_Decode_Process result=%d")
   TRC_MSG(SP4G_DL_EVENT_DROP_PCM                                                                                              ,"[SP4G]DL_Event drop PCM")
   TRC_MSG(SP4G_DL_EVENT_READHARDBIT_NO_SIZE                                                                                   ,"[SP4G]DL_Event ReadHardbit no size")
   TRC_MSG(SP4G_DL_PCM                                                                                                         ,"[SP4G]DL PCM: %x %x %x %x %x %x %x %x")
   TRC_MSG(SP4G_DL_RB_DSP_PCM                                                                                                  ,"[SP4G]DL RB DSP PCM: %x %x %x %x %x %x %x %x")
   TRC_MSG(SP4G_DL_PUTSPEECHFRAME_USE_EVS_IO_REPLACE_AWB                                                                       ,"[SP4G]Debug_DL_PutSpeechFrame USE_EVS_IO_REPLACE_AWB")
   TRC_MSG(SP4G_EMAC_VOLTE_CALLON                                                                                              ,"emac_volte_callon")
   TRC_MSG(SP4G_ENCODE_GETBUFFERSIZE                                                                                           ,"[SP4G]Encode GetBufferSize %d %d %d %d")
   TRC_MSG(SP4G_P1_SP4G_RESET_FLAG_INFO                                                                                        ,"[SP4G][P1] sp4g_reset_flag=%d dl_count=%d %d %d size=%d")
   TRC_MSG(SP4G_P2_SP4G_RESET_FLAG_INFO                                                                                        ,"[SP4G][P2] sp4g_reset_flag=%d dl_count=%d %d %d size=%d")
   TRC_MSG(SP4G_P3_SP4G_RESET_FLAG_INFO                                                                                        ,"[SP4G][P3] sp4g_reset_flag=%d dl_count=%d %d %d size=%d")
   TRC_MSG(SP4G_P4_SP4G_RESET_FLAG_INFO                                                                                        ,"[SP4G][P4] sp4g_reset_flag=%d dl_count=%d %d %d size=%d")
   TRC_MSG(SP4G_PP5_1                                                                                                          ,"[SP4G][PP5.1] %d")
   TRC_MSG(SP4G_PP5_2                                                                                                          ,"[SP4G][PP5.2] %d")
   TRC_MSG(SP4G_PP5_SP4G_RESET_FLAG_INFO                                                                                       ,"[SP4G][PP5] sp4g_reset_flag=%d dl_count=%d %d %d size=%d")
   TRC_MSG(SP4G_PP6_SP4G_RESET_FLAG_INFO                                                                                       ,"[SP4G][PP6] sp4g_reset_flag=%d dl_count=%d %d %d size=%d")
   TRC_MSG(SP4G_PSR_GETFRAME                                                                                                   ,"[SP4G]PSR_GetFrame")
   TRC_MSG(SP4G_PSR_GETFRAME2                                                                                                  ,"[SP4G]PSR_GetFrame# %d")
   TRC_MSG(SP4G_PSR_GETFRAME_INFO                                                                                              ,"[SP4G]PSR_GetFrame codec=%d len=%d")
   TRC_MSG(SP4G_PSR_GETFRAME_MISMATCH                                                                                          ,"[SP4G]PSR_GetFrame Mismatch codec %d %d")
   TRC_MSG(SP4G_PSR_GETFRAME_NODATA                                                                                            ,"[SP4G]PSR_GetFrame NoData")
   TRC_MSG(SP4G_PSR_GETFRAME_OK                                                                                                ,"[SP4G]PSR_GetFrame Ok")
   TRC_MSG(SP4G_PSR_PUTFRAME3                                                                                                  ,"[SP4G]PSR_PutFrame aud_dl_id %x")
   TRC_MSG(SP4G_PSR_PUTFRAME4                                                                                                  ,"[SP4G]PSR_PutFrame codec=%d len=%d")
   TRC_MSG(SP4G_PSR_PUTFRAME_DROP                                                                                              ,"[SP4G]PSR_PutFrame drop")
   TRC_MSG(SP4G_PSR_PUTFRAME_DROP_SIZE_INFO                                                                                    ,"[SP4G]PSR_PutFrame drop stream size is larger than %dbyte")
   TRC_MSG(SP4G_PSR_PUTFRAME_MISMATCH                                                                                          ,"[SP4G]PSR_PutFrame mismatch codec=%MSP4G_Codec(0x%x) %MSP4G_Codec(0x%x)")
   TRC_MSG(SP4G_P_HISR_SP4G_RESET_FLAG_INFO                                                                                    ,"[SP4G][P_HISR] sp4g_reset_flag=%d dl_count=%d %d %d size=%d")
   TRC_MSG(SP4G_SP4GSETCODEC_IS_EQUAL                                                                                          ,"[SP4G][SP4G]SetCodec is equal %MSP4G_Codec(0x%x)")
   TRC_MSG(SP4G_SP4G_DL_FRM                                                                                                    ,"[SP4G]SP4G DL Frm -- -- -- -- --")
   TRC_MSG(SP4G_SP4G_HISR_DL_G_INFO1                                                                                           ,"sp4g_hisr_dl_g %x fsize=%d")
   TRC_MSG(SP4G_SP4G_HISR_DL_G_INFO2                                                                                           ,"sp4g_hisr_dl_g clear %x fsize=%d")
   TRC_MSG(SP4G_SP4G_HISR_DL_G_INFO3                                                                                           ,"sp4g_hisr_dl_g data is less than DSP request: data=%d, DSP request=%d")
   TRC_MSG(SP4G_SP4G_HISR_DL_G_NO_DATA                                                                                         ,"sp4g_hisr_dl_g no data")
   TRC_MSG(SP4G_SP4G_HISR_UL_AMR_NO_UPDATE_UL_BUFFER_1                                                                         ,"sp4g_hisr_ul_amr no update UL buffer 1")
   TRC_MSG(SP4G_SP4G_HISR_UL_AMR_NO_UPDATE_UL_BUFFER_2                                                                         ,"sp4g_hisr_ul_amr no update UL buffer 2")
   TRC_MSG(SP4G_SP4G_HISR_UL_G                                                                                                 ,"sp4g_hisr_ul_g %x")
   TRC_MSG(SP4G_SP4G_HISR_UL_G_AUD_UL_ID                                                                                       ,"sp4g_hisr_ul_g aud_ul_id %x")
   TRC_MSG(SP4G_SP4G_HISR_UL_G_DROP                                                                                            ,"sp4g_hisr_ul_g drop")
   TRC_MSG(SP4G_SP4G_HISR_UL_G_SIZE                                                                                            ,"sp4g_hisr_ul_g size=%d")
   TRC_MSG(SP4G_SP4G_HIST_4G_SYNC                                                                                              ,"sp4g_hist 4g_sync=%x")
   TRC_MSG(SP4G_SP4G_PSR_DL_AMR_PUTSPEECHFRAME                                                                                 ,"[SP4G]SP4G_PSR_DL_AMR_PutSpeechFrame codec=%MSP4G_PSR_Codec(0x%x) frame_type=%MSP4G_Codec(0x%x) ul_codec_mode=0x%x")
   TRC_MSG(SP4G_SP4G_PSR_DL_AMR_PUTSPEECHFRAME_G_SKIP                                                                          ,"[SP4G]SP4G_PSR_DL_AMR_PutSpeechFrame: now is G codec, skip this data flow.")
   TRC_MSG(SP4G_SP4G_PSR_DL_AMR_PUTSPEECHFRAME_LOST_FRAME                                                                      ,"[SP4G]SP4G_PSR_DL_AMR_PutSpeechFrame LOST_FRAME")
   TRC_MSG(SP4G_SP4G_PSR_DL_GSERIES_PUTSPEECHFRAME                                                                             ,"[SP4G]SP4G_PSR_DL_GSeries_PutSpeechFrame")
   TRC_MSG(SP4G_SP4G_PSR_DL_GSERIES_PUTSPEECHFRAME_INFO                                                                        ,"[SP4G]SP4G_PSR_DL_GSeries_PutSpeechFrame: codec=%MSP4G_Codec(0x%x), encodebits=%02x%02x%02x%02x, bitlen=%x")
   TRC_MSG(SP4G_SP4G_PSR_LINK_DEEST                                                                                            ,"[SP4G]SP4G_PSR_Link_Deest: sp4g_rab_state=%d")
   TRC_MSG(SP4G_SP4G_PSR_LINK_EST                                                                                              ,"[SP4G]SP4G_PSR_Link_Est: sp4g_rab_id=%d")
   TRC_MSG(SP4G_SP4G_PSR_UL_GSERIES_GETSPEECHFRAME                                                                             ,"[SP4G]SP4G_PSR_UL_GSeries_GetSpeechFrame")
   TRC_MSG(SP4G_SP4G_PSR_UL_GSERIES_GETSPEECHFRAME_INFO                                                                        ,"[SP4G]SP4G_PSR_UL_GSeries_GetSpeechFrame: codec=%MSP4G_Codec(0x%x), encodebits=%02x%02x%02x%02x, bitlen=%x")
   TRC_MSG(SP4G_SP4G_RAB_EST                                                                                                   ,"[SP4G]SP4G_Rab_Est: in_codec_mode=%MSP4G_Codec(0x%x), real_codec_mode=%d")
   TRC_MSG(SP4G_SP4G_RAB_EST_USE_EVS_IO_REPLACE_AWB                                                                            ,"[SP4G]SP4G_Rab_Est: USE_EVS_IO_REPLACE_AWB in_codec_mode=%MSP4G_Codec(0x%x)")
   TRC_MSG(SP4G_SP4G_SETCODEC                                                                                                  ,"[SP4G]SP4G_SetCodec: in_codec_mode=%MSP4G_Codec(0x%x), real_codec_mode=%d")
   TRC_MSG(SP4G_SP4G_SETCODEC0                                                                                                 ,"[SP4G]SP4G_SetCodec: in_codec_mode=%MSP4G_Codec(0x%x)")
   TRC_MSG(SP4G_SP4G_SETCODEC_USE_EVS_IO_REPLACE_AWB                                                                           ,"[SP4G]SP4G_SetCodec: USE_EVS_IO_REPLACE_AWB in_codec_mode=0x%x")
   TRC_MSG(SP4G_SP4G_SET_G711PARAMETERS                                                                                        ,"[SP4G]SP4G_Set_G711Parameters input dec_init_CNG_enable is out of range(0~1): %d")
   TRC_MSG(SP4G_SP4G_SET_G711PARAMETERS_OUT_OF_RANGE                                                                           ,"[SP4G]SP4G_Set_G711Parameters input law is out of range(1~2): %d")
   TRC_MSG(SP4G_SP_WAKE_IS_ON                                                                                                  ,"sp_wake is_on =%d")
   TRC_MSG(SP4G_TIMER_EVENT_INFO                                                                                               ,"[SP4G]@Timer_Event codec=%d len=%d")
   TRC_MSG(SP4G_UL_EVENT_CODEC_MISMATCH                                                                                        ,"[SP4G]UL_Event codec %d %d mismatch")
   TRC_MSG(SP4G_UL_EVENT_DROP1                                                                                                 ,"[SP4G]UL_Event drop1 %d")
   TRC_MSG(SP4G_UL_EVENT_DROP2                                                                                                 ,"[SP4G]UL_Event drop2 %d %d")
   TRC_MSG(SP4G_UL_EVENT_DROP2_SIZE_INFO                                                                                       ,"[SP4G]UL_Event drop2 stream size is larger than %dbyte")
   TRC_MSG(SP4G_UL_EVENT_DROP3                                                                                                 ,"[SP4G]UL_Event drop3 %d ")
   TRC_MSG(SP4G_UL_EVENT_DROP_CODEC_MUTE_INFO                                                                                  ,"[SP4G]UL_Event drop data, SP_is_codec_mute()=%d")
   TRC_MSG(SP4G_UL_EVENT_ENCODED_FREE_SIZE                                                                                     ,"[SP4G]UL_Event Encoded free_size=%d %d")
   TRC_MSG(SP4G_UL_EVENT_ENCODED_GSERIES_ENCODE_PROCESS                                                                        ,"[SP4G]UL_Event Encoded GSeries_Encode_Process return=%d")
   TRC_MSG(SP4G_UL_EVENT_ENCODED_INFO                                                                                          ,"[SP4G]UL_Event Encoded codec=%d size=%d")
   TRC_MSG(SP4G_UL_EVENT_INFO                                                                                                  ,"[SP4G]UL_Event %d-th codec=%d")
   TRC_MSG(SP4G_UL_EVENT_READPCM_NO_SIZE                                                                                       ,"[SP4G]UL_Event ReadPCM no size")
   TRC_MSG(SP4G_UL_EVENT_READPCM_SIZE                                                                                          ,"[SP4G]UL_Event ReadPCM size=%d")
   TRC_MSG(SP4G_UL_EVENT_WRITE1                                                                                                ,"[SP4G]UL_Event Write1 %d")
   TRC_MSG(SP4G_UL_EVENT_WRITE2                                                                                                ,"[SP4G]UL_Event Write2 %d")
   TRC_MSG(SP4G_UL_EVENT_WRITE3                                                                                                ,"[SP4G]UL_Event Write3 %d")
   TRC_MSG(SP4G_UL_STREAM                                                                                                      ,"UL stream: %x %x %x %x %x %x %x %x")
   TRC_MSG(SP4G_UL_SYNC_AM_4G_INTRARAT                                                                                         ,"[SP4G][UL_Sync] AM_4G_INTRARAT")
   TRC_MSG(SP4G_UL_SYNC_CHECK_TX_RX_ALIGN_FAIL                                                                                 ,"[SP4G][UL_Sync]check_TX_RX_align: fail")
   TRC_MSG(SP4G_UL_SYNC_CHECK_TX_RX_ALIGN_INFO                                                                                 ,"[SP4G][UL_Sync]check_TX_RX_align time2nextRX=%d, u32time2nextRXTemp=%d")
   TRC_MSG(SP4G_UL_SYNC_CHECK_TX_RX_ALIGN_OK                                                                                   ,"[SP4G][UL_Sync]check_TX_RX_align: OK")
   TRC_MSG(SP4G_UL_SYNC_EMAC_VOLTE_CALLOFF                                                                                     ,"[UL_Sync]emac_volte_calloff at sub_SP4G_emac_timing_update")
   TRC_MSG(SP4G_UL_SYNC_SP4G_EMAC_TIMING_UPDATE                                                                                ,"[SP4G][UL_Sync]SP4G_emac_timing_update")
   TRC_MSG(SP4G_UL_SYNC_SP4G_EMAC_TIMING_UPDATE_INFO                                                                           ,"[SP4G][UL_Sync]SP4G_emac_timing_update drx_period=%d sr_period=%d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_EMAC_TIMING_UPDATE_OK                                                                             ,"[SP4G][UL_Sync]SP4G_emac_timing_update: OK")
   TRC_MSG(SP4G_UL_SYNC_SP4G_EMAC_TIMING_UPDATE_SKIP                                                                           ,"[SP4G][UL_Sync]SP4G_emac_timing_update: skip")
   TRC_MSG(SP4G_UL_SYNC_SP4G_GETSYNCDELAYRW_1                                                                                  ,"[SP4G][UL_Sync] SP4G_GetSyncDelayRW.1 ctime = %d time2nextULHISR = %d time_emac_to_here= %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_GETSYNCDELAYRW_2                                                                                  ,"[SP4G][UL_Sync] SP4G_GetSyncDelayRW.2 time2nextULHISR = %d TX_period= %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_GETSYNCDELAYRW_3                                                                                  ,"[SP4G][UL_Sync] SP4G_GetSyncDelayRW.3 tmp = %d time2nextDSPSE= %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_GETSYNCDELAYRW_4                                                                                  ,"[SP4G][UL_Sync] SP4G_GetSyncDelayRW.4 R = %d W= %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_DL_AMR_1_INFO                                                                                ,"[UL_Sync]sp4g_hisr_dl_amr.1 ul_request_resync = %d sp4g_reset_flag=%d ctime = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_DL_AMR_FORCED_NO_DATA                                                                        ,"[UL_Sync] sp4g_hisr_dl_amr.2 forced no_data")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_0_INFO                                                                                ,"[UL_Sync]sp4g_hisr_ul_amr.0 mac_notify %d codec_mute=%d SP4G_ul_resync_info_available=%d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_1_MODIFY_INFO                                                                         ,"[UL_Sync]sp4g_hisr_ul_amr.1-1 D2M UL Timing MODIFY: LISR_64us=%x, HISR_64us=%x, diff_us=%x")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_1_INFO                                                                                ,"[UL_Sync]sp4g_hisr_ul_amr.1-2 ctime = %d time[0] = %d time_emac_2_ulhisr = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_2_1_INFO                                                                              ,"[UL_Sync]sp4g_hisr_ul_amr.2-1 adjust diff_mod = %d with resync_info.TX_period = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_2_1_INFO2                                                                             ,"[UL_Sync]sp4g_hisr_ul_amr.2-1 diff = %d  diff_mod = %d tx_period_min = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_2_2_INFO                                                                              ,"[UL_Sync]sp4g_hisr_ul_amr.2-2 adjust diff_mod = %d with DRIFT_DSP2MCU_RESET = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_2_2_INFO2                                                                             ,"[UL_Sync]sp4g_hisr_ul_amr.2-2 adjust diff_mod2 = %d with DRIFT_DSP2MCU_DSP_FINE_TUNE = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_2_INFO                                                                                ,"[UL_Sync]sp4g_hisr_ul_amr.2 time_emac_2_ulhisr = %d sp4g->time2nextULHISR = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_3                                                                                     ,"[UL_Sync]sp4g_hisr_ul_amr.3 t_req_resync = %d ctime = %d tdiff_req_resync = %d, ul_req_resync = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_4                                                                                     ,"[UL_Sync]sp4g_hisr_ul_amr.4 %d %d %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_5                                                                                     ,"[UL_Sync]sp4g_hisr_ul_amr.5 UL sync start")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_6                                                                                     ,"[UL_Sync]sp4g_hisr_ul_amr.6 UL sync start")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_7                                                                                     ,"[UL_Sync]sp4g_hisr_ul_amr.7 %d %d %d %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_AMR_8                                                                                     ,"[UL_Sync]sp4g_hisr_ul_amr.8 UL sync start")
   TRC_MSG(SP4G_UL_SYNC_SP4G_UL_GETSPEECHFRAME_1                                                                               ,"[SP4G][UL_Sync]SP4G_UL_GetSpeechFrame.1 sp4g_reset_flag=%d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_UL_GETSPEECHFRAME_2                                                                               ,"[SP4G][UL_Sync]SP4G_UL_GetSpeechFrame.2 sp4g_reset_flag=%d")
   TRC_MSG(SP4G_UL_SYNC_SUB_SP4G_EMAC_TIMING_UPDATE_INFO1                                                                      ,"[UL_Sync]sub_SP4G_emac_timing_update rx=%d tx=%d t2rx=%d t2tx=%d")
   TRC_MSG(SP4G_UL_SYNC_SUB_SP4G_EMAC_TIMING_UPDATE_INFO2                                                                      ,"[UL_Sync]sub_SP4G_emac_timing_update time2nextULHISR=%d")
   TRC_MSG(SP4G_UL_SYNC_SUB_SP4G_EMAC_TIMING_UPDATE_INFO3                                                                      ,"[UL_Sync]sub_SP4G_emac_timing_update: codec=0x%x, u32SoftwareCodecDelay=%d")
   TRC_MSG(SP4G_UL_SYNC_SUB_SP4G_EMAC_TIMING_UPDATE_INFO4                                                                      ,"[UL_Sync]sub_SP4G_emac_timing_update: return with SP4G_is_trigger_mac_notify=%d")
   TRC_MSG(SP4G_UL_SYNC_SUB_SP4G_EMAC_TIMING_UPDATE_INFO5                                                                      ,"[UL_Sync]sub_SP4G_emac_timing_update: return with useless info TX_period=%d, time2nextTX=%d")
   TRC_MSG(SP4G_UL_SYNC_SUB_SP4G_EMAC_TIMING_UPDATE_OK                                                                         ,"[UL_Sync]sub_SP4G_emac_timing_update: OK")
   TRC_MSG(SP4G_UL_SYNC_SUB_SP4G_EMAC_TIMING_UPDATE_RETURN                                                                     ,"[UL_Sync]sub_SP4G_emac_timing_update: return")
   TRC_MSG(SP4G_UL_SYNC_TIME_INFO                                                                                              ,"[UL_Sync]time_to_next_on=%x time_to_trig_sr=%x ctime=%d")
   TRC_MSG(SP4G_UL_TIMER                                                                                                       ,"@UL_Timer ")
   TRC_MSG(SP4G_WAKE                                                                                                           ,"WAKE")
   TRC_MSG(SP4G_DEBUG_SP4G_HISR_UL_EVS_EMAC_VOLTE_CALLOFF                                                                      ,"debug sp4g_hisr_ul_EVS emac_volte_calloff")
   TRC_MSG(SP4G_DEBUG_SP4G_HISR_UL_EVS_EMAC_VOLTE_CALLON                                                                       ,"debug sp4g_hisr_ul_EVS emac_volte_callon")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_0_INFO                                                                                ,"[UL_Sync]sp4g_hisr_ul_EVS.0 mac_notify %d codec_mute=%d SP4G_ul_resync_info_available=%d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_1_MODIFY_INFO                                                                         ,"[UL_Sync]sp4g_hisr_ul_EVS.1-1 D2M UL Timing MODIFY: LISR_64us=%x, HISR_64us=%x, diff_us=%x")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_1_INFO                                                                                ,"[UL_Sync]sp4g_hisr_ul_EVS.1-2 ctime = %d time[0] = %d time_emac_2_ulhisr = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_2_1_INFO                                                                              ,"[UL_Sync]sp4g_hisr_ul_EVS.2-1 adjust diff_mod = %d with resync_info.TX_period = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_2_1_INFO2                                                                             ,"[UL_Sync]sp4g_hisr_ul_EVS.2-1 diff = %d  diff_mod = %d tx_period_min = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_2_2_INFO                                                                              ,"[UL_Sync]sp4g_hisr_ul_EVS.2-2 adjust diff_mod = %d with DRIFT_DSP2MCU_RESET = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_2_2_INFO2                                                                             ,"[UL_Sync]sp4g_hisr_ul_EVS.2-2 adjust diff_mod2 = %d with DRIFT_DSP2MCU_DSP_FINE_TUNE = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_2_INFO                                                                                ,"[UL_Sync]sp4g_hisr_ul_EVS.2 time_emac_2_ulhisr = %d sp4g->time2nextULHISR = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_3                                                                                     ,"[UL_Sync]sp4g_hisr_ul_EVS.3 t_req_resync = %d ctime = %d tdiff_req_resync = %d, ul_req_resync = %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_4                                                                                     ,"[UL_Sync]sp4g_hisr_ul_EVS.4 %d %d %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_5                                                                                     ,"[UL_Sync]sp4g_hisr_ul_EVS.5 UL sync start")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_6                                                                                     ,"[UL_Sync]sp4g_hisr_ul_EVS.6 UL sync start")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_7                                                                                     ,"[UL_Sync]sp4g_hisr_ul_EVS.7 %d %d %d %d")
   TRC_MSG(SP4G_UL_SYNC_SP4G_HISR_UL_EVS_8                                                                                     ,"[UL_Sync]sp4g_hisr_ul_EVS.8 UL sync start")

   //SP4G EVS
   TRC_MSG(SP4G_EVS_DECODER_PREPARE_PARAMETER                                                                                  ,"EVS_decoder_prepare_parameter: EVS_network_request_bw=%d, EVS_capability_bw=%d, EVS_PCM_bw=%d")
   TRC_MSG(SP4G_EVS_DECODER_PREPARE_PARAMETER2                                                                                 ,"EVS_decoder_prepare_parameter: EVS_HBLen=%d, EVS_BFI=%d")
   TRC_MSG(SP4G_EVS_DECODER_CLEAN                                                                                              ,"EVS_decoder_clean leave")
   TRC_MSG(SP4G_EVS_ENCODER_PREPARE_PARAMETER1                                                                                 ,"EVS_encoder_prepare_parameter1: EVS_network_request_bw=%d, EVS_capability_bw=%d, EVS_PCM_bw=%d")
   TRC_MSG(SP4G_EVS_ENCODER_PREPARE_PARAMETER2                                                                                 ,"EVS_encoder_prepare_parameter2: codec=%MSP4G_Codec(0x%x), DTX=%d, EVS_CA_Par.enable=%d")
   TRC_MSG(SP4G_UL_EVENT_EVS1                                                                                                  ,"UL_Event_EVS")
   TRC_MSG(SP4G_UL_EVENT_EVS2                                                                                                  ,"UL_Event_EVS duration EVS_ENC_start_time:  %x")
   TRC_MSG(SP4G_UL_EVENT_EVS3                                                                                                  ,"UL_Event_EVS duration EVS_ENC_end_time:    %x")
   TRC_MSG(SP4G_UL_EVENT_EVS4                                                                                                  ,"UL_Event_EVS duration of HISR: %d")
   TRC_MSG(SP4G_UL_EVENT_EVS5                                                                                                  ,"UL_Event_EVS duration of HISR to encoder: %d")
   TRC_MSG(SP4G_UL_EVENT_EVS6                                                                                                  ,"UL_Event_EVS duration of encoder fail: %d")
   TRC_MSG(SP4G_UL_EVENT_EVS7                                                                                                  ,"UL_Event_EVS duration of encoder OK: %d")
   TRC_MSG(SP4G_UL_EVENT_EVS_ASSERT_BW                                                                                         ,"UL_Event_EVS EVS_EncPar.EVS_PCM_bw=%x")
   TRC_MSG(SP4G_UL_EVENT_EVS_ASSERT_SIZE                                                                                       ,"UL_Event_EVS PCM buffer is not enough: RB_size=%d, codec_request_size=%d")
   TRC_MSG(SP4G_HISR_UL_EVS                                                                                                    ,"UL_Event_EVS duration EVS_HISR_start")
   TRC_MSG(SP4G_HISR_UL_EVS_PCM_SIZE                                                                                           ,"sp4g_hisr_ul_EVS FD216 UL PCM size=%d, EVS_pcm_ul_rb_buf size=%d")
   TRC_MSG(SP4G_HISR_UL_EVS_DROP_PCM                                                                                           ,"sp4g_hisr_ul_EVS drop EVS_pcm_ul_rb_buf PCM data")
   TRC_MSG(SP4G_HISR_UL_EVS_ENC_DONE                                                                                           ,"sp4g_hisr_ul_EVS encoder done")
   TRC_MSG(SP4G_HISR_UL_EVS_ASSERT_ID                                                                                          ,"sp4g_hisr_ul_EVS encoder EVS codec ID is wrong: 0x%x")
   TRC_MSG(SP4G_HISR_UL_EVS_PROCESS_EVS_HB                                                                                     ,"sp4g_hisr_ul_EVS process EVS HB")
   TRC_MSG(SP4G_HISR_UL_EVS_BIT_LEN                                                                                            ,"sp4g_hisr_ul_EVS EVS HB bit_len: %d")
   TRC_MSG(SP4G_HISR_UL_EVS_PROCESS_AWB_HB                                                                                     ,"sp4g_hisr_ul_EVS process AWB HB")
   TRC_MSG(SP4G_HISR_UL_EVS_PROCESS_AWB_HB_LEN                                                                                 ,"sp4g_hisr_ul_EVS AWB HB byte len: %d")
   TRC_MSG(SP4G_HISR_UL_EVS_AWB_INVALID_CODEC_RATE                                                                             ,"sp4g_hisr_ul_EVS AWB invalid codec rate: 0x%x")
   TRC_MSG(SP4G_HISR_UL_EVS_ENC_NOT_FINISH                                                                                     ,"sp4g_hisr_ul_EVS encoder do not finish")
   TRC_MSG(SP4G_HISR_UL_EVS_ERROR                                                                                              ,"sp4g_hisr_ul_EVS ERROR")
   TRC_MSG(SP4G_HISR_UL_EVS_DATA                                                                                               ,"sp4g_hisr_ul_EVS DATA")
   TRC_MSG(SP4G_HISR_UL_EVS_MUTE                                                                                               ,"sp4g_hisr_ul_EVS MUTE")
   TRC_MSG(SP4G_HISR_UL_EVS_NON                                                                                                ,"sp4g_hisr_ul_EVS NON")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME                                                                                          ,"SP4G_UL_EVS_GetSpeechFrame")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME_EVS_HB_UL_RB_BUF_FREE_SPACE                                                              ,"SP4G_UL_EVS_GetSpeechFrame EVS_HB_ul_rb_buf free space=%d")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME_HEADER_INFO                                                                              ,"SP4G_UL_EVS_GetSpeechFrame header ID=%x codec=%MSP4G_Codec(0x%x) byte_len=%d bit_len=%d")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME_EVS_HB_UL_RB_BUF_EMPTY                                                                   ,"SP4G_UL_EVS_GetSpeechFrame EVS_HB_ul_rb_buf is empty")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME_INFO                                                                                     ,"SP4G_UL_EVS_GetSpeechFrame codec=%MSP4G_Codec(0x%x) bit_len=%d")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME_MISMATCH_CODEC                                                                           ,"SP4G_UL_EVS_GetSpeechFrame Mismatch codec %x %x")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME_INVALID_CODEC                                                                            ,"SP4G_UL_EVS_GetSpeechFrame invalid ul_codec_mode: %x")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME_BYTE_ALIGN_3RAB                                                                          ,"SP4GHSPA_UL_EVS_GetSpeechFrame byte align 3 R.A.B.")
   TRC_MSG(SP4G_UL_EVS_GETSPEECHFRAME_MERGE_3RAB_TO_IF1                                                                        ,"SP4GHSPA_UL_EVS_GetSpeechFrame merge 3 R.A.B. to IF1")
   TRC_MSG(SP4G_DL_EVS_PUTSPEECHFRAME_REORDERAWB_ENTER                                                                         ,"SP4G_DL_EVS_PutSpeechFrame_ReorderAWB enter")
   TRC_MSG(SP4GHSPA_DL_EVS_PUTSPEECHFRAME_PUTEVSFRAME                                                                          ,"PSR_PutEVSFrame")
   TRC_MSG(SP4GHSPA_DL_EVS_PUTSPEECHFRAME_PUTEVSFRAME_INFO                                                                     ,"PSR_PutEVSFrame: CFN=%x, frame_type=%x, encodebits=%x")
   TRC_MSG(SP4GHSPA_DL_EVS_PUTSPEECHFRAME_UL_SYNC_1                                                                            ,"[UL_Sync]SP4GHSPA_DL_EVS_PutSpeechFrame.1 ul_request_resync = %d sp4g_reset_flag=%d ctime = %d")
   TRC_MSG(SP4GHSPA_DL_EVS_PUTSPEECHFRAME_UL_SYNC_2_1                                                                          ,"[UL_Sync]SP4GHSPA_DL_EVS_PutSpeechFrame.2-1 forced no_data")
   TRC_MSG(SP4GHSPA_DL_EVS_PUTSPEECHFRAME_UL_SYNC_2_2                                                                          ,"[UL_Sync]SP4GHSPA_DL_EVS_PutSpeechFrame.2-2 forced no_data")
   TRC_MSG(SP4G_PSR_UL_EVS_GETSPEECHFRAME                                                                                      ,"SP4G_PSR_UL_EVS_GetSpeechFrame")
   TRC_MSG(SP4G_PSR_DL_EVS_PUTSPEECHFRAME                                                                                      ,"SP4G_PSR_DL_EVS_PutSpeechFrame")
   TRC_MSG(SP4G_PSR_DL_EVS_PUTSPEECHFRAME_RETURN                                                                               ,"SP4G_PSR_DL_EVS_PutSpeechFrame: now is not EVS codec, skip this data flow.")
   TRC_MSG(SP4G_PSR_DL_EVS_PUTSPEECHFRAME_RETURN2                                                                              ,"SP4G_PSR_DL_EVS_PutSpeechFrame receive NULL data pointer, modify frame_type %x to %x")
   TRC_MSG(SP4G_PSR_DL_EVS_PUTSPEECHFRAME_DATA                                                                                 ,"SP4G_PSR_DL_EVS_PutSpeechFrame: codec=%MSP4G_Codec(0x%x), encodebits=%02x %02x %02x %02x")
   TRC_MSG(SP4G_PSR_UL_SETFRAMETYPE1                                                                                           ,"SP4G_PSR_UL_SetFrameType with codec=%x, L1SP_GetState()=%d, is_g_codec=%x, is_EVS=%x")
   TRC_MSG(SP4G_PSR_DL_AMR_PUTSPEECHFRAME_RETURN                                                                               ,"SP4G_PSR_DL_AMR_PutSpeechFrame: now is EVS codec, skip this data flow.")

   //SP_4G Silence_Detection
   TRC_MSG(SILENCE_DETECTION_SET_ULFRAMETYPE                                                                                   ,"Silence_Detection_set_ULFrameType %d, %d")
   TRC_MSG(SILENCE_DETECTION_SET_DLFRAMETYPE                                                                                   ,"Silence_Detection_set_DLFrameType %d, %d")
   TRC_MSG(SILENCE_DETECTION_GET_STATUS0                                                                                       ,"Silence_Detection_get_status 0")
   TRC_MSG(SILENCE_DETECTION_GET_STATUS1                                                                                       ,"Silence_Detection_get_status 1")
   TRC_MSG(SILENCE_DETECTION_GET_STATUS2                                                                                       ,"Silence_Detection_get_status 2")
   TRC_MSG(SILENCE_DETECTION_GET_STATUS3                                                                                       ,"Silence_Detection_get_status 3")
   TRC_MSG(SILENCE_DETECTION_GET_STATUS4                                                                                       ,"Silence_Detection_get_status 4")
   TRC_MSG(SILENCE_DETECTION_GET_STATUS_INFO                                                                                   ,"ilence_Detection_get_status %d, %d, %d, %d")

   //SP_CC   
   TRC_MSG(SP_CC_L2P_Hdler                                                        ,"[SP_CC]SP_L2P_Hdlr  %x %x %x" )
   TRC_MSG(SP_CC_L2P_Hdler_Err                                                    ,"[SP_CC]SP_L2P_Hdlr skip command: %x" )   
   TRC_MSG(SP_CC_EVENT_HANDLER_ENTER                                              ,"[SP_CC][event_handler] Enter event_id=%d param1=%d param2=%d")
   TRC_MSG(SP_CC_EVENT_HANDLER_LEAVE                                              ,"[SP_CC][event_handler] Leave")
   TRC_MSG(SP_CC_INVOKELCORE                                                      ,"[SP_CC]InvokeLCoreFunction %d")   
   TRC_MSG(SP_CC_INVOKELCORE_INFO                                                 ,"[SP_CC]InvokeLCoreFunction %d %d %x")
   TRC_MSG(SP_CC_MSG_ID_AUDIO_L2P_SP3G_LOG_L1_INFO                                ,"[SP_CC]MSG_ID_AUDIO_L2P_SP3G_LOG_L1_INFO %x %x %x %x %x")
   TRC_MSG(SP_CC_SP_L2P_HANDLER_SKIP_COMMAND                                      ,"[SP_CC]SP_L2P_Handler skip command: %x")
      
   //SP DRV
   TRC_MSG(SP_CHANGERAT_MODE                               ,"ChangeRAT_Mode %d %d %d")
   TRC_MSG(SP_L4C_SETEVENT_ENTER                           ,"[SP_L4C_SetEvent] Enter")
   TRC_MSG(SP_L4C_SETEVENT_LEAVE                           ,"[SP_L4C_SetEvent] Leave")
   TRC_MSG(SP_M2M_HANDLER_SKIP_COMMAND                     ,"SP_M2M_Handler skip command: %x")
   TRC_MSG(L1SP_SET_ISSTANDBYMODE                          ,"L1SP_Set_isStandByMode: %d")
   TRC_MSG(SP_L4C_SKIP_NETWORKNOTIFICATION                 ,"[SP_L4C_SetEvent] SKIP networknotification")
   TRC_MSG(SP_EM_UPDATE_CODEC                              ,"[SP_updateEmCodec] isEmCodecNotifyOff=%d, updateUL(%d)/updateDL(%d), voc=%d, l1sp.state=%d")
   
   //SP ENHANCE
   TRC_MSG(SPE_SETSPEECHENHANCEMENT_C_PARAM                                               ,"[SPE]SetSpeechEnhancement,c_param 0~47")
   TRC_MSG(SPE_SETSPEECHENHANCEMENT_M_PARAM                                               ,"[SPE]SetSpeechEnhancement,m_param 0~47")
   TRC_MSG(SPE_SETSPEECHENHANCEMENT_M_PARAM_WB                                            ,"[SPE]SetSpeechEnhancement,m_param_wb 0~47")
   TRC_MSG(SPE_SETSPEECHENHANCEMENT1                                                      ,"[SPE]SetSpeechEnhancement, SAL_ENH_Dynamic_State_Set(SAL_ENH_DYN_DDL_SET) done  ")
   TRC_MSG(SPE_SETSPEECHENHANCEMENT2                                                      ,"[SPE]SetSpeechEnhancement, SPE_WaitSPEDynready(SAL_ENH_DYN_DDL_SET) done  ")
   TRC_MSG(SPE_SETSPEECHENHANCEMENT3                                                      ,"[SPE]SetSpeechEnhancement, SAL_ENH_Dynamic_State_Set  ")
   TRC_MSG(SPE_SETSPEECHENHANCEMENT4                                                      ,"[SPE]SetSpeechEnhancement, SAL_ENH_Dynamic_State_Set done ")
   TRC_MSG(SPE_SETSPEECHENHANCEMENT_SPE_WAITSPEDYNREADY_DONE                              ,"[SPE]SetSpeechEnhancement, SPE_WaitSPEDynready done ")
   TRC_MSG(SPE_SETDYNAMICPARTOMD_NOT_FIND                                                 ,"[SPE]SetDynamicPartoMD can't find the ID number: %x")                          
   TRC_MSG(SPE_SETDYNAMIC_SM                                                              ,"[SPE]SPE_SetDynamicStatemachine pos=%d")
   
   //SPC
   TRC_MSG(SPC_NOTIFY_NETWORK_STATUS                         ,"[SPC]spc_notify_network_status %d %d")
   TRC_MSG(SPC_NOTIFY_NETWORK_STATUS_SKIP                    ,"[SPC]spc_notify_network_status skip %d")
   TRC_MSG(SPC_PRINTS                                        ,"[SPC]prints: %x, %d, %x, %d")
   TRC_MSG(SPC_AUDIOTASK_WAIT_EL1_RF_INIT                    ,"[SPC]AudioTask Wait EL1 RF Init for %d tick(s). ")
   TRC_MSG(SPC_EPOF_SPC_FORCEENDALLAPP_NOTIFY_AP             ,"[SPC] [EPOF]Spc_ForceEndAllApp notify AP")
   TRC_MSG(SPC_SPE_RECEIVEDYNAMICPARAMETER,                  " %MAUD_SPC_DYNAMIC_PARAM_MAGICNUM_T(size=%d), comeFrom:%d")
   TRC_MSG(SPC_SPE_DMNR_HEADER,                              " [SPC][SPE]DMNR Header Check : %x")
   // TRC_MSG(SPC_SPE_RECEIVEDYNAMICPARAMETER1               ,"[SPC][SPE]spc_ReceiveDynamicParameter,magic num: Vol_de_speech_unit")
   TRC_MSG(SPC_SPE_RECEIVEDYNAMICPARAMETER2               ,"[SPC][SPE]spc_ReceiveDynamicParameter,Mode=%x,SpeechIndex=%x,Version=%x")
   // TRC_MSG(SPC_SPE_RECEIVEDYNAMICPARAMETER3               ,"[SPC][SPE]spc_ReceiveDynamicParameter,magic num: Vol_in_general_unit")
   // TRC_MSG(SPC_SPE_RECEIVEDYNAMICPARAMETER4               ,"[SPC][SPE]spc_ReceiveDynamicParameter,magic num: Vol_in_DMNR")             
   // TRC_MSG(SPC_SPE_RECEIVEDYNAMICPARAMETER5               ,"[SPC][SPE]spc_ReceiveDynamicParameter,magic num: Vol_in_MagiClarity")  
   // TRC_MSG(SPC_SPE_RECEIVEDYNAMICPARAMETER6               ,"[SPC][SPE]spc_ReceiveDynamicParameter,magic num: Vol_in_echoRefforUsbAudio")  
   TRC_MSG(SPC_SPE_CHECK_SPEECH_PAR_HEADER_FORMAT            ,"[SPC][SPE]Ceheck speech psr. header format,Data_Header=%x,Network=%x")  
   TRC_MSG(SPC_SPE_CHECK_NB_MODE_PAR			             ,"[SPC][SPE]Check NB mode par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_NB_FIR_IN_PAR			             ,"[SPC][SPE]Check NB FIR in par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_NB_FIR_OUT_PAR			             ,"[SPC][SPE]Check NB FIR out par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_NB_IIR_IN_PAR			             ,"[SPC][SPE]Check NB IIR in par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_NB_IIR_OUT_PAR			             ,"[SPC][SPE]Check NB IIR out  par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_NB_MIC1_IIR_PAR			         ,"[SPC][SPE]Check NB MIC1 IIR par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_NB_MIC2_IIR_PAR			         ,"[SPC][SPE]Check NB MIC2 IIRpar [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_WB_MODE_PAR			             ,"[SPC][SPE]Check WB mode par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_WB_FIR_IN_PAR			             ,"[SPC][SPE]Check WB FIR in par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_WB_FIR_OUT_PAR			             ,"[SPC][SPE]Check WB FIR out par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_WB_IIR_IN_PAR			             ,"[SPC][SPE]Check WB IIR in par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_WB_IIR_OUT_PAR			             ,"[SPC][SPE]Check WB IIR out  par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_WB_MIC1_IIR_PAR			         ,"[SPC][SPE]Check WB MIC1 IIR par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_WB_MIC2_IIR_PAR			         ,"[SPC][SPE]Check WB MIC2 IIRpar [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_SWB_MODE_PAR			             ,"[SPC][SPE]Check SWB mode par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_SWB_FIR_IN_PAR			             ,"[SPC][SPE]Check SWB FIR in par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_SWB_FIR_OUT_PAR			         ,"[SPC][SPE]Check SWB FIR out par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_SWB_IIR_IN_PAR			             ,"[SPC][SPE]Check SWB IIR in par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_SWB_IIR_OUT_PAR			         ,"[SPC][SPE]Check SWB IIR out  par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_SWB_MIC1_IIR_PAR			         ,"[SPC][SPE]Check SWB MIC1 IIR par [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_CHECK_SWB_MIC2_IIR_PAR			         ,"[SPC][SPE]Check SWB MIC2 IIRpar [%x]: 0x%x,0x%x,0x%x,0x%x,0x%x ")
   TRC_MSG(SPC_SPE_ASSERT_CHECK			                     ,"[SPC][SPE]ASSERT!!, Par0:0x%x,Par1:0x%x,Par3:0x%x")
   TRC_MSG(SPC_CUST_DUMP_DROP                             ,"[SPC][cust dump]drop a frame of dump")
   TRC_MSG(SPE_DSP_CHECK_NB_FIR_PAR			                 ,"[SPE]Check FIR NB IN/OUT par, FIR NB IN[0]= 0x%x,[1]= 0x%x, FIR OUT PAR[0]=0x%x,[1]= 0x%x")
   TRC_MSG(SPE_DSP_CHECK_WB_FIR_PAR			                 ,"[SPE]Check FIR WB IN/OUT par, FIR WB IN[0]= 0x%x,[1]= 0x%x, FIR OUT PAR[0]=0x%x,[1]= 0x%x")
   TRC_MSG(SPE_DSP_CHECK_SWB_FIR_PAR			             ,"[SPE]Check FIR SWB IN/OUT par, FIR SWB IN[0]= 0x%x,[1]= 0x%x, FIR OUT PAR[0]=0x%x,[1]= 0x%x")

   //TONE DRV
   TRC_MSG(DTMF_DSP_PLAYOFF_1                    ,"[TONEDRV][dtmf_dsp_PlayOff] 1")                                                         
   TRC_MSG(DTMF_DSP_PLAYOFF_2                    ,"[TONEDRV][dtmf_dsp_PlayOff] 2")                                                         
   TRC_MSG(DTMF_DSP_PLAYOFF_ENTER                ,"[TONEDRV][dtmf_dsp_PlayOff] Enter")                                                     
   TRC_MSG(DTMF_DSP_PLAYOFF_LEAVE                ,"[TONEDRV][dtmf_dsp_PlayOff] Leave")                                                     
   TRC_MSG(DTMF_DSP_PLAYON_1                     ,"[TONEDRV][dtmf_dsp_PlayOn] 1")                                                          
   TRC_MSG(DTMF_DSP_PLAYON_2                     ,"[TONEDRV][dtmf_dsp_PlayOn] 2")                                                          
   TRC_MSG(DTMF_DSP_PLAYON_ENTER                 ,"[TONEDRV][dtmf_dsp_PlayOn] Enter")                                                      
   TRC_MSG(DTMF_DSP_PLAYON_LEAVE                 ,"[TONEDRV][dtmf_dsp_PlayOn] Leave")                                                      
   TRC_MSG(DTMF_DSP_PLAY_ENTER                   ,"[TONEDRV][DTMF_DSP_Play] Enter")                                                        
   TRC_MSG(DTMF_DSP_PLAY_LEAVE                   ,"[TONEDRV][DTMF_DSP_Play] Leave")                                                        
   TRC_MSG(DTMF_DSP_START_ENTER                  ,"[TONEDRV][dtmf_dsp_Start] Enter")                                                       
   TRC_MSG(DTMF_DSP_START_LEAVE                  ,"[TONEDRV][dtmf_dsp_Start] Leave")         
             
   //Tone
   TRC_MSG( TONESTOP_FLUSHQUEUE1, "[TONE]toneStop_FlushQueue_1 %x %x")
   TRC_MSG( TONESTOP_FLUSHQUEUE2, "[TONE]toneStop_FlushQueue_2 %x %x")
   TRC_MSG( TONESTOP1,            "[TONE]toneStop1 return")
   TRC_MSG( TONESTOP2,            "[TONE]toneStop2 %x %x")
   TRC_MSG( TONEMUTE,             "[TONE]toneMute %x %x")
   TRC_MSG( TONEPLAY,             "[TONE]TONE_Play[%d]")
   TRC_MSG( TONESTOP,             "[TONE]TONE_Stop")
   TRC_MSG( TONESTOPANDWAIT1,     "[TONE]TONE_StopAndWait_1")
   TRC_MSG( TONESTOPANDWAIT2,     "[TONE]TONE_StopAndWait_2")
   TRC_MSG( KTSTOPFLUSHQUEUE1,    "[KT]ktStop_FlushQueue_1 %x")
   TRC_MSG( KTSTOPFLUSHQUEUE2,    "[KT]ktStop_FlushQueue_2 %x")
   TRC_MSG( KTSTOP1,              "[KT]ktStop_1 return")
   TRC_MSG( KTSTOP2,              "[KT]ktStop_2 %x")
   TRC_MSG( KTPLAY,               "[KT]KT_Play[%d]")
   TRC_MSG( KTSTOP,               "[KT]KT_Stop")
   TRC_MSG( KTSTOPANDWAIT1,       "[KT]KT_StopAndWait_1")
   TRC_MSG( KTSTOPANDWAIT2,       "[KT]KT_StopAndWait_2")

   // L1AUDIO
   TRC_MSG(L1AUDIO_READ_BYTE, "Read %d bytes from media buffer")

   // L1Audio MD2G
   TRC_MSG(L1AUDIO_MD2G_PWR_CTRL, "MD2G PWR CTRL, audioid= %d, flag = %d")
   TRC_MSG(L1AUDIO_MD2G_PWR_CTRL_DONE, "MD2G PWR CTRL DONE, audioid= %d, flag = %d")

   TRC_MSG(L1AUDIO_SETFLAG_A, "[AUDMD2G] L1Audio_SetFlag , audioid= %d, dspUser = %d")
   TRC_MSG(L1AUDIO_CLEARFLAG_A, "[AUDMD2G] L1Audio_ClearFlag, audioid= %d, dspUser = %d")
	TRC_MSG(L1AUDIO_SETFLAG_MD2G_A, "[AUDMD2G] L1Audio_SetFlag_MD2G , audioid= %d, dspUser = %d")
	TRC_MSG(L1AUDIO_CLEARFLAG_MD2G_A,"[AUDMD2G] L1Audio_ClearFlag_MD2G, audioid= %d, dspUser = %d")


   // L1SP
   TRC_MSG(L1SP_PHONE_CALL, "[PHONECALL]pos=%d, %d, %d")
   TRC_MSG(L1SP_MODE_VALUE, "[PHONECALL]param value: m0=%d, m1=%d, m2=%d, m3=%d, m4=%d, m5=%d, m6=%d, m7=%d, m8=%d, m9=%d, m10=%d, m11=%d, m12=%d, m13=%d, m14=%d, m15=%d")
   TRC_MSG(L1SP_COMMON_PARAM_VALUE, "[PHONECALL]Common Param value: c0=%d, c1=%d, c2=%d, c3=%d, c4=%d, c5=%d, c6=%d, c7=%d, c8=%d, c9=%d, c10=%d, c11=%d")
   TRC_MSG(SP_DEV_MODE_SETTING, "[SP_devInfo] before=%d, after=%d, beforeSr=%d, aferSr=%d")
   TRC_MSG(SP_EXT_DEV_SETTING, "[SP_extDevInfo] dev=%d, extDev=%d, echoRefDelay=%d, micDelay=%d")
   // TRC_MSG(L1SP_SET_MODE, "L1SP set mode=%d, spk_lev=%d, mic_lev=%d")
   // TRC_MSG(L1SP_APPLY_MODE, "L1SP on=%d, mode=%d, spk_lev=%d, mic_lev=%d")
   TRC_MSG(L1SP_SPEECH_ENHANCEMENT, "L1SP turn on speech enhancement flag=0x%x, m0=%d, m1=%d, c0=%d, c1=%d")
   TRC_MSG(L1SP_SET_MIC_VOL, "L1SP Set Mic Vol %d, sph_par %d")
   TRC_MSG(L1SP_ADAPT_MIC_VOL, "L1SP Adapt Mic Vol %d")
   TRC_MSG(L1SP_INC_SPK_VOL, "L1SP DSP Inc Spk Vol to %d, report %d")
   TRC_MSG(L1SP_L4C_SEND_CODEC,   "L1SP L4C Send Codec codec=%x l4c_codec=%x")   
   TRC_MSG(L1SP_L4C_SEND_CODEC_SKIP,   "L1SP L4C Send Codec_Skip codec=%x ")   
   TRC_MSG(L1SP_L4C_SEND_CODEC_SKIP2,   "L1SP L4C Send Codec_Skip without SpeechOn ")   

   TRC_MSG(L1SP_L4C_EVENT,   "L1SP L4C Event %d mode=%d pre_mode=%d")
   TRC_MSG(L1SP_MUTE_CONTROL_STATUS,  "L1SP MuteControl(%x) apULmute=%x apDLmute=%x codec_mute=%x")
   TRC_MSG(L1SP_NOTIFY_NETWORK_STATUS      ,"[L1SP]l1sp_notify_network_status %d ")
   TRC_MSG(SP_M2M_HANDLER                  ,"[L1SP]SP_M2M_HANDLER %d ")
   
   TRC_MSG(DACA_EXCEPTION,    "[DATACARD]Expection %d")
   TRC_MSG(DACA_OPEN_PORT,     "[DATACARD]mode=%d port %d")
   TRC_MSG(DACA_GET_DATA,      "[DATACARD]Audl Get %d Bytes from mode=%d, ori req %d")
   TRC_MSG(DACA_PUT_DATA,      "[DATACARD]Audl Put %d Bytes to mode=%d")
   TRC_MSG(DACA_BUFFER_IDX,    "[DATACARD]ss_buf_idx %d")	 	 
   TRC_MSG(DACA_PLUGIN,        "[DATACARD]PlugIn mode=%d")	 
   TRC_MSG(DACA_STRM_ENABLE,   "[DATACARD]Enable mode=%d")	
   TRC_MSG(DACA_STRM_DISABLE,  "[DATACARD]Disable mode=%d")	
	
   TRC_MSG(DACA_ENTER_REQUEST_EXCHANGE_DL_DATA,  "[DataCard]##l1audio Enter MSG_SAC2L1AUDIO_SPEECH_DATACARD_REQUEST_EXCHANGE_DL_DATA is_strmOn=%d dl_ready=%d") 
   TRC_MSG(DACA_ENTER_REQUEST_EXCHANGE_UL_DATA,  "[DataCard]##l1audio Enter MSG_SAC2L1AUDIO_SPEECH_DATACARD_REQUEST_EXCHANGE_UL_DATA is_strmOn=%d ul_ready=%d")
   TRC_MSG(DACA_UL_HAS_NO_DATA,                  "[DataCard]##l1audio UL has no data")
   TRC_MSG(DACA_UL_HAS_DATA,                     "[DataCard]##l1audio UL has data")
   TRC_MSG(DACA_LEAVE_REQUEST_EXCHANGE_UL_DATA,  "[DataCard]##l1audio Leave MSG_SAC2L1AUDIO_SPEECH_DATACARD_REQUEST_EXCHANGE_UL_DATA")
   TRC_MSG(DACA_ENTER_STRMONHANDLER,             "[DataCard]##spStrmOnHandler")
   TRC_MSG(DACA_ENTER_STRMOFFHANDLER,            "[DataCard]##spStrmOffHandler")
   TRC_MSG(DACA_ENTER_GETDATA1,                  "[DataCard]##Enter GetData1 is_strmOn=%d ul_ready=%d")   
   TRC_MSG(DACA_ENTER_GETDATA2,                  "[DataCard]##Enter GetData2")
   TRC_MSG(DACA_ENTER_PUTDATA1,                  "[DataCard]##Enter PutData1 is_strmOn=%d dl_ready=%d") 
   TRC_MSG(DACA_GET_SUFFICIENT_DATA,             "[DataCard]##GetData Data sufficient")
   TRC_MSG(DACA_GET_INSUFFICIENT_DATA,           "[DataCard]##GetData Data Insufficient")	
   TRC_MSG(DACA_LEAVE_GETDATA,                   "[DataCard]##Leave GetData")   
   
   
	TRC_MSG(L1SP_USELESS_SET, "SPH[ENH] %d, %d, %d, %d")
	TRC_MSG(SPC_ILLEGAL_SPC_APP_BEHAVIOR_CHECK, "[SPC] Illegle app control to turn on %MMSG_SPC_APP_T when (%d)%MMSG_SPC_APP_T, gSpc.spcAppUsage=%x")
	TRC_MSG(SPC_ILLEGAL_SPC_APP_BEHAVIOR, "[SPC] Illegle app control with (%d)%MMSG_SPC_APP_T, to On/Off=%d %MMSG_SPC_APP_T")
	TRC_MSG(SPC_APP_DATA_SEND_FAIL, "[SPC] (%d)%MMSG_SPC_APP_T app send data fail at pos %d") 
	TRC_MSG(SPC_M2A_DROP, "[SPC] Drop app (%d)%MMSG_SPC_APP_T data send, %d")
	TRC_MSG(SPC_INVALID_MSG, "[SPC]INVALID CCCI A2M MSG (%08X)")
	TRC_MSG(SPC_M2A_DONE, "[SPC] CCCI A2M %x done")
	TRC_MSG(SPC_SPEECH_ON,              "Spc_Speech_On %d")
	TRC_MSG(SPC_SPH_ON_MISMATCH_PAYLOAD_SIZE,        "Spc_Speech_On, ap&md payload size mismatch: apLen=%d, mdHeaderLen=%d, mdStructLen=%d")
	TRC_MSG(SPC_SPEECH_ON_PAYLOAD,     "Spc_Speech_On, app:%d, bt:%d, sr:%d, openDsp:%d(before:%d), paramPath:%d, shmValid:%d, paramSize:%d, idx:%d, devInfo:%d, muteMask=%x")
	TRC_MSG(SPC_SPEECH_OFF,             "Spc_Speech_Off")
	TRC_MSG(SPC_SET_DROP_UL_MUTE,       "spc_gain_UlMuteSet mute is not apply")
	TRC_MSG(SPC_SET_DROP_DL_MUTE,       "spc_gain_DlMuteSet mute is not apply")
	TRC_MSG(SPC_SET_DROP_UL_ENH_RESULT_MUTE,       "spc_gain_UlEnhResultMuteSet mute is not apply")
	TRC_MSG(SPC_SET_DROP_UL_SOURCE_MUTE,           "spc_gain_UlSourceMuteSet mute is not apply")
	TRC_MSG(SPC_SET_DROP_DL_CODEC_MUTE,           "spc_gain_DlMuteCodecSet mute is not apply")
	// TRC_MSG(SPC_SET_SPEECHMODE_ADAPT,   "Spc_SetSpeechEnhMode_Adaptation mode = %d")
	TRC_MSG(SPC_EM_DEFAULT_INIT,        "spc_EmInit, default used common=%d, wb=%d, dmnr=%d, lspkDmnr=%d")
	TRC_MSG(SPC_DROP_SET,               "[SPC] drop seting 0x%08X [(0x%04X)%MAUD_CCCI_MSG_T], data16 = 0x%04X, data32 = 0x%08X")
	TRC_MSG(SPC_EPOF_NOTIFY, "[SPC] Receive EPOF from L4C, application usage = %x")
	TRC_MSG(SPC_CODEC_NOTIFY_IN, "[SPC][Codec] enter spc_codecInfoNotify. orgCodec=%x, newCodec=%x")
	TRC_MSG(SPC_CODEC_NOTIFY_TO_AP, "[SPC][Codec] send AP Info codecInfo=\"%s\", codecOp=\"%s\"")
	TRC_MSG(SPC_CODEC_NOTIFY_UNKNOW, "[SPC][Codec] Unknow codec = %x, rr =%x, pos=%d")
	
	TRC_MSG(SPC_AC_LOOPBACK_INFO,                "[SPC AC Loopback]info enable=%d, flag=0x%x, delay=%d")
	TRC_MSG(SPC_AC_LOOPBACK_FROM_MIC,            "[SPC AC Loopback]FromMic %d %d %d %d")
   TRC_MSG(SPC_AC_LOOPBACK_SKIP_MIC,            "[SPC AC Loopback]Skip FromMic")
   TRC_MSG(SPC_AC_LOOPBACK_TO_SE,               "[SPC AC Loopback]ToSE %d %d %d %d")
   TRC_MSG(SPC_AC_LOOPBACK_FILL_SE,             "[SPC AC Loopback]FillSE")
   TRC_MSG(SPC_AC_LOOPBACK_FROM_SD,             "[SPC AC Loopback]FromSD %d %d %d %d")
   TRC_MSG(SPC_AC_LOOPBACK_SKIP_SD,             "[SPC AC Loopback]Skip FromSD")
   TRC_MSG(SPC_AC_LOOPBACK_TO_SPK,              "[SPC AC Loopback]ToSPK %d %d %d %d")
   TRC_MSG(SPC_AC_LOOPBACK_FILL_SPK,            "[SPC AC Loopback]FillSpk")
   TRC_MSG(SPC_AC_LOOPBACK_UL_DL_INDEX,         "[SPC AC Loopback]Dw, Dr, Uw, Ur %d %d %d %d")

	// TRC_MSG(SPC_NOTIFY_RF_INFO,                  "[SPC NOTIFY RF INFO]rf_info:%x 2g:%x 3g:%x 4g:%x")
	TRC_MSG(SPC_NOTIFY_NETWORK_STATUS_INFO,           "[SPC_NOTIFY_NETWORK_STATUS]tmp:%x isWB:%x RAT:%x")

   TRC_MSG(L1SP_SPE_CTRL_UPDATE, "L1SP Set Enhancement ctrol update,ENH ctrl=0x%x, enhPath=0x%x, Network info=0x%x")
   TRC_MSG(L1SP_SET_ENHANCEMENT_SUB_MASK, "L1SP Set Enhancement submask[%d]=%x")
   TRC_MSG(L1SP_ENHANCE_ON_OFF, "[SPE]L1SP turn enhance =%d, with state=%x")
   TRC_MSG(SPE_AGC_CONFIG_INFO, "[SPE]AGC turnOff/On/Other=%d, gain=0x%x, isEchoRefOn=%d, micInfo=0x%x, dspParam=0x%x, enhMasEchoRef=%d")
   TRC_MSG(L1SP_SET_ENH_FIR, "SPH[ENH] enhancement mode %d, enhance Index %d, inFIR Index %d, outFIR Index %d, updateMask %d to value %d")
   TRC_MSG(L1SP_CHANGE_ENH_MODE, "SPH[ENH] ChangeSpeechMode premode=%d, aftermode=%d, currentMode=%d")
   TRC_MSG(L1SP_WRITE_FIR, "SPH[ENH] Write FIR isWB=%d")
   TRC_MSG(L1SP_SET_MIC_GAIN_CONTROL,              "[MIC GAIN CONTROL]L1SP set mic gain control %x")
   TRC_MSG(L1SP_ADAPT_MIC_GAIN_CONTROL,            "[MIC GAIN CONTROL]L1SP adapt mic gain control %x")   
	TRC_MSG(L1SP_MUTE_DSP_UL_CODEC_CONTROL,         "[MUTE] AM_Mute_UL_Codec_Speech: %x")  
	TRC_MSG(L1SP_MUTE_DSP_UL_POS_EN_CONTROL,         "[MUTE] AM_Mute_UL_POS_EN_Speech: %x")  
	TRC_MSG(L1SP_MUTE_DSP_DL_TRAFFIC_CONTROL,         "[MUTE] AM_Mute_DL_Speech_Traffic: %x")  
	TRC_MSG(L1SP_MUTE_DSP_DL_8K_CONTROL,            "[MUTE] AM_Mute_DL_8k_Speech: %x")  	
	TRC_MSG(L1SP_MUTE_DSP_UL_ENH_RESULT_CONTROL, "[MUTE] mute dsp uplink enhancement result(inAM): %x")  
	TRC_MSG(L1SP_MUTE_DSP_UL_SOURCE_CONTROL,     "[MUTE] mute dsp uplink source(inAM): %x")  
	TRC_MSG(L1SP_MUTE_DSP_RAMP_CONTROL, "[MUTE RAMP] pos=%d, mute Point: %d, State: %d, Mute: %d, am state: %d")


// 3G speech
   TRC_MSG(SP3G_UL_HISR_SKIP, "SP3G UL_HISR SKIP %d")
   TRC_MSG(SP3G_CODEC_READY_SKIP, "SP3G Skip Callback of Codec_Ready  %d %d %d")
   TRC_MSG(SP3G_CODEC_CLOSE_SKIP, "SP3G Skip Callback of Codec_Close  %d %d %d")
   TRC_MSG(SP3G_CODEC_READY_OK, "SP3G OK Callback of Codec_Ready  %d")
   TRC_MSG(SP3G_CODEC_CLOSE_OK, "SP3G OK Callback of Codec_Close  %d")   
   TRC_MSG(SP3G_DL_PUT_SPEECH_FRAME_DEBUG, "SP3G DL return %d")
   TRC_MSG(SP3G_UL_PUT_SPEECH_FRAME_DEBUG, "SP3G UL return %d")
   TRC_MSG(L1D_RESYNC_UPDATE, "[SP3G L1D Resync]Update %d")
   TRC_MSG(L1D_RESYNC_RESET, "[SP3G L1D Resync]Reset")
   TRC_MSG(SP3G_L1D_Resync_Skip, "[SP3G L1D Resync] skip")
   TRC_MSG(SP3G_L1D_Resync, "[SP3G L1D Resync] %d offeset=%d")
   TRC_MSG(SP3G_DEBUG_UL_SETFRAMETYPE,"[DEBUG]SP3G_UL_SetFrameType%d %d %d ftype=%d")
   TRC_MSG(SP3G_DEBUG_UL_GETSPEECHFRAME,"Debug_UL_GetSpeechFrame %d")
   TRC_MSG(SP3G_SYNC,"SP3G_HISR 3g_sync=%x")
   TRC_MSG(SP3G_DEBUG_UL_BUFF,"#debug_ul_buff(6) %d ")
   TRC_MSG(SP3G_RAB_EST_0, "[PhoneCall3G] SP3G_Rab_Est state=%d ")
   TRC_MSG(SP3G_RAB_DEEST_0, "[PhoneCall3G] SP3G_Rab_Deest state=%d ")   
   TRC_MSG(SP3G_RAB_EST, "SP3G CSR notify RAB establish")
   TRC_MSG(SP3G_RAB_DEEST, "SP3G CSR notify RAB De-establish")
   TRC_MSG(SP3G_TX_SID_FIRST, "SP3G_HISR TX SID FISRT")
   TRC_MSG(SP3G_RX_FORCE_NO_DATA_WHEN_CHANGE_BAND, "SP3G_HISR RX Band Change,force speech frame to NO_DATA")
   TRC_MSG(SP3G_TX_SID_UPDATE, "SP3G_HISR TX SID UPDATE")
   TRC_MSG(SP3G_RX_SID_FIRST, "SP3G_HISR RX SID FISRT")
   TRC_MSG(SP3G_RX_SID_UPDATE, "SP3G_HISR RX SID UPDATE")
   TRC_MSG(SP3G_RX_NO_DATA, "SP3G_HISR RX GET NO DATA FRAME")
   TRC_MSG(SP3G_DTX_NO_DATA, "SP3G_HISR INSERT NO DATA")
   TRC_MSG(SP3G_BUFFER_STATUS, "SP3G_HISR DL r = %d, w = %d, num = %d, 1st byte = %x")
   TRC_MSG(SP3G_UL_DELAY, "SP3G UL delay %d")
   TRC_MSG(SP3G_REQUEST, "SP3G Request")
   TRC_MSG(SP3G_REQUEST_UL_FRAME_TYPE, "SP3G set UL frame type %Mem_csr_SpeechCodecType")
   TRC_MSG(SP3G_UL_GET_SPEECH_FRAME, "SP3G UL GetSpFrame")
   TRC_MSG(SP3G_UL_GET_SPEECH_FRAME_SKIP, "SP3G UL GetSpFrame %d")
   TRC_MSG(SP3G_DL_BUFFER_FINISH, "SP3G DL Buffering finished")
   TRC_MSG(SP3G_DL_PUT_SPEECH_FRAME, "SP3G DL sub_flow %d, frame_type %Mem_csr_SpeechCodecType, crc_status %d")
   TRC_MSG(SP3G_LOG_L1_INFO, "SP3G CFN=%x, l1info=%x, crc = %x, s_val =%x, %x, %x")
   TRC_MSG(SP3G_L1A_UPDATE_INFO, "SP3G Update Info bitmap %d, val %d")
   TRC_MSG(SP3G_INVALID_UL_CODEC_MODE, "SP3G invalid UL codec mode %d")
   TRC_MSG(SP3G_SET_DTX, "SP3G Set DTX %d")
   
   TRC_MSG(SP3G_UL_BIT_TRUE_DSP_F8, "SP3GHISR UL DSP len %d, %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP3G_UL_BIT_TRUE_DSP_N8, "SP3GHISR UL DSP %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP3G_TX_SPEECH_GOOD, "SP3G_HISR UL is TX_SPEECH_GOOD")
   TRC_MSG(SP3G_UL_NO_DATA, "SP3G_HISR UL is NO DATA")
   TRC_MSG(SP3G_UL_BIT_TRUE_F8, "SP3G_HISR=%d UL Type %Mem_csr_SpeechCodecType, Frm %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP3G_UL_BIT_TRUE_N13, "SP3G UL %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP3G_UL_BUFFER, "SP3GVT UL cnt=%d,r=%d,w=%d")
   TRC_MSG(SP3G_DL_BIT_TRUE, "SP3G_HISR DL Type %d, Frm %x %x %x %x %x")
   TRC_MSG(SP3G_DL_BIT_TRUE_TASK, "SP3G DL Frm %x %x %x %x %x")
   TRC_MSG(SP3G_DL_BIT_TRUE_DSP_F8, "SP3GHISR DL DSP len %d, %hx %hx %hx %hx %hx %hx %hx %hx") 
   TRC_MSG(SP3G_DL_BIT_TRUE_DSP_N8, "SP3GHISR DL DSP %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP3GVT_FAKE_NODATA, "SP3GVT Fake NoData")
   TRC_MSG(SP3G_DL_TIMING, "SP3G DL Timing %d")
   TRC_MSG(SP3G_UL_TIMING, "SP3G UL Timing %d")
   TRC_MSG(SP3G_D2M_UL_TIMING_MODIFY, "SP3G D2M UL Timing MODIFY: LISR_64us=%x, HISR_64us=%x, diff_us=%x")
   TRC_MSG(SP3G_D2M_UL_TIMING, "SP3G D2M UL Timing %d")
   TRC_MSG(SP3G_D2M_DL_TIMING, "SP3G D2M DL Timing %d")  
   TRC_MSG(SP3G_FORCE_NODATA_WHEN_RESYNC, "SP3G force one AMR_NO_DATA frame before resync")
   TRC_MSG(SP3G_UL_DSP_NOT_READY_WARNING_AND_FILL_SILENCE, "SP3G_HISR UL NOT READY, Force Using Silence Pattern")
   TRC_MSG(SP3G_FOUND_UL_SYNC_TIMING_ERROR, "SP3G found UL resync timing error")
   TRC_MSG(SP3G_FOUND_DL_SYNC_TIMING_ERROR, "SP3G found DL resync timing error")
   TRC_MSG(SP3G_SKIP_UL_REFRESH, "SP3G SKIP UL REFRESH ul_report=%d ul_codec_mode=%d")

 
   //CSoHS
   TRC_MSG(SP3G_HSPA_UL_GET_SPEECH_FRAME, "SP3GHSPA UL GetSpFrame type %Mem_csr_SpeechCodecType, len %d, %hx %hx")
   TRC_MSG(SP3G_HSPA_DL_PUT_SPEECH_FRAME, "SP3GHSPA DL PutSpFrame type %Mem_csr_SpeechCodecType, CFN %d, crc %d, %hx %hx")
   TRC_MSG(SP3G_HSPA_DL_MAX_CS_DELAY, "SP3GHSPA set Max CS delay %d")
   
   //VT
   TRC_MSG(SP3GVT_UL_GET_SPEECH_FRAME, "SP3GVT UL GetSpFrm, CurFrmCount %d")
   TRC_MSG(SP3GVT_UL_FRAME_INFO, "SP3GVT UL Frm len %d, first 3 byte %x %x %x")
   TRC_MSG(SP3GVT_DL_FRAME_INFO, "SP3GVT DL Frm len %d, first 3 byte %x %x %x")
   TRC_MSG(SP3GVT_DL_FRAME_ERROR, "SP3GVT DL FrmType Err Warning %d !!")
   TRC_MSG(SP3GVT_SET_DELAY, "SP3GVT SetDelay %d ms, about %d frame")

// 4G speech
   TRC_MSG(SP4G_UL_HISR_SKIP, "SP4G UL_HISR SKIP %d %d")
   TRC_MSG(SP4G_UL_HISR_SKIP_AMR, "SP4G UL_HISR SKIP AMR %d %d %d")
   TRC_MSG(SP4G_UL_SKIP_NOTIFY, "SP4G_UL_SKIP_NOTIFICATION_FOR_PSR")
   TRC_MSG(SP4G_UL_GETSPEECHFRAME, "SP4G_UL_GetSpeechFrame codec=%x *ptr1(%x)=%x *ptr2(%x)=%x")
   TRC_MSG(SP4G_DL_PUTSPEECHFRAME, "SP4G_DL_PutSpeechFrame codec=%x *ptr1(%x)=%x ptr2=ptr2")
   TRC_MSG(SP4G_RAB_EST, "SP4G CSR notify RAB establish id=%x codec=%MSP4G_Codec(0x%x)")
   TRC_MSG(SP4G_RAB_DEEST, "SP4G CSR notify RAB De-establish id=%d")
   TRC_MSG(SP4G_TX_SID_FIRST, "SP4G_HISR TX SID FISRT")
   TRC_MSG(SP4G_RX_FORCE_NO_DATA_WHEN_CHANGE_BAND, "SP4G_HISR RX Band Change,force speech frame to NO_DATA")
   TRC_MSG(SP4G_TX_SID_UPDATE, "SP4G_HISR TX SID UPDATE")
   TRC_MSG(SP4G_RX_SID_FIRST, "SP4G_HISR RX SID FISRT")
   TRC_MSG(SP4G_RX_SID_UPDATE, "SP4G_HISR RX SID UPDATE")
   TRC_MSG(SP4G_RX_NO_DATA, "SP4G_HISR RX GET NO DATA FRAME")
   TRC_MSG(SP4G_RX_LOST_DATA, "SP4G_HISR RX GET LOST DATA FRAME")
   
   TRC_MSG(SP4G_DTX_NO_DATA, "SP4G_HISR INSERT NO DATA")
   TRC_MSG(SP4G_BUFFER_STATUS, "SP4G_HISR DL r = %d, w = %d, num = %d, 1st byte = %x")
   TRC_MSG(SP4G_UL_DELAY, "SP4G UL delay %d")
   TRC_MSG(SP4G_REQUEST, "SP4G Request")
   TRC_MSG(SP4G_REQUEST_UL_FRAME_TYPE, "SP4G set UL frame type %MSP4G_Codec(0x%x)")
   TRC_MSG(SP4G_UL_GET_SPEECH_FRAME, "SP4G UL GetSpFrame")
   TRC_MSG(SP4G_DL_BUFFER_FINISH, "SP4G DL Buffering finished")
   TRC_MSG(SP4G_DL_PUT_SPEECH_FRAME, "SP4G DL sub_flow %d, frame_type %MSP4G_Codec(0x%x), crc_status %d")
   TRC_MSG(SP4G_LOG_L1_INFO, "SP4G CFN=%x, l1info=%x, crc = %x, s_val =%x, %x, %x")
   TRC_MSG(SP4G_L1A_UPDATE_INFO, "SP4G Update Info bitmap %d, val %d")
   TRC_MSG(SP4G_INVALID_UL_CODEC_MODE, "SP4G invalid UL codec mode %d")
   TRC_MSG(SP4G_SET_DTX, "SP4G Set DTX %d")
   
   TRC_MSG(SP4G_UL_BIT_TRUE_DSP_F8, "SP4GHISR UL DSP len %d, %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP4G_UL_BIT_TRUE_DSP_N8, "SP4GHISR UL DSP %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP4G_TX_SPEECH_GOOD, "SP4G_HISR UL is TX_SPEECH_GOOD")
   TRC_MSG(SP4G_UL_NO_DATA, "SP4G_HISR UL is NO DATA")
   TRC_MSG(SP4G_UL_BIT_TRUE_F8, "SP4G_HISR=%d UL Type 0x%x, Frm %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP4G_UL_BIT_TRUE_N13, "SP4G UL %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP4G_UL_BUFFER, "SP4GVT UL cnt=%d,r=%d,w=%d")
   TRC_MSG(SP4G_UL_BIT_TRUE, "SP4G_HISR UL Type 0x%x, Frm %x %x %x %x %x")
   TRC_MSG(SP4G_DL_BIT_TRUE, "SP4G_HISR DL Type 0x%x, Frm %x %x %x %x %x")
   TRC_MSG(SP4G_DL_BIT_TRUE_TASK, "SP4G DL Frm %x %x %x %x %x")
   TRC_MSG(SP4G_DL_BIT_TRUE_DSP_F8, "SP4GHISR DL DSP len %d, %hx %hx %hx %hx %hx %hx %hx %hx") 
   TRC_MSG(SP4G_DL_BIT_TRUE_DSP_N8, "SP4GHISR DL DSP %hx %hx %hx %hx %hx %hx %hx %hx")
   TRC_MSG(SP4GVT_FAKE_NODATA, "SP4GVT Fake NoData")
   TRC_MSG(SP4G_DL_TIMING, "SP4G DL Timing %d")
   TRC_MSG(SP4G_UL_TIMING, "SP4G UL Timing %d")
   TRC_MSG(SP4G_D2M_UL_TIMING, "SP4G D2M UL Timing %d")
   TRC_MSG(SP4G_D2M_DL_TIMING, "SP4G D2M DL Timing %d")
   TRC_MSG(SP4G_FORCE_NODATA_WHEN_RESYNC, "SP4G force one AMR_NO_DATA frame before resync")
   TRC_MSG(SP4G_UL_DSP_NOT_READY_WARNING_AND_FILL_SILENCE, "SP4G_HISR UL NOT READY, Force Using Silence Pattern")
   TRC_MSG(SP4G_FOUND_UL_SYNC_TIMING_ERROR, "SP4G found UL resync timing error")
   TRC_MSG(SP4G_FOUND_DL_SYNC_TIMING_ERROR, "SP4G found DL resync timing error")
 
   //4G 
   TRC_MSG(SP4G_HSPA_UL_GET_SPEECH_FRAME, "SP4GHSPA UL GetSpFrame type %MSP4G_Codec(0x%x), len %d, %hx %hx")
   TRC_MSG(SP4G_HSPA_DL_PUT_SPEECH_FRAME, "SP4GHSPA DL PutSpFrame type %MSP4G_Codec(0x%x), CFN %d, crc %d, %hx %hx")
   TRC_MSG(SP4G_HSPA_DL_MAX_CS_DELAY, "SP4GHSPA set Max CS delay %d")
              
   //VM
   TRC_MSG(VM_SENDVMDATA_INFO, "vm prints: %x, %d, %x, %d")
   // TRC_MSG(VM_CONTROL, "[VMREC] vm_con : %x")
   TRC_MSG(VM_SP3G_VM_L1T, "[VMREC] SP3G VM L1T %x")
   TRC_MSG(VM_REC_DEBUG_INFO, "[VMREC] VM_DEBUG_INFO = %x")
   TRC_MSG(VM_REC_HISR_VM_DATA_LOST, "[VMREC] hisr data lost with count=%d, pos = %d")
   TRC_MSG(VM_REC_HISR_PCM_DATA_LOST, "[VMREC] some vm's pcm data is missing, pos = %d")
   TRC_MSG(VM_HISR_LOCK_NOT_AVALIABLE, "[VMREC] vm lcok is not avaiable in pos = %d")

   TRC_MSG(VM_GFORM_INFO1                   ,"[vmFormatter_gseries] vm.control_1=%x")
   TRC_MSG(VM_GFORM_INFO2                   ,"[vmFormatter_gseries] vm.control_2=%x")
   TRC_MSG(VM_GFORM_ULSTREAM_ENTER          ,"[vmStoreGCodecULStream] Enter")
   TRC_MSG(VM_GFORM_ULSTREAM_INFO1          ,"[vmStoreGCodecULStream] u32TotalBufferSize=%d, vmGCodecULBufWritePos=%d, u16Stream2byteSize=%d, u16StreamSize=%d")
   TRC_MSG(VM_GFORM_ULSTREAM_INFO2          ,"[vmStoreGCodecULStream] data 2byte size is large than available buffer 2byte size, data 2byte size=%d, available buffer 2byte size=%d")
   TRC_MSG(VM_GFORM_ULSTREAM_INFO3          ,"[vmStoreGCodecULStream] data 2byte size is large than total buffer 2byte size, data 2byte size=%d, total buffer 2byte size=%d")
   TRC_MSG(VM_GFORM_ULSTREAM_EXIT           ,"[vmStoreGCodecULStream] Exit")
   TRC_MSG(VM_GFORM_DLSTREAM_ENTER          ,"[vmStoreGCodecDLStream] Enter")
   TRC_MSG(VM_GFORM_DLSTREAM_INFO1          ,"[vmStoreGCodecDLStream] u32TotalBufferSize=%d, vmGCodecDLBufWritePos=%d, u16Stream2byteSize=%d, u16StreamSize=%d")
   TRC_MSG(VM_GFORM_DLSTREAM_INFO2          ,"[vmStoreGCodecDLStream] data 2byte size is large than available buffer 2byte size, data 2byte size=%d, available buffer 2byte size=%d")
   TRC_MSG(VM_GFORM_DLSTREAM_INFO3          ,"[vmStoreGCodecDLStream] data 2byte size is large than total buffer 2byte size, data 2byte size=%d, total buffer 2byte size=%d")
   TRC_MSG(VM_GFORM_DLSTREAM_EXIT           ,"[vmStoreGCodecDLStream] Exit")
   TRC_MSG(VM_VMRECORDHISR_G_CODEC          ,"[vmrec]vmRecordHisr record 4G G-serial codec")
   TRC_MSG(VM_TCHPCMHISR_G_CODEC            ,"[vmrec]vmTchPcmRecordHisr record 4G G-serial codec")
   TRC_MSG(VM_TCHRECORDHISR_G_CODEC         ,"[vmrec]vmTchRecordHisr record 4G G-serial codec")
      
   //tone_loopback_Rec
   TRC_MSG(L1AUDIO_TONE_LOOPBACK_REC_CALLBACK_MODE, "TONE_LOOPBACK_REC: callback Mode=%d")
   TRC_MSG(L1AUDIO_TONE_LOOPBACK_REC_MODE, "TONE_LOOPBACK_REC: Mode=%d")  
 
   // CCCI Message
   TRC_MSG(SPCIO_INVALID_MSG, "INVALID SPCIO MSG ID(%08X), data (%08X) with reserved (%08X)")
   TRC_MSG(SPCIO_INVALID_MSG_BEFORE_QUEUE_READY, "Before queue ready, INVALID SPCIO MSG ID(%08X), data (%08X) with reserved (%08X)")
   
   //ddload
   TRC_MSG(L1AUDIO_DDLOAD_STATUS_FAIL, "[DDLoad]DSP Status Not Clear")
   TRC_MSG(L1AUDIO_DDLOAD_STATUS_SUCCESS, "[DDLoad]DDLoad success")
   TRC_MSG(L1AUDIO_DDLOAD_ID, "[DDLoad]DDLoad ID = %d")
   
   //eCall
   TRC_MSG(ECALL_IVS_DRV_CATCH_EVENT, "[eCall]IVS Driver Catch Event %d")
   TRC_MSG(ECALL_IVS_DRV_HLACK, "[eCall]IVS Driver HLACK. Expect %d, Received %d")
   TRC_MSG(ECALL_PSAP_DRV_CATCH_EVENT, "[eCall]PSAP Driver Catch Event %d")
   TRC_MSG(ECALL_PSAP_DRV_RECEIVE_MSD, "[eCall]PSAP Driver Received MSD")
   TRC_MSG(ECALL_PSAP_DRV_MSD_DATA, "[eCall]PSAP MSD %3d %3d %3d %3d %3d %3d %3d")
   TRC_MSG(ECALL_IVS_MODEM_SENDSTART, "[eCall]IVS SendStart received from control")
   TRC_MSG(ECALL_IVS_MODEM_SENDSTART_IGNORE, "[eCall]IVS SendStart received from control, ignored")
   TRC_MSG(ECALL_IVS_MODEM_RX_RESET, "[eCall]IVS reset receiver")
   TRC_MSG(ECALL_IVS_MODEM_TX_RESET, "[eCall]IVS reset transmitter")
   TRC_MSG(ECALL_IVS_MODEM_TX_RESET_MSD_PROVIDED, "[eCall]IVS reset transmitter (MSD provided)")
   TRC_MSG(ECALL_IVS_MODEM_SENDSTART_DUR_MSD_IGNORE, "[eCall]IVS SendStart during MSD transmission, ignored.")
   TRC_MSG(ECALL_IVS_MODEM_SENDING_SEND, "[eCall]IVS sending  SEND")
   TRC_MSG(ECALL_IVS_MODEM_FULL_RESET, "[eCall]IVS full reset (no sync detected)")
   TRC_MSG(ECALL_IVS_MODEM_IGNORING_HLACK, "[eCall]IVS ignoring additional HLACK (data: 0x0%X, metric: %3d)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_HLACK_FINISHED, "[eCall]IVS received HLACK (data: 0x0%X, metric: %3d), finished.")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_HLACK_WAITING, "[eCall]IVS received HLACK (data: 0x0%X, metric: %3d), waiting...")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_START_LOW_RELIABILITY, "[eCall]IVS received START !> ignoring message (reliability too low)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_START_TOO_OFTEN, "[eCall]IVS received START (metric: %3d) too often starting over...")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_START_STARTING, "[eCall]IVS received START (metric: %3d), starting...")
   TRC_MSG(ECALL_IVS_MODEM_FAST_MODULATOR, "[eCall]IVS fast modulator chosen (NACK count: %d)")
   TRC_MSG(ECALL_IVS_MODEM_ROBUST_MODULATOR, "[eCall]IVS robust modulator chosen (NACK count: %d)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_START, "[eCall]IVS received START (metric: %3d)")
   TRC_MSG(ECALL_IVS_MODEM_START_AFTER_ACK, "[eCall]IVS START ... !> assuming previous ACK was wrong")
   TRC_MSG(ECALL_IVS_MODEM_START_AFTER_HLACK, "[eCall]IVS START ... !> assuming previous HLACK was wrong")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_NACK_EXCEPTING_START, "[eCall]IVS received NACK  !> ignoring message (expecting START)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_NACK_LOW_RELIABILITY, "[eCall]IVS received NACK  !> ignoring message (reliability too low)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_NACK_ASSUME_IDLE, "[eCall]IVS received NACK  !> ignoring message (assume IDLE)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_NACK_FIRST_TIME, "[eCall]IVS received NACK  (metric: %3d), first time")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_NACK, "[eCall]IVS received NACK  (metric: %3d)")
   TRC_MSG(ECALL_IVS_MODEM_NACK_AFTER_ACK, "[eCall]IVS NACK ... !> assuming previous ACK was wrong")
   TRC_MSG(ECALL_IVS_MODEM_NACK_AFTER_HLACK, "[eCall]IVS NACK ... !> assuming previous HLACK was wrong")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_ACK_EXPECTING_START, "[eCall]IVS received ACK   !> ignoring message (expecting START)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_ACK_RECORDED, "[eCall]IVS received ACK   !> ignoring message (already recorded)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_ACK_LOW_RELIABILITY, "[eCall]IVS received ACK   !> ignoring message (reliability too low)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_ACK_ASSUME_IDLE, "[eCall]IVS received ACK   !> ignoring message (assume IDLE)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_ACK, "[eCall]IVS received ACK   (metric: %3d), ACK recorded, wait for HLACK")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_ACK_WAITING, "[eCall]IVS received ACK   (metric: %3d), waiting...")
   TRC_MSG(ECALL_IVS_MODEM_ACK_AFTER_HLACK, "[eCall]IVS ACK ... !> assuming previous HLACK was wrong")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_IDLE_EXPECTING_START, "[eCall]IVS received IDLE  !> ignoring message (expecting START)")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_IDLE_IGNORE, "[eCall]IVS received IDLE  !> ignoring message")
   TRC_MSG(ECALL_IVS_MODEM_RECEIVED_IDLE_REMAINING, "[eCall]IVS remaining in IDLE mode")
   TRC_MSG(ECALL_SYNC_DETECTED, "[eCall]sync detected; delay: %+4d; npeaks: %+4d (inverted sync)")
   TRC_MSG(ECALL_SYNC_DETECTED_REGULAR, "[eCall]sync detected; delay: %+4d; npeaks: %+4d (regular sync)")
   TRC_MSG(ECALL_SYNC_MAX_RANGE, "[eCall]maximum sync checking range is [-480...480] samples")
   TRC_MSG(ECALL_SYNC_DETECTE_SLIP, "[eCall]sync check detects sample slip! [%+1d sample(s)]")
   TRC_MSG(ECALL_SYNC_PSAP_MAX_RANGE, "[eCall][PSAP] maximum sync tracking range is [-240...240] samples")
   TRC_MSG(ECALL_SYNC_PSAP_SLIP, "[eCall][PSAP] sync tracking detects sample slip! [%+1d sample(s)]")
   TRC_MSG(ECALL_CONTROL_PORT_UNDEFINE, "[eCall]control callback: port owner undefined.")
   TRC_MSG(ECALL_CONTROL_SYNC_LOCKED, "[eCall]sync locked, starting control message detection")
   TRC_MSG(ECALL_CONTROL_CODEC_INVERSION, "[eCall]codec inversion detected!")
   TRC_MSG(ECALL_CONTROL_MESSAGE_IGNORE, "[eCall]message ignored (bad sync check)")
   TRC_MSG(ECALL_PSAP_MODEM_RECEIVED_SEND_CONTROL, "[eCall][PSAP] SendStart received from control")
   TRC_MSG(ECALL_PSAP_MODEM_RECEIVED_SEND_OVER, "[eCall][PSAP] SendStart received, starting over...")
   TRC_MSG(ECALL_PSAP_MODEM_RECEIVED_SEND_IGNORE, "[eCall][PSAP] SendStart received from control, ignored.")
   TRC_MSG(ECALL_PSAP_MODEM_RECEIVED_HLACK, "[eCall][PSAP] HLACK data received from control")
   TRC_MSG(ECALL_PSAP_MODEM_RECEIVED_HLACK_IGNORE, "[eCall][PSAP] HLACK data received from control, ignored.")
   TRC_MSG(ECALL_PSAP_MODEM_RESET_RECEIVER, "[eCall][PSAP] reset receiver")
   TRC_MSG(ECALL_PSAP_MODEM_RESET_TRANSMITTER, "[eCall][PSAP] reset transmitter")
   TRC_MSG(ECALL_PSAP_MODEM_RECEIVED_SEND, "[eCall][PSAP] received SEND (metric: %3d), initiating START trigger")
   TRC_MSG(ECALL_PSAP_MODEM_INVERSION_DETECT, "[eCall][PSAP] codec inversion detected!")
   TRC_MSG(ECALL_PSAP_MODEM_INVERSION_SYNC, "[eCall][PSAP] codec inversion detected (sync observer)!")
   TRC_MSG(ECALL_PSAP_MODEM_RESTART, "[eCall][PSAP] restart due to tracking failures!")
   TRC_MSG(ECALL_PSAP_MODEM_CRC_FAIL, "[eCall][PSAP] CRC failed; rv = %d")
   TRC_MSG(ECALL_PSAP_MODEM_RECEIVED_MSD, "[eCall][PSAP] MSD successfully received; redundancy versions: %d")
   TRC_MSG(ECALL_PSAP_MODEM_SENDING_HLACK, "[eCall][PSAP] sending HLACK; data: 0x0%X")
   TRC_MSG(ECALL_PSAP_MODEM_SENDING_START, "[eCall][PSAP] sending START")
   TRC_MSG(ECALL_PSAP_MODEM_SENDING_NACK, "[eCall][PSAP] sending NACK")
   TRC_MSG(ECALL_PSAP_MODEM_SENDING_ACK, "[eCall][PSAP] sending ACK")
   TRC_MSG(ECALL_PSAP_MODEM_SENDING_ACK_PEND, "[eCall][PSAP] sending ACK (HLACK pending)")
   TRC_MSG(ECALL_PSAP_MODEM_FAST_REMAIN_IDLE, "[eCall][PSAP] remaining in IDLE mode")
   TRC_MSG(ECALL_PSAP_MODEM_FAST_MODULATION, "[eCall][PSAP] fast modulator chosen (metric: %d)")
   TRC_MSG(ECALL_PSAP_MODEM_ROBUST_MODULATION, "[eCall][PSAP] robust modulator chosen (metric: %d)")

	// pcm record
	// TRC_MSG(PCMREC_HISR_DATA_DROP_DSP, "[pcmRec] Drop dsp data due to buffer full, wFrameIdx = %d, rFrameIdx = %d")
	// TRC_MSG(PCMREC_HISR_DATA_FROM_DSP, "[pcmRec] SE buffer = %x, len = %x")
	// TRC_MSG(PCMREC_GET_MIC_DATA_BUFS, "[pcmRec] procFrameNum=%d, bufBeginIdx=%d, curWriteFrame=%d, pcmRec.bufReadFrame=%d")
	// TRC_MSG(PCMREC_GET_DATA_BUFS, "[pcmRec] Get data buffers add1 = %x, len1 = %d, add2 = %x, len2 = %d")
	// TRC_MSG(PCMREC_GET_EMPTY_DATA, "[pcmRec] Get data empty buffer")

	// RAW pcm record
	TRC_MSG(RAWPCMREC_HISR_DATA_DROP_DSP, "[rawPcmRec] Drop dsp data due to buffer is in using")
	TRC_MSG(RAWPCMREC_HISR_DATA_FROM_DSP, "[rawPcmRec] SE buffer = %x, len = %x")
	TRC_MSG(RAWPCMREC_GET_MIC_DATA_BUFS, "[rawPcmRec] RawPcmRec_GetMicDataBufs: add=%x, header len=%d, UL data len=%d, DL data len=%d")
	TRC_MSG(RAWPCMREC_GET_DATA_BUFS, "[rawPcmRec] Get data buffers add1 = %x, len1 = %d, add2 = %x, len2 = %d")
	TRC_MSG(RAWPCMREC_GET_DATA_INFO, "[rawPcmRec] Get data info %d: UL_fs=%d, UL_byte_len=%d, DL_fs=%d, DL_byte_len=%d")
	TRC_MSG(RAWPCMREC_GET_EMPTY_DATA, "[rawPcmRec] Get data empty buffer")
	TRC_MSG(RAWPCMREC_HISR_LOCK_NOT_AVALIABLE, "[rawPcmRec] rawPcmRec lcok is not avaiable in hisr")

   //BT SCO on ARM
   TRC_MSG(L1AUDIO_BTSCO_HISR_TX_PERIOD, "[SCO] btsco_hisr TX disable isr period %d")
   TRC_MSG(L1AUDIO_BTSCO_HISR_RX_PERIOD, "[SCO] btsco_hisr RX disable isr period %d")
   TRC_MSG(L1AUDIO_BTSCO_HISR_PERIOD, "[SCO] btsco_hisr disable isr period %d")          
   TRC_MSG(L1AUDIO_BTSCO_MSBC_CORRECT_HEADER      ,"[SCO][DRV] MSBC DATA : correct header")
   TRC_MSG(L1AUDIO_BTSCO_MSBC_WRONG_HEADER        ,"[SCO][DRV] MSBC DATA : wrong header")
   TRC_MSG(L1AUDIO_BTSCO_MSBC_PACKET_NOT_FOUND    ,"[SCO][DRV] MSBC DATA : packets can not be found")
   TRC_MSG(L1AUDIO_BTSCO_MSBC_DATA_PACKET_NOT_FOUND  ,"[SCO][DRV] MSBC DATA : wrong header and failed packets")   
   TRC_MSG(L1AUDIO_BTSCO_SP_ON        ,"[SCO][DRV]Speech On, state: %d, fWideBand = %d")
   TRC_MSG(L1AUDIO_BTSCO_SP_OFF       ,"[SCO][DRV]Speech Off, state: %d")
   TRC_MSG(L1AUDIO_BTSCO_START        ,"[SCO][DRV]Start, state: %d, fWideBand = %d")
   TRC_MSG(L1AUDIO_BTSCO_STOP         ,"[SCO][DRV]Stop, state: %d")
   TRC_MSG(L1AUDIO_BTSCO_PROCESS      ,"[SCO][DRV]Process, state: %d, pRX: 0x%X, pTX: 0x%X")
   TRC_MSG(L1AUDIO_BTSCO_HISR         ,"[SCO][DRV]HISR, state: %d")
   TRC_MSG(L1AUDIO_BTSCO_CONTROL      ,"[SCO][DRV]Control: 0x%X, PacketType: %d, W_Address: 0x%X, R_Address: 0x%X")
   TRC_MSG(L1AUDIO_BTSCO_COPY_RX      ,"[SCO][DRV]Copy_RX, overflow : %d, iPacket_w: %d, iPacket_r: %d, uBufferCount: %d")
   TRC_MSG(L1AUDIO_BTSCO_COPY_TX      ,"[SCO][DRV]Copy_TX, underflow: %d, iPacket_w: %d, iPacket_r: %d, uBufferCount: %d")
   TRC_MSG(L1AUDIO_BTSCO_GET_MEM      ,"[SCO][DRV]GetMemory, uModule: %d, uSize(byte): %d")
   TRC_MSG(L1AUDIO_BTSCO_PROC_TX_RAW  ,"[SCO][DRV]PROC_TX_RAW, RawDataLen(byte): %d,uPcmBuf_w(byte): %d")
   TRC_MSG(L1AUDIO_BTSCO_PROC_TX_SRC  ,"[SCO][DRV]PROC_TX_SRC, uConsumeByte: %d, uOutByte: %d")
   TRC_MSG(L1AUDIO_BTSCO_PROC_TX_CVSD ,"[SCO][DRV]CVSD_TX_CVSD, iPacket_w: %d, iPacket_r: %d, fEnableFilter: %d")
   TRC_MSG(L1AUDIO_BTSCO_PROC_RX_RAW  ,"[SCO][DRV]PROC_RX_RAW, CurrentFreeSpace(byte): %d, TotalFreeSpace(byte): %d, uPcmBuf_r(byte): %d")
   TRC_MSG(L1AUDIO_BTSCO_PROC_RX_PLC  ,"[SCO][DRV]PROC_RX_PLC")
   TRC_MSG(L1AUDIO_BTSCO_PROC_RX_CVSD ,"[SCO][DRV]CVSD_RX_CVSD, iPacket_w: %d, iPacket_r: %d, fEnableFilter: %d, fEnablePLC: %d")
   TRC_MSG(L1AUDIO_BTSCO_ALLOC_MEM    ,"[SCO][DRV]Alloc Memory, Size: %d, ptr: 0x%X")

   TRC_MSG(L1AUDIO_BTSCO_AP_SPEECH_TX_DATA   ,"[SCO][APP]Speech TX data, uCurrentSpace(Byte): %d, uTotalSpace(Byte): %d")
   TRC_MSG(L1AUDIO_BTSCO_AP_SPEECH_TX_OF     ,"[SCO][APP]Speech TX Overflow, freespace(byte): %d")
   TRC_MSG(L1AUDIO_BTSCO_AP_SPEECH_RX_DATA   ,"[SCO][APP]Speech RX data, uCurrentData(Byte): %d, uTotalData(Byte): %d")
   TRC_MSG(L1AUDIO_BTSCO_AP_SPEECH_RX_UF     ,"[SCO][APP]Speech RX Underflow, datacount(byte): %d")

    // Speech Log
   TRC_MSG(SPLOG_GET_DBG_FLAG       ,"[SPLOG]GET_DBG_FLAG, 0x%X")
END_TRACE_MAP(MOD_L1SP)
#endif // _L1SP_TRC_H
