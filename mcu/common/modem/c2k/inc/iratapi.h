/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2016
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS (""MEDIATEK SOFTWARE"")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN ""AS-IS"" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2013
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/** \file
 *
 * Filename:
 * ---------
 *   iratapi.h
 *
 * Project:
 * --------
 *   C2K
 *
 * Description:
 * ------------
 * This file defines the structures of messages between MD1 and MD3.
 *
 * Author:
 * -------
 * -------
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by PVCS. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Log$
 *
 * 01 09 2018 sue.zhong
 * [MOLY00300743] [MT6763][SMO][C2K]Remove relative include path in source and header file
 *
 * 10 24 2017 sue.zhong
 * [MOLY00284146] [MT6763][SMO][C2K]Remove relative include path in source and header file
 * .Roll back for on PC build
 *
 * 08 17 2017 jiayong.zhang
 * [MOLY00265972] [Gen93]Merge code from R1 to TRUNK
 * 	
 * 	umolya
 *
 * 03 06 2017 dayang.liu
 * [MOLY00233405] [BUG][Bianco UmolyA trunk][PS][EVDO] add ELT_RMC_TEST_DO_SET_DFS_CHCNT_CMD_MSG
 * 	
 * 	Add MSG_ID_ELT_RMC_TEST_DO_SET_DFS_CHCNT_CMD_MSG UMOLYA\TRUNK.
 *
 * 02 23 2017 hairong.wang
 * [MOLY00225438] C2K LL1A code update for UMOLYA trunk
 * modify ll1a/ll1stub code for new ELT struct
 *
 * 01 22 2017 derrick.qiang
 * [MOLY00226021] [Change Feature] RTBA RBS Scenario Control Feature
 * 	
 * 	.RBS Scenario Control Code
 *
 * 01 19 2017 julian.zhang
 * [MOLY00224435] [NewFeature][EVL1]GKI/DHL based nwsim platform porting
 *
 * 01 13 2017 meiwei.zhu
 * [MOLY00224704] merge NWSIM Dual mode L1 IT related code to Trunk
 * 	
 * 	merge umolya trunk: do conn rel and sleep
 *
 * 01 09 2017 olive.wang
 * [MOLY00223610] [6293][C2K]Merge AFLT meas function CL from T0
 * 1x traffic AFLT case on Umolya Trunk branch.
 *
 * 01 05 2017 sue.zhong
 * [MOLY00218409] [6293][C2K]Sync C2K code to UMOLYA TRUNK from C2K CBr (W1701)
 * merge c2k source
 *
 * 12 28 2016 ziquan.yu
 * [MOLY00221554] [Gen93] CVAL PSDM design
 *
 * 12 15 2016 sue.zhong
 * [MOLY00217270] [6293][C2K]Sync C2K code to UMOLYA TRUNK from C2K CBr (W51)
 * c2k source
 *
 * 12 09 2016 jeely.wang
 * modify dfs related code
 *
 * 12 09 2016 arlene.wang
 * nslt DFS.
 *
 * 12 08 2016 elon.zhang
 * evl1: add rf_tst IT cases
 *
 * 12 01 2016 hairong.wang
 * ll1stub for rsva suspend/resume msg handle
 *
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
#ifndef _IRATAPI_H
#define _IRATAPI_H

#ifdef MTK_DEV_C2K_IRAT
#include "module_msg_range.h"
#include "val_msgid.h"
#include "stub_msgid.h"
#include "elt_msgid.h"
#include "css_msgid.h"
#include "errc_msgid.h"
#include "do_clc_msgid.h"
#include "rsva_msgid.h"
#include "psw_msgid.h"
#include "gmss_msgid.h"
#include "eval_msgid.h"
#include "mll1_msgid.h"
#include "val_msgid.h"
#include "l4_msgid.h"
#include "sim_ps_msgid.h"
#include "rsva_msgid.h"
#include "do_rcp_msgid.h"
#include "l1d_msgid.h"

#define MAX_ELT_TRACE_LENGTH 100
typedef enum
{
    FLIGHT_MODE        = 0,
    ACTIVE_RAT_MODE    = 1,
    STANDBY_RAT_MODE   = 2,
    RAT_MODE_INVALID   = 0xFF
}srlteRatTypeT;

typedef enum
{
    IRAT_EVENT_DO_POWERUP,           /*0*/
    IRAT_EVENT_1X_POWERUP,           /*1*/
    IRAT_EVENT_DO_POWERDOWN,         /*2*/
    IRAT_EVENT_1X_POWERDOWN,         /*3*/
    IRAT_EVENT_DO_IDLE,              /*4*/
    IRAT_EVENT_1X_IDLE,              /*5*/
    IRAT_EVENT_DO_WAKEUP,            /*6*/
    IRAT_EVENT_1X_WAKEUP,            /*7*/
    IRAT_EVENT_DO_EXHAUST,           /*8*/
    IRAT_EVENT_1X_EXHAUST,           /*9*/
    IRAT_EVENT_DO_NO_ASSO,           /*10*/
    IRAT_EVENT_DO_SYSTEM_LOST,       /*11*/
    IRAT_EVENT_DO_VALIDATE_FAIL,     /*12*/
    IRAT_EVENT_DO_VALIDATE_SUCC,     /*13*/
    IRAT_EVENT_SESSION_OPEN,         /*14*/
    IRAT_EVENT_SESSION_CLOSE,        /*15*/
    IRAT_EVENT_DO_TURNOFF_DONE,      /*16*/
    IRAT_EVENT_1X_TURNOFF_DONE,      /*17*/
    IRAT_EVENT_TIMEOUT,              /*18*/
    IRAT_EVENT_ABORT,                /*19*/
    IRAT_EVENT_FAST_ABORT,           /*20*/
    IRAT_EVENT_REJECT,               /*21*/
    IRAT_EVENT_LLA_PREEMPT,          /*22*/
    IRAT_EVENT_LLA_UPDATE_IND,       /*23*/
    IRAT_EVENT_1X_PS_RES_RELEASED,   /*24*/
    IRAT_EVENT_MODE_CHANGE_DONE,     /*25*/
}IratEvent;

//#define LOCAL_PARA_HDR

// To Be removed
/** across core interface message ID
 *  this enum is used only by C2K.
 *  as the internal message ID used in MD1 is transprently passed through to MD3,
 *  MD3 should know the ID values.
 *  this enum should sync with the global message ID value in the shared files
 */
typedef enum
{
    GMSS_CSS_MCC_SEARCH_REQ             =    MSG_ID_GMSS_CSS_MCC_SEARCH_REQ,
    GMSS_CSS_MCC_SEARCH_CNF             =    MSG_ID_GMSS_CSS_MCC_SEARCH_CNF,
    GMSS_CSS_SYS_ACQUIRE_REQ            =    MSG_ID_GMSS_CSS_SYS_ACQUIRE_REQ,
    GMSS_CSS_SYS_ACQUIRE_CNF            =    MSG_ID_GMSS_CSS_SYS_ACQUIRE_CNF,
    GMSS_CSS_CS_REG_REQ                 =    MSG_ID_GMSS_CSS_CS_REG_REQ,
    GMSS_CSS_CS_REG_CNF                 =    MSG_ID_GMSS_CSS_CS_REG_CNF,
    GMSS_CSS_PS_REG_REQ                 =    MSG_ID_GMSS_CSS_PS_REG_REQ,
    GMSS_CSS_PS_REG_CNF                 =    MSG_ID_GMSS_CSS_PS_REG_CNF,
    GMSS_CSS_DEACTIVATE_REQ             =    MSG_ID_GMSS_CSS_DEACTIVATE_REQ,
    GMSS_CSS_DEACTIVATE_CNF             =    MSG_ID_GMSS_CSS_DEACTIVATE_CNF,
    GMSS_CSS_RAT_CHANGE_REQ             =    MSG_ID_GMSS_CSS_RAT_CHANGE_REQ,
    GMSS_CSS_SYS_LOST_IND               =    MSG_ID_GMSS_CSS_SYS_LOST_IND,
    GMSS_CSS_SYS_RECOVERY_IND           =    MSG_ID_GMSS_CSS_SYS_RECOVERY_IND,
    GMSS_CSS_READY_IND                  =    MSG_ID_GMSS_CSS_READY_IND,
    GMSS_CSS_1X_CONN_STATUS_IND         =    MSG_ID_GMSS_CSS_1X_CONN_STATUS_IND,
    GMSS_CSS_MMSS_FILE_UPDATE_IND       =    MSG_ID_GMSS_CSS_MMSS_FILE_UPDATE_IND,
    GMSS_CSS_PS_CHANGE_IND              =    MSG_ID_GMSS_CSS_PS_CHANGE_IND,
    GMSS_CSS_PS_CONN_STATUS_IND         =    MSG_ID_GMSS_CSS_PS_CONN_STATUS_IND,
    GMSS_CSS_MCC_CHANGE_IND             =    MSG_ID_GMSS_CSS_MCC_CHANGE_IND,
    LTE_C2K_RAT_CHANGE_REQ              =    MSG_ID_LTE_C2K_RAT_CHANGE_REQ,
    LTE_C2K_RAT_CHANGE_CNF              =    MSG_ID_LTE_C2K_RAT_CHANGE_CNF,
    C2K_LTE_RAT_CHANGE_REQ              =    MSG_ID_C2K_LTE_RAT_CHANGE_REQ,
    C2K_LTE_RAT_CHANGE_CNF              =    MSG_ID_C2K_LTE_RAT_CHANGE_CNF,
    VAL_RAC_RAT_CHANGE_START_REQ        =    MSG_ID_VAL_RAC_RAT_CHANGE_START_REQ,
    VAL_RAC_RAT_CHANGE_FINISH_REQ       =    MSG_ID_VAL_RAC_RAT_CHANGE_FINISH_REQ,
    
    GMSS_CSS_NOT_READY_IND              =    MSG_ID_GMSS_CSS_NOT_READY_IND,
    GMSS_CSS_PS_DEREG_REQ               =    MSG_ID_GMSS_CSS_PS_DEREG_REQ,
    GMSS_CSS_ACTIVE_SIM_INFO_REQ        =    MSG_ID_GMSS_CSS_ACTIVE_SIM_INFO_REQ,
    GMSS_CSS_PS_DEREG_CNF               =    MSG_ID_GMSS_CSS_PS_DEREG_CNF,
    GMSS_CSS_MSPL_SEARCH_EXHAUSTED      =    MSG_ID_GMSS_CSS_MSPL_SEARCH_EXHAUSTED,

#if defined (MTK_DEV_C2K_SRLTE_BASE) && !defined (MTK_DEV_DENALI_SRLTE_PRE_IT)
    L4C_C2K_EFUN_STATE_IND             =    MSG_ID_L4C_C2K_EFUN_STATE_IND,
    L4C_C2K_PWROFF_START_IND           =    MSG_ID_L4C_C2K_PWROFF_START_IND,
    L4C_VAL_EMDSTATUS_FLOW_VERSION_IND =    MSG_ID_L4C_VAL_MDSTATUS_FLOW_VERSION_IND,
#endif
    L4C_C2K_MDSTATUS_UPDATE_IND        =    MSG_ID_C2K_L4C_MDSTATUS_UPDATE_IND,
    L4C_C2K_TXRX_ACTIVE_TIME_REQ       =    MSG_ID_L4C_C2K_TXRX_ACTIVE_TIME_REQ,
    L4C_C2K_TXRX_ACTIVE_TIME_CNF       =    MSG_ID_L4C_C2K_TXRX_ACTIVE_TIME_CNF,

    GMSS_CSS_SUSPEND_STATUS_IND         =    MSG_ID_GMSS_CSS_SUSPEND_STATUS_IND,
    GMSS_CSS_SIM_PLMN_INFO_IND          =    MSG_ID_GMSS_CSS_SIM_PLMN_INFO_IND,
    GMSS_CSS_SIM_PLMN_INFO_RSP          =    MSG_ID_GMSS_CSS_SIM_PLMN_INFO_RSP,

    RSVAS_CAS_SUSPEND_SERVICE_CNF    = MSG_ID_RSVAS_CAS_SUSPEND_SERVICE_CNF,
    RSVAS_CAS_ABORT_SERVICE_CNF      = MSG_ID_RSVAS_CAS_ABORT_SERVICE_CNF,
    RSVAS_CAS_VIRTUAL_SUSPEND_SERVICE_CNF = MSG_ID_RSVAS_CAS_VIRTUAL_SUSPEND_SERVICE_CNF,
    RSVAS_CAS_PROTECT_CS_SERVICE_REQ = MSG_ID_RSVAS_CAS_PROTECT_CS_SERVICE_REQ,
    /* PSW_RSVAS_SAP */
    PSW_ERRC_1XRTT_PS_CONNECTION_STATUS_IND = MSG_ID_PSW_ERRC_1XRTT_PS_CONNECTION_STATUS_IND,


    /* CSS_RSVAC_SAP */
    CSS_RSVAC_FREQUENCY_SCAN_START_REQ   = MSG_ID_CSS_RSVAC_FREQUENCY_SCAN_START_REQ,
    CSS_RSVAC_FREQUENCY_SCAN_MODIFY_REQ  = MSG_ID_CSS_RSVAC_FREQUENCY_SCAN_MODIFY_REQ,
    CSS_RSVAC_FREQUENCY_SCAN_STOP_REQ    = MSG_ID_CSS_RSVAC_FREQUENCY_SCAN_STOP_REQ,
    RSVAC_CSS_FREQUENCY_SCAN_ACCEPT_IND  = MSG_ID_RSVAC_CSS_FREQUENCY_SCAN_ACCEPT_IND,
    RSVAC_CSS_FREQUENCY_SCAN_PREEMPT_IND = MSG_ID_RSVAC_CSS_FREQUENCY_SCAN_PREEMPT_IND,

    C2K_LTE_CSFB_REQ                  = MSG_ID_C2K_LTE_CSFB_REQ,
    C2K_LTE_CSFB_STOP_REQ             = MSG_ID_C2K_LTE_CSFB_STOP_REQ,

#ifdef MTK_DEV_C2K_SRLTE_BASE
    /* LL1 Message */
    CL1_LL1_RAT_STATUS_IND            = MSG_ID_CL1_LL1_RAT_STATUS_IND,
    CL1_LL1_MODE_STATUS_IND           = MSG_ID_CL1_LL1_MODE_STATUS_IND,
    LL1_CL1_MODE_STATUS_UPDATE_IND    = MSG_ID_LL1_CL1_MODE_STATUS_UPDATE_IND,
    CL1_LL1_ACTIVE_MEASURE_STATUS_IND = MSG_ID_CL1_LL1_ACTIVE_MEASURE_STATUS_IND,
    CL1_LL1_MEASURE_REQ               = MSG_ID_CL1_LL1_MEASURE_REQ,
    CL1_LL1_STANDBY_MEASURE_DONE_IND  = MSG_ID_CL1_LL1_STANDBY_MEASURE_DONE_IND,
    LL1_CL1_GAP_SERVICE_REQ           = MSG_ID_LL1_CL1_GAP_SERVICE_REQ,
    CL1_LL1_GAP_STOP_REQ              = MSG_ID_CL1_LL1_GAP_STOP_REQ,
    LL1_CL1_GAP_STOP_CNF              = MSG_ID_LL1_CL1_GAP_STOP_CNF,
    LL1_CL1_GAP_STOP_REQ              = MSG_ID_LL1_CL1_GAP_STOP_REQ,
    CL1_LL1_GAP_STOP_CNF              = MSG_ID_CL1_LL1_GAP_STOP_CNF,
    LL1_CL1_GAP_SUSPEND_REQ           = MSG_ID_LL1_CL1_GAP_SUSPEND_REQ,
    CL1_LL1_GAP_SUSPEND_CNF           = MSG_ID_CL1_LL1_GAP_SUSPEND_CNF,
    LL1_CL1_GAP_RESUME_IND            = MSG_ID_LL1_CL1_GAP_RESUME_IND,
    CL1_LL1_AUTO_GAP_REQ              = MSG_ID_CL1_LL1_AUTO_GAP_REQ,
    LL1_CL1_AUTO_GAP_CNF              = MSG_ID_LL1_CL1_AUTO_GAP_CNF,
    LL1_CL1_AUTO_GAP_STOP_IND         = MSG_ID_LL1_CL1_AUTO_GAP_STOP_IND,
    CL1_LL1_AUTO_GAP_STOP_RES         = MSG_ID_CL1_LL1_AUTO_GAP_STOP_RES,
    CL1_LL1_AUTO_GAP_END_IND          = MSG_ID_CL1_LL1_AUTO_GAP_END_IND,
    LL1_CL1_AUTO_GAP_AVAILABLE_IND    = MSG_ID_LL1_CL1_AUTO_GAP_AVAILABLE_IND,
    LL1_CL1_AUTO_GAP_UNAVAILABLE_IND  = MSG_ID_LL1_CL1_AUTO_GAP_UNAVAILABLE_IND,
    LL1_CL1_GAP_NOTIFY_IND            = MSG_ID_LL1_CL1_GAP_NOTIFY_IND,
    CL1_LL1_GAP_PATTERN_IND           = MSG_ID_CL1_LL1_GAP_PATTERN_IND,

    CL1_LL1_SIB8_TIMING_SYNC_REQ      = MSG_ID_CL1_LL1_SIB8_TIMING_SYNC_REQ,
    LL1_CL1_SIB8_TIMING_SYNC_CNF      = MSG_ID_LL1_CL1_SIB8_TIMING_SYNC_CNF,
    CL1_LL1_SPECIFIC_GAP_IND		  = MSG_ID_CL1_LL1_SPECIFIC_GAP_IND,


    /*L1*/
    CBS_RAT_MODE_STATUS_IND                 = MSG_ID_CBS_RAT_MODE_STATUS_IND,  /* script send this msg to CBS */
    CBS_CHANNEL_CONFIG_IND                  = MSG_ID_CBS_CHANNEL_CONFIG_IND,
    EL1_RAT_MODE_STATUS_IND                 = MSG_ID_EL1_RAT_MODE_STATUS_IND, /* script send this msg to Ll1stub */
    EL1_ACTIVE_MEASURE_INFO_IND             = MSG_ID_EL1_ACTIVE_MEASURE_INFO_IND,
    EL1_STANDBY_MEASURE_REQ                 = MSG_ID_EL1_STANDBY_MEASURE_REQ,
    EL1_AUTO_GAP_AVAILABLE_IND              = MSG_ID_EL1_AUTO_GAP_AVAILABLE_IND,
    EL1_AUTO_GAP_FAIL                       = MSG_ID_EL1_AUTO_GAP_FAIL,
    EL1_STOP_GAP_IND                        = MSG_ID_EL1_STOP_GAP_IND,
    EL1_SUSPEND_GAP_IND                     = MSG_ID_EL1_SUSPEND_GAP_IND,
    EL1_RESUME_GAP_IND                      = MSG_ID_EL1_RESUME_GAP_IND,      /* script send this msg to Ll1stub */
    EL1_MMO_GAP_LENGTH_IND                  = MSG_ID_EL1_MMO_GAP_LENGTH_IND,                  /* script send this msg to HSC task */
    STUB_LL1A_RMC_RAT_STATUS_IND_MSG        = MSG_ID_STUB_LL1A_RMC_RAT_STATUS_IND_MSG,        /* script send this msg to HSC task */
    STUB_LL1A_IDP_SIGNAL_PROTECT_STATUS_IND = MSG_ID_STUB_LL1A_IDP_SIGNAL_PROTECT_STATUS_IND , /* script send this msg to HSC task */
    STUB_LL1A_PSW_SIGNAL_PROTECT_STATUS_IND = MSG_ID_STUB_LL1A_PSW_SIGNAL_PROTECT_STATUS_IND , /* script send this msg to HSC task */
    EVDO_ACTIVE_MODE_STATUS_IND             = MSG_ID_EVDO_ACTIVE_MODE_STATUS_IND ,    /* Ll1stub send this msg to script */
    LL1STUB_CBS_CHANNEL_NOTIFY_IND          = MSG_ID_LL1STUB_CBS_CHANNEL_NOTIFY_IND , /* CBS send this msg to Ll1stub */

    /* for L1 temp use */
    EVSTANDBY_SCRIPT_CELL_MEAS_REQ             = MSG_ID_EVSTANDBY_SCRIPT_CELL_MEAS_REQ,
    EVSTANDBY_SCRIPT_ACQ_CGI_REQ               = MSG_ID_EVSTANDBY_SCRIPT_ACQ_CGI_REQ,

#endif
#if 0
/* under construction !*/
/* under construction !*/
#endif
    GMSS_CSS_MMSS_LIST_SYNC_REQ         =   MSG_ID_GMSS_CSS_MMSS_LIST_SYNC_REQ,
    GMSS_CSS_CAMPING_INFO_IND           =   MSG_ID_GMSS_CSS_CAMPING_INFO_IND,
    GMSS_CSS_3GPP_NORMAL_SERVICE_REQ    =   MSG_ID_GMSS_CSS_3GPP_NORMAL_SERVICE_REQ,
    GMSS_CSS_SET_RAT_MODE_REQ           =   MSG_ID_GMSS_CSS_SET_RAT_MODE_REQ,
    GMSS_CSS_SET_RAT_MODE_CNF           =   MSG_ID_GMSS_CSS_SET_RAT_MODE_CNF,
    GMSS_CSS_EMC_SESSION_START_REQ      =   MSG_ID_GMSS_CSS_EMC_SESSION_START_REQ,
    GMSS_CSS_EMC_SESSION_STOP_REQ       =   MSG_ID_GMSS_CSS_EMC_SESSION_STOP_REQ,
    GMSS_CSS_EMC_LOCAL_DETACH_REQ       =   MSG_ID_GMSS_CSS_EMC_LOCAL_DETACH_REQ,
    GMSS_CSS_CELL_INFO_IND              =   MSG_ID_GMSS_CSS_CELL_INFO_IND,
    IMCSMS_CVAL_C2K_SMS_SEND_REQ        =   MSG_ID_IMCSMS_CVAL_C2K_SMS_SEND_REQ,
    IMCSMS_CVAL_C2K_SMS_SEND_CNF        =   MSG_ID_IMCSMS_CVAL_C2K_SMS_SEND_CNF,
    L4C_VAL_MDSTATUS_TK_BSP_IND         =   MSG_ID_L4C_VAL_MDSTATUS_TK_BSP_IND,
    GMSS_CSS_CS_SUSPEND_IND             =   MSG_ID_GMSS_CSS_CS_SUSPEND_IND,
    GMSS_CSS_CS_RESUME_REQ              =   MSG_ID_GMSS_CSS_CS_RESUME_REQ,
    GMSS_CSS_C2K_SERVICE_IND            =   MSG_ID_GMSS_CSS_C2K_SERVICE_IND,
    IMCSMS_VAL_C2K_SMS_RECV_REQ         =   MSG_ID_IMCSMS_VAL_C2K_SMS_RECV_REQ,
    IMCSMS_VAL_C2K_SMS_RECV_CNF         =   MSG_ID_IMCSMS_VAL_C2K_SMS_RECV_CNF,

    /* ON_PC_UT */
    /* LLA */
    C2K_MRS_CAS_OCCUPY_LLA_REQ = MSG_ID_C2K_MRS_CAS_OCCUPY_LLA_REQ,
    C2K_MRS_CAS_RELEASE_LLA_REQ = MSG_ID_C2K_MRS_CAS_RELEASE_LLA_REQ,
    C2K_MRS_CAS_GET_LLA_OCCUPY_RAT_REQ = MSG_ID_C2K_MRS_CAS_GET_LLA_OCCUPY_RAT_REQ,
    RSVAS_CAS_OCCUPY_SERVICE_REQ = MSG_ID_RSVAS_CAS_OCCUPY_SERVICE_REQ,
    RSVAS_CAS_RELEASE_SERVICE_REQ = MSG_ID_RSVAS_CAS_RELEASE_SERVICE_REQ,
    RSVAS_CAS_TRANSFER_SERVICE_REQ = MSG_ID_RSVAS_CAS_TRANSFER_SERVICE_REQ,

    /* ON_PC_IT */
    STUB_HSC_SIB8_TIMING_CONFIG_REQ = MSG_ID_STUB_HSC_SIB8_TIMING_CONFIG_REQ,
    STUB_HSC_SIB8_TIMING_SYNC_REQ = MSG_ID_STUB_HSC_SIB8_TIMING_SYNC_REQ,
    STUB_HSC_SIB8_TIMING_SYNC_CNF = MSG_ID_STUB_HSC_SIB8_TIMING_SYNC_CNF,

    LTE_ACTIVE_GAP_STOP_IND_CHECK = MSG_ID_LTE_ACTIVE_GAP_STOP_IND_CHECK,  /* Ll1stub send this msg to script */
    EL1_STANDBY_SRCIPT_MEAS_REPORT=MSG_ID_EL1_STANDBY_SRCIPT_MEAS_REPORT, /* Ll1stub send this msg to script */
    EVDO_ACTIVE_GAP_OFFER=MSG_ID_EVDO_ACTIVE_GAP_OFFER,          /* Ll1stub send this msg to script */
    EVDO_ACTIVE_GAP_STOP_REQ=MSG_ID_EVDO_ACTIVE_GAP_STOP_REQ,       /* Ll1stub send this msg to script */
    EVDO_SLEEP_IND=MSG_ID_EVDO_SLEEP_IND,                 /* HSC send this msg to script */
    EVDO_WAKEUP_IND=MSG_ID_EVDO_WAKEUP_IND,                /* HSC send this msg to script */
    RTT_SLEEP_IND=MSG_ID_RTT_SLEEP_IND,                  /* HSC send this msg to script */
    RTT_WAKEUP_IND=MSG_ID_RTT_WAKEUP_IND,                 /* HSC send this msg to script */
    EVDO_ACTIVE_SLT_PCH_DENIED=MSG_ID_EVDO_ACTIVE_SLT_PCH_DENIED,     /* Rtbstub send this msg to script */
    EVDO_RTB_DENY_IND=MSG_ID_EVDO_RTB_DENY_IND,              /*RTB send this msg to script*/
    EVDO_RTB_PREMPT_IND=MSG_ID_EVDO_RTB_PREMPT_IND,            /*RTB send this msg to script*/
    EVDO_RTB_RESUME_IND=MSG_ID_EVDO_RTB_RESUME_IND,            /*RTB send this msg to script*/
    EVDO_HSC_PREMPT_IND=MSG_ID_EVDO_HSC_PREMPT_IND,            /*HSC send this msg to script*/
    EVDO_HSC_RESUME_IND=MSG_ID_EVDO_HSC_RESUME_IND,            /*HSC send this msg to script*/
    EVDO_CELL_SWITH_IND=MSG_ID_EVDO_CELL_SWITH_IND,            /*RMC send this msg to script*/
    EVDO_ICS_INITACQ_REGCHANEL_WITH_AFC_IND=MSG_ID_EVDO_ICS_INITACQ_REGCHANEL_WITH_AFC_IND,  /*RMC send this msg to script*/
    EVDO_ICS_INITACQ_REGCHANEL_WITHOUT_AFC_IND=MSG_ID_EVDO_ICS_INITACQ_REGCHANEL_WITHOUT_AFC_IND,  /*RMC send this msg to script*/
    EVDO_CGI_ACQ_START_IND=MSG_ID_EVDO_CGI_ACQ_START_IND,
    EVDO_MPSR_START_IND=MSG_ID_EVDO_MPSR_START_IND,
    EVDO_MPSR_END_IND=MSG_ID_EVDO_MPSR_END_IND,

    MSG_CL1_FR_UT_TRIG = MSG_ID_MSG_CL1_FR_UT_TRIG,             /* script send this msg to frtest */
    FR_UT_CASE_PASS_REPORT = MSG_ID_FR_UT_CASE_PASS_REPORT,         /* frtest send this msg to script */
    CL1_NWSIM_UT_TEST_TRIG = MSG_ID_CL1_NWSIM_UT_TEST_TRIG,
    CL1_NWSIM_UT_TEST_REPORT = MSG_ID_CL1_NWSIM_UT_TEST_REPORT,
    CL1_UT_TRIG = MSG_ID_CL1_UT_TRIG,
    CL1_UT_RLT_RPT = MSG_ID_CL1_UT_RLT_RPT,
    L1_IT_STEP_PASS =  MSG_ID_L1_IT_STEP_PASS,
    L1_IT_1XSYNC_PASS =  MSG_ID_L1_IT_1XSYNC_PASS,
    L1_IT_ACCESS_MEAS_PASS =  MSG_ID_L1_IT_ACCESS_MEAS_PASS,
    L1_IT_PCH_REC_PASS =  MSG_ID_L1_IT_PCH_REC_PASS,
    L1_IT_IDLE_MEAS_PASS =  MSG_ID_L1_IT_IDLE_MEAS_PASS,
    L1_IT_TRAFFIC_MEAS_PASS =  MSG_ID_L1_IT_TRAFFIC_MEAS_PASS,
    L1_IT_IDLE_DFS_PASS = MSG_ID_L1_IT_IDLE_DFS_PASS,
    L1_IT_MINI_ACQ_PASS = MSG_ID_L1_IT_MINI_ACQ_PASS,
    L1_IT_DFS_MEAS_DONE = MSG_ID_L1_IT_DFS_MEAS_DONE,
    XL1_SCRIPT_L1D_TEST_CASE_MSG = MSG_ID_XL1_SCRIPT_L1D_TEST_CASE_MSG,
    LL1A_SCRIPT_LTE_SCAN_C2K_ACTIVE_PARAMS_IND = MSG_ID_LL1A_SCRIPT_LTE_SCAN_C2K_ACTIVE_PARAMS_IND,
    LL1A_SCRIPT_PS_MMO_SIGNAL_PROTECT_IND = MSG_ID_LL1A_SCRIPT_PS_MMO_SIGNAL_PROTECT_IND,
    LL1STUB_SCRIPT_RSVAS_SUSPEND_RESUME_IND = MSG_ID_LL1STUB_SCRIPT_RSVAS_SUSPEND_RESUME_IND,

    ELT_RMC_POWER_MODE_TEST_MODE_RSP_MSG = MSG_ID_ELT_RMC_POWER_MODE_TEST_MODE_RSP_MSG,
    ELT_RMC_RSSI_POWER_MODE_QUERY_RSP_MSG = MSG_ID_ELT_RMC_RSSI_POWER_MODE_QUERY_RSP_MSG,
    ELT_RMC_MODIFY_FOE_RSP_MSG = MSG_ID_ELT_RMC_MODIFY_FOE_RSP_MSG,
    ELT_RMC_FOE_QUERY_RSP_MSG = MSG_ID_ELT_RMC_FOE_QUERY_RSP_MSG,
    ELT_CLC_IDP_SLOTTED_MODE_SET_RSP_MSG = MSG_ID_ELT_CLC_IDP_SLOTTED_MODE_SET_RSP_MSG,
    ELT_CLC_GET_L3_STATUS_RSP_MSG = MSG_ID_ELT_CLC_GET_L3_STATUS_RSP_MSG,
    ELT_CLC_ALMP_REL_CONN_RSP_MSG = MSG_ID_ELT_CLC_ALMP_REL_CONN_RSP_MSG,
    ELT_RMC_DO_DFS_SERVCH_RSP_MSG = MSG_ID_ELT_RMC_DO_DFS_SERVCH_RSP_MSG,
    ELT_RMC_TEST_DO_SET_DFS_CHCNT_RSP_MSG = MSG_ID_ELT_RMC_TEST_DO_SET_DFS_CHCNT_RSP_MSG,
    ELT_RMC_DO_INTRA_MEAS_RSP_MSG = MSG_ID_ELT_RMC_DO_INTRA_MEAS_RSP_MSG,
    ELT_RMC_MMAFC_STATE_QUERY_RSP_MSG = MSG_ID_ELT_RMC_MMAFC_STATE_QUERY_RSP_MSG,

    ELT_GET_RF_PLAT_INFO_RSP_MSG = MSG_ID_ELT_GET_RF_PLAT_INFO_RSP_MSG,
    ELT_RFD_TEST_MODE_REQ_RSP_MSG = MSG_ID_ELT_RFD_TEST_MODE_REQ_RSP_MSG,
    ELT_SET_MIPI_CW_RSP_MSG = MSG_ID_ELT_SET_MIPI_CW_RSP_MSG,
    ELT_GET_MIPI_CW_RSP_MSG = MSG_ID_ELT_GET_MIPI_CW_RSP_MSG,
    ELT_SET_SPI_DATA_RSP_MSG = MSG_ID_ELT_SET_SPI_DATA_RSP_MSG,
    ELT_GET_SPI_DATA_RSP_MSG = MSG_ID_ELT_GET_SPI_DATA_RSP_MSG,
    ELT_TRANSMIT_CTRL_RSP_MSG = MSG_ID_ELT_TRANSMIT_CTRL_RSP_MSG,
    ELT_RECEIVE_CTRL_RSP_MSG = MSG_ID_ELT_RECEIVE_CTRL_RSP_MSG,
    ELT_AFC_CONFIG_RSP_MSG = MSG_ID_ELT_AFC_CONFIG_RSP_MSG,
    ELT_TX_AGC_CONFIG_RSP_MSG = MSG_ID_ELT_TX_AGC_CONFIG_RSP_MSG,
    ELT_TX_POWER_QUERY_RSP_MSG = MSG_ID_ELT_TX_POWER_QUERY_RSP_MSG,
    ELT_RX_AGC_CONFIG_RSP_MSG = MSG_ID_ELT_RX_AGC_CONFIG_RSP_MSG,
    ELT_RX_RSSI_QUERY_RSP_MSG = MSG_ID_ELT_RX_RSSI_QUERY_RSP_MSG,
    ELT_RX_SNR_QUERY_RSP_MSG = MSG_ID_ELT_RX_SNR_QUERY_RSP_MSG,
    ELT_RX_EC_IO_QUERY_RSP_MSG = MSG_ID_ELT_RX_EC_IO_QUERY_RSP_MSG,
    ELT_AFC_CAL_DATA_SET_RSP_MSG = MSG_ID_ELT_AFC_CAL_DATA_SET_RSP_MSG,
    ELT_AFC_CAL_DATA_GET_RSP_MSG = MSG_ID_ELT_AFC_CAL_DATA_GET_RSP_MSG,
    ELT_RX_CAL_DATA_SET_RSP_MSG = MSG_ID_ELT_RX_CAL_DATA_SET_RSP_MSG,
    ELT_RX_CAL_DATA_GET_RSP_MSG = MSG_ID_ELT_RX_CAL_DATA_GET_RSP_MSG,
    ELT_TX_CAL_DATA_SET_RSP_MSG = MSG_ID_ELT_TX_CAL_DATA_SET_RSP_MSG,
    ELT_TX_CAL_DATA_GET_RSP_MSG = MSG_ID_ELT_TX_CAL_DATA_GET_RSP_MSG,
    ELT_FHC_START_RSP_MSG = MSG_ID_ELT_FHC_START_RSP_MSG,
    ELT_TEMP_BACKOFF_SET_RSP_MSG = MSG_ID_ELT_TEMP_BACKOFF_SET_RSP_MSG,
    ELT_TEMP_BACKOFF_GET_RSP_MSG = MSG_ID_ELT_TEMP_BACKOFF_GET_RSP_MSG,
    ELT_RCP_TX_AGC_CTRL_RSP_MSG = MSG_ID_ELT_RCP_TX_AGC_CTRL_RSP_MSG,
    ELT_RCP_ACC_RTB_RSP_MSG = MSG_ID_ELT_RCP_ACC_RTB_RSP_MSG,
    RCP_TXAGC_RTC_PWR_REF_PARAM_MSG = MSG_ID_RCP_TXAGC_RTC_PWR_REF_PARAM_MSG,
    ELT_DO_ICS_TST_CHECK_RPT_MSG = MSG_ID_ELT_RMC_ICS_TST_CHECKRPT_MSG,
    ELT_RMC_RX_TX_ACT_SLOT_QUERY_RSP_MSG = MSG_ID_ELT_RMC_RX_TX_ACT_SLOT_QUERY_RSP_MSG,
    ELT_TST_RX_ANTENNA_TESTMODE_SET_RSP_MSG = MSG_ID_ELT_TST_RX_ANTENNA_TESTMODE_SET_RSP_MSG,
    ELT_TST_AT_SIM_RX_RSSI_RSP_MSG = MSG_ID_ELT_TST_AT_SIM_RX_RSSI_RSP_MSG,
    ELT_TST_TEMP_READ_RSP_MSG = MSG_ID_ELT_TST_TEMP_READ_RSP_MSG,
#if (defined(MTK_PLT_ON_PC_IT))||(defined(MTK_C2K_L1_TST))    
    ELT_C2K_PHYUT_RPT_MSG       = MSG_ID_ELT_C2K_PHYUT_RPT_MSG,
#endif    
	ELT_L1D_TX_RESULTS_MSG = MSG_ID_UTS_L1D_TX_RESULTS_MSG,
    ELT_RESULT_CHECK_RESP_MSG = MSG_ID_ELT_RESULT_CHECK_RESP_MSG,
    ELT_RBS_SCENARIO_CONTROL_CONFIG_IND_MSG    = MSG_ID_ELT_RBS_SCENARIO_CONTROL_CONFIG_IND_MSG,
    ELT_RBS_SCENARIO_CONTROL_TRIGGERED_IND_MSG = MSG_ID_ELT_RBS_SCENARIO_CONTROL_TRIGGERED_IND_MSG,
    ELT_RBS_SCENARIO_CONTROL_RPT_IND_MSG = MSG_ID_ELT_RBS_SCENARIO_CONTROL_RPT_IND_MSG, 
    ELT_CLC_ALMP_REL_CONN_SHDR_RSP_MSG = MSG_ID_ELT_CLC_ALMP_REL_CONN_SHDR_RSP_MSG

}irat_itf_msg_id_enum;

#include "c2k_irat_msg_struct.h"

/* make the c2k irat message sturcture 1 byte alignment in PC IT
 * For NWSIM project is 1 byte strucuter member aligment
 */
#if 0
#ifdef MTK_PLT_ON_PC_IT
/* under construction !*/
/* under construction !*/
#endif
#endif

#include "mrs_as_irat_enums.h"  

typedef struct {
   LOCAL_PARA_HDR
   kal_bool result;
} mrs_cas_occupy_lla_cnf_struct;

typedef struct {
   LOCAL_PARA_HDR
   MRS_RAT_MODE_TYPE rat;
} mrs_cas_get_lla_occupy_rat_cnf_struct;

#if defined(MTK_PLT_ON_PC_UT)
typedef struct {
   LOCAL_PARA_HDR
   MRS_SIM_INDEX    sim_index;
   MRS_RAT_MODE_TYPE    rat;
   MRS_OCCUPY_PROCEDURE procedure;
} c2k_mrs_cas_occupy_lla_req_struct;

typedef struct {
   LOCAL_PARA_HDR
   MRS_SIM_INDEX    sim_index;
   MRS_RAT_MODE_TYPE    rat;
} c2k_mrs_cas_release_lla_req_struct;

typedef struct {
   LOCAL_PARA_HDR
   MRS_SIM_INDEX sim_index;
} c2k_mrs_cas_get_lla_occupy_rat_req_struct;
/*LLA temp solution end*/
#endif

#ifdef MTK_PLT_ON_PC_IT
/* include vmmi_struct in NWSIM SigDb */
#include "vmmi_msg_struct.h"
#include "elt_msgid.h"

#if 0
/* under construction !*/
/* under construction !*/
#endif
#endif

/* NOTE!!!!! please add inlcude target specific header files above in #else branch
 * DONOT add here
 */

#endif /* MTK_DEV_C2K_IRAT */

#endif /* _IRATAPI_H */


